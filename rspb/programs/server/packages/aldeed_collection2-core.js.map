{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed:collection2-core/collection2.js"],"names":["EventEmitter","module","watch","require","v","Meteor","EJSON","_","checkNpmVersions","SimpleSchema","default","Collection2","Mongo","Collection","prototype","attachSchema","c2AttachSchema","ss","options","self","_c2","_simpleSchema","replace","version","newSS","extend","selector","attachTo","obj","schemaIndex","_simpleSchemas","forEach","schema","index","isEqual","push","_collection","LocalCollection","defineDeny","keepInsecure","emit","each","simpleSchema","doc","query","schemas","length","Error","target","i","Object","keys","undefined","$set","methodName","_super","args","toArray","arguments","bypassCollection2","userId","err","doValidate","call","isServer","_makeNewID","splice","apply","type","getAutoValues","isFromTrustedCode","callback","error","isUpsert","last","hasCallback","validatedObjectWasInitiallyEmpty","isEmpty","upsert","isLocalCollection","_connection","validationContext","namedContext","isClient","_debug","reason","stack","wrapCallbackForParsingServerErrors","schemaAllowsId","allowsKey","_id","docId","ObjectID","cachedId","doClean","docToClean","filter","autoConvert","removeEmptyStrings","trimStrings","clean","mutate","isModifier","extendAutoValueContext","isInsert","isUpdate","docToValidate","prop","hasOwnProperty","isObject","set","clone","isValid","validate","modifier","extendedCustomContext","wrapCallbackForParsingMongoValidationErrors","getErrorObject","context","message","invalidKeys","validationErrors","keyErrorMessage","name","sanitizedError","stringify","addUniqueError","errorMessage","split","val","addValidationErrorsPropName","addValidationErrors","value","cb","wrappedCallbackForParsingMongoValidationErrors","code","indexOf","wrappedCallbackForParsingServerErrors","details","invalidKeysFromServer","parse","alreadyInsecured","c","Package","insecure","_name","allow","insert","update","remove","fetch","transform","alreadyDefined","deny","fields","exportDefault"],"mappings":"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","file":"/packages/aldeed_collection2-core.js","sourcesContent":["import { EventEmitter } from 'meteor/raix:eventemitter';\nimport { Meteor } from 'meteor/meteor';\nimport { EJSON } from 'meteor/ejson';\nimport { _ } from 'meteor/underscore';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\n\ncheckNpmVersions({ 'simpl-schema': '0.x.x' }, 'aldeed:meteor-collection2-core');\n\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  var self = this;\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!(ss instanceof SimpleSchema)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  self._c2 = self._c2 || {};\n\n  // If we've already attached one schema, we combine both into a new schema unless options.replace is `true`\n  if (self._c2._simpleSchema && options.replace !== true) {\n    if (ss.version >= 2) {\n      var newSS = new SimpleSchema(self._c2._simpleSchema);\n      newSS.extend(ss);\n      ss = newSS;\n    } else {\n      ss = new SimpleSchema([self._c2._simpleSchema, ss]);\n    }\n  }\n\n  var selector = options.selector;\n\n  function attachTo(obj) {\n    if (typeof selector === \"object\") {\n      // Index of existing schema with identical selector\n      var schemaIndex = -1;\n\n      // we need an array to hold multiple schemas\n      obj._c2._simpleSchemas = obj._c2._simpleSchemas || [];\n\n      // Loop through existing schemas with selectors\n      obj._c2._simpleSchemas.forEach(function (schema, index) {\n        // if we find a schema with an identical selector, save it's index\n        if(_.isEqual(schema.selector, selector)) {\n          schemaIndex = index;\n        }\n      });\n      if (schemaIndex === -1) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: new SimpleSchema(ss),\n          selector: selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace !== true) {\n          // Merge with existing schema unless options.replace is `true`\n          if (obj._c2._simpleSchemas[schemaIndex].schema.version >= 2) {\n            obj._c2._simpleSchemas[schemaIndex].schema.extend(ss);\n          } else {\n            obj._c2._simpleSchemas[schemaIndex].schema = new SimpleSchema([obj._c2._simpleSchemas[schemaIndex].schema, ss]);\n          }\n        } else {\n          // If options.repalce is `true` replace existing schema with new schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        }\n\n      }\n\n      // Remove existing schemas without selector\n      delete obj._c2._simpleSchema;\n    } else {\n      // Track the schema in the collection\n      obj._c2._simpleSchema = ss;\n\n      // Remove existing schemas with selector\n      delete obj._c2._simpleSchemas;\n    }\n  }\n\n  attachTo(self);\n  // Attach the schema to the underlying LocalCollection, too\n  if (self._collection instanceof LocalCollection) {\n    self._collection._c2 = self._collection._c2 || {};\n    attachTo(self._collection);\n  }\n\n  defineDeny(self, options);\n  keepInsecure(self);\n\n  Collection2.emit('schema.attached', self, ss, options);\n};\n\n_.each([Mongo.Collection, LocalCollection], function (obj) {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in `self`, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    var schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n      if (!doc) throw new Error('collection.simpleSchema() requires doc argument when there are multiple schemas');\n\n      var schema, selector, target;\n      for (var i = 0; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n_.each(['insert', 'update'], function(methodName) {\n  var _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function() {\n    var self = this, options,\n        args = _.toArray(arguments);\n\n    options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (self._c2 && options.bypassCollection2 !== true) {\n      var userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate.call(\n        self,\n        methodName,\n        args,\n        true, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? self._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(self, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(type, args, getAutoValues, userId, isFromTrustedCode) {\n  var self = this, doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  var validatedObjectWasInitiallyEmpty = _.isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  var schema = self.simpleSchema(doc, options, selector);\n  var isLocalCollection = (self._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Determine validation context\n  var validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  var schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = self._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  var docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  var cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  function doClean(docToClean, getAutoValues, filter, autoConvert, removeEmptyStrings, trimStrings) {\n    // Clean the doc/modifier in place\n    schema.clean(docToClean, {\n      mutate: true,\n      filter: filter,\n      autoConvert: autoConvert,\n      getAutoValues: getAutoValues,\n      isModifier: (type !== \"insert\"),\n      removeEmptyStrings: removeEmptyStrings,\n      trimStrings: trimStrings,\n      extendAutoValueContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendAutoValueContext || {})\n    });\n  }\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  doClean(\n    doc,\n    getAutoValues,\n    options.filter !== false,\n    options.autoConvert !== false,\n    options.removeEmptyStrings !== false,\n    options.trimStrings !== false\n  );\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  var docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier. This is no doubt prone to errors, but there\n  // probably isn't any better way right now.\n  if (Meteor.isServer && isUpsert && _.isObject(selector)) {\n    var set = docToValidate.$set || {};\n    docToValidate.$set = _.clone(selector);\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    _.extend(docToValidate.$set, set);\n  }\n\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    doClean(docToValidate, true, false, false, false, false);\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && _.isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  var isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: _.extend({\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert: isUpsert,\n        userId: userId,\n        isFromTrustedCode: isFromTrustedCode,\n        docId: docId,\n        isLocalCollection: isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  var message;\n  var invalidKeys = (typeof context.validationErrors === 'function') ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    message = context.keyErrorMessage(invalidKeys[0].name);\n  } else {\n    message = \"Failed validation\";\n  }\n  var error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  var name = errorMessage.split('c2_')[1].split(' ')[0];\n  var val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  var addValidationErrorsPropName = (typeof context.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(error) {\n    var args = _.toArray(arguments);\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000' !== -1)) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  var addValidationErrorsPropName = (typeof validationContext.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors(error) {\n    var args = _.toArray(arguments);\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      var invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nvar alreadyInsecured = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecured[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecured[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nvar alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    var isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and autovalues. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/autovalue functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny(_.extend({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate.call(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {transform: null}));\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n\nexport default Collection2;\n"]}