var require = meteorInstall({"folder":{"parent":{"funcs.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/parent/funcs.ls.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
this._ = lodash;
this.coll = {};
this.schema = {};
this.look = function(list, val){
  return _.find(selects[list], function(i){
    return i.value === val;
  });
};
this.look2 = function(list, id){
  return _.find(coll[list].find().fetch(), function(i){
    return i._id === id;
  });
};
this.randomId = function(){
  return Math.random().toString(36).slice(2);
};
this.zeros = function(num){
  return repeatString$('0', 6 - num.toString().length) + num;
};
this.monthDiff = function(date){
  var diff;
  diff = date.getTime() - new Date().getTime();
  diff /= 1000 * 60 * 60 * 24 * 7 * 4;
  return Math.round(diff);
};
if (Meteor.isClient) {
  AutoForm.setDefaultTemplate('materialize');
  this.currentRoute = function(){
    return Router.current().route.getName();
  };
  this.currentPar = function(param){
    return Router.current().params[param];
  };
  this.search = function(){
    return Session.get('search');
  };
  this.formDoc = function(){
    return Session.get('formDoc');
  };
  this.limit = function(){
    return Session.get('limit');
  };
  this.page = function(){
    return Session.get('page');
  };
  this.tag = function(tag, val){
    return "<" + tag + ">" + val + "</" + tag + ">";
  };
  this.userName = function(id){
    var ref$;
    return (ref$ = Meteor.users.findOne({
      _id: id
    })) != null ? ref$.username : void 8;
  };
  this.roles = function(){
    var ref$;
    return (ref$ = Meteor.user()) != null ? ref$.roles : void 8;
  };
  this.userGroup = function(name){
    var ref$, this$ = this;
    if (name) {
      return (ref$ = roles()) != null ? ref$[name] : void 8;
    } else {
      return function(it){
        return it[0];
      }(_.keys(roles()));
    }
  };
  this.userRole = function(name){
    var ref$, ref1$, this$ = this;
    if (name) {
      return ((ref$ = roles()) != null ? (ref1$ = ref$[currentRoute()]) != null ? ref1$[0] : void 8 : void 8) === name;
    } else {
      return function(it){
        return it[0][0];
      }(_.values(roles()));
    }
  };
  this.sessNull = function(){
    return _.map(Session.keys, function(i, j){
      if (j !== 'page' && j !== 'limit') {
        return Session.set(j, null);
      }
    });
  };
}
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hooks.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/hooks.ls.js                                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
if (Meteor.isClient) {
  this.modForm = function(doc, idbayar){
    var val, ref$, this$ = this;
    if (currentRoute() === 'jalan') {
      return _.assign(doc, {
        tanggal: new Date(),
        idbayar: idbayar || randomId(),
        jenis: currentRoute(),
        karcis: doc.klinik ? (val = parseInt(function(it){
          return it.label;
        }(_.find(selects.karcis, function(it){
          return it.value === doc.klinik;
        }))), val !== 0 && (((ref$ = coll.pasien.findOne().rawat) != null ? ref$[0] : void 8) != null && (val -= 10)), val * 1000) : void 8,
        total: function(){
          var arr, tlr, obat;
          arr = ['tindakan', 'labor', 'radio'];
          tlr = _.zipObject(arr, _.map(arr, function(i){
            return doc[i] && _.map(doc[i], function(j){
              var ref$, this$ = this;
              return ref$ = {}, ref$["id" + i] = randomId(), ref$.harga = function(it){
                return it.harga;
              }(_.find(coll.tarif.find().fetch(), function(k){
                return k._id === j.nama;
              })), ref$;
            });
          }));
          obat = {
            obat: doc.obat && _.map(doc.obat, function(i){
              return {
                idobat: randomId(),
                harga: 0,
                subtotal: i.harga * i.jumlah
              };
            })
          };
          return _.assign(tlr, obat, {
            semua: _.sum(_.concat(_.map(arr, function(i){
              var ref$;
              return (ref$ = tlr[i]) != null ? ref$.harga : void 8;
            }), _.map(obat, function(i){
              return i != null ? i.subtotal : void 8;
            })))
          });
        }(),
        billRegis: function(){
          var a, b, c;
          a = function(){
            return doc.anamesa_perawat != null || doc.anamesa_dokter != null;
          };
          b = function(){
            var ref$;
            return ((ref$ = doc.total) != null ? ref$.semua : void 8) > 0 && doc.cara_bayar !== 1;
          };
          c = function(){
            var ref$;
            return doc.obat != null && 0 === ((ref$ = doc.total) != null ? ref$.semua : void 8);
          };
          return doc.billRegis || a() || b() || c();
        }(),
        status_bayar: function(){
          var a, b;
          a = function(){
            var ref$;
            return ((ref$ = doc.total) != null ? ref$.semua : void 8) > 0 && doc.cara_bayar !== 1;
          };
          b = function(){
            var ref$;
            return doc.obat && 0 === ((ref$ = doc.total) != null ? ref$.semua : void 8);
          };
          return doc.status_bayar || a() || b();
        }(),
        spm: function(){
          var begin, stop;
          begin = Session.get('begin');
          stop = moment();
          return stop.diff(begin, 'minutes');
        }(),
        petugas: Meteor.userId(),
        nobill: parseInt(_.toString(Date.now()).substr(7, 13))
      });
    }
  };
  AutoForm.addHooks('formPasien', {
    before: {
      'update-pushArray': function(doc){
        var formDoc;
        formDoc = Session.get('formDoc');
        if (formDoc) {
          Meteor.call('rmRawat', currentPar('no_mr'), formDoc.idbayar);
        }
        return this.result(modForm(doc));
      }
    },
    after: {
      insert: function(){
        return sessNull();
      },
      'update-pushArray': function(err, res){
        sessNull();
        if (res) {
          return Meteor.call('pindah', currentPar('no_mr'));
        }
      }
    },
    formToDoc: function(doc){
      Session.set('preview', modForm(doc));
      if (currentRoute('regis') && Session.get('showForm')) {
        Meteor.call('patientExist', doc.no_mr, function(err, res){
          if (res) {
            Materialize.toast('No MR sudah dipakai pasien yang lain', 3000);
            return $('input[name="no_mr"]').val('');
          }
        });
      }
      return doc;
    }
  });
  AutoForm.addHooks('formGudang', {
    before: {
      insert: function(doc){
        return this.result(_.assign(doc, {
          idbarang: randomId()
        }, {
          idbatch: batch[0][randomId()]
        }));
      },
      'update-pushArray': function(doc){
        return this.result(_.assign(doc, {
          idbatch: randomId()
        }));
      }
    }
  });
  AutoForm.addHooks('formAmprah', {
    before: {
      'update-pushArray': function(doc){
        return this.result(_.assign(doc, {
          idamprah: randomId(),
          peminta: Meteor.userId(),
          tanggal: new Date(),
          ruangan: _.keys(roles())[0]
        }));
      }
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"modules.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/modules.ls.js                                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
this.modules = [
  {
    name: 'regis',
    full: 'Pendaftaran',
    icon: 'people',
    color: 'orange'
  }, {
    name: 'bayar',
    full: 'Pembayaran',
    icon: 'monetization_on',
    color: 'green'
  }, {
    name: 'jalan',
    full: 'Rawat Jalan',
    icon: 'directions',
    color: 'blue'
  }, {
    name: 'igd',
    full: 'IGD',
    icon: 'airport_shuttle',
    color: 'red'
  }, {
    name: 'inap',
    full: 'Rawat Inap',
    icon: 'hotel',
    color: 'cyan'
  }, {
    name: 'labor',
    full: 'Laboratorium',
    icon: 'wb_incandescent',
    color: 'amber'
  }, {
    name: 'radio',
    full: 'Radiologi',
    icon: 'airline_seat_flat',
    color: 'indigo'
  }, {
    name: 'obat',
    full: 'Apotek',
    icon: 'enhanced_encryption',
    color: 'light-green'
  }, {
    name: 'admisi',
    full: 'Admisi',
    icon: 'assignment',
    color: 'purple'
  }, {
    name: 'rekam',
    full: 'Rekam Medik',
    icon: 'content_copy',
    color: 'brown'
  }, {
    name: 'farmasi',
    full: 'Gudang Farmasi',
    icon: 'local_pharmacy',
    color: 'orange'
  }, {
    name: 'logistik',
    full: 'Gudang Logistik',
    icon: 'rv_hookup',
    color: 'blue-grey'
  }, {
    name: 'manajemen',
    full: 'Manajemen',
    icon: 'people',
    color: 'orange'
  }
];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"pdf.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/pdf.ls.js                                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var slice$ = [].slice;
if (Meteor.isClient) {
  this.makePdf = {
    card: function(){
      var doc, pdf;
      doc = coll.pasien.findOne();
      pdf = pdfMake.createPdf({
        content: ['Nama  : ' + doc.regis.nama_lengkap, 'No. MR: ' + zeros(doc.no_mr)],
        pageSize: 'B8',
        pageMargins: [110, 50, 0, 0],
        pageOrientation: 'landscape'
      });
      return pdf.download(zeros(doc.no_mr) + '_card.pdf');
    },
    consent: function(){
      var doc, pdf;
      doc = coll.pasien.findOne();
      pdf = pdfMake.createPdf({
        content: [
          {
            text: 'PEMERINTAH PROVINSI RIAU\nRUMAH SAKIT UMUM DAERAH PETALA BUMI\nJL. Dr. Soetomo No. 65, Telp. (0761) 23024',
            alignment: 'center'
          }, {
            text: '\nDATA UMUM PASIEN',
            alignment: 'center'
          }, {
            columns: [
              ['NO. MR', 'NAMA LENGKAP', 'TEMPAT & TANGGAL LAHIR', 'GOLONGAN DARAH', 'JENIS KELAMIN', 'AGAMA', 'PENDIDIKAN', 'PEKERJAAN', 'NAMA AYAH', 'NAMA IBU', 'NAMA SUAMI / ISTRI', 'ALAMAT', 'NO. TELP / HP'], _.map([zeros(doc.no_mr), doc.regis.nama_lengkap, (doc.regis.tmpt_lahir || '-') + ', ' + moment(doc.regis.tgl_lahir).format('D/MM/YYYY')].concat(
                slice$.call(_.map(['darah', 'kelamin', 'agama', 'pendidikan', 'pekerjaan'], function(i){
                  var ref$;
                  return ((ref$ = look(i, doc.regis[i])) != null ? ref$.label : void 8) || '-';
                })), slice$.call(_.map(['ayah', 'ibu', 'pasangan', 'alamat', 'kontak'], function(i){
                  return doc.regis[i] || '-';
                }))
              ), function(i){
                return ': ' + i;
              })
            ]
          }, {
            text: '\nPERSETUJUAN UMUM (GENERAL CONSENT)',
            alignment: 'center'
          }, {
            table: {
              body: [[
                'S', 'TS', {
                  text: 'Keterangan',
                  alignment: 'center'
                }
              ]].concat(slice$.call(_.map([['Saya akan mentaati peraturan yang berlaku di RSUD Petala Bumi'], ['Saya memberi kuasa kepada dokter dan semua tenaga kesehatan untuk melakukan pemeriksaan / pengobatan / tindakan yang diperlakukan upaya kesembuhan saya / pasien tersebut diatas'], ['Saya memberi kuasa kepada dokter dan semua tenaga kesehatan yang ikut merawat saya untuk memberikan keterangan medis saya kepada yang bertanggung jawab atas biaya perawatan saya.'], ['Saya memberi kuasa kepada RSUD Petala Bumi untuk menginformasikan identitas sosial saya kepada keluarga / rekan / masyarakat'], ['Saya mengatakan bahwa informasi hasil pemeriksaan / rekam medis saya dapat digunakan untuk pendidikan / penelitian demi kemajuan ilmu kesehatan']], function(i){
                return [' ', ' '].concat(slice$.call(i));
              })))
            }
          }, '\nPetunjuk :', 'S: Setuju', 'TS: Tidak Setuju', {
            alignment: 'justify',
            columns: [
              {
                text: '\n\n\n\n__________________\n' + _.startCase(Meteor.user().username),
                alignment: 'center'
              }, {
                text: 'Pekanbaru, ' + moment().format('DD/MM/YYYY') + '\n\n\n\n__________________\n' + _.startCase(doc.regis.nama_lengkap),
                alignment: 'center'
              }
            ]
          }
        ]
      });
      return pdf.download(zeros(doc.no_mr) + '_consent.pdf');
    },
    payRawat: function(no_mr, doc){
      var pasien, rows, i$, ref$, len$, i, j$, ref1$, len1$, j, find, table, pdf;
      pasien = coll.pasien.findOne({
        no_mr: parseInt(no_mr)
      });
      rows = [['Uraian', 'Harga']];
      for (i$ = 0, len$ = (ref$ = ['tindakan', 'labor', 'radio']).length; i$ < len$; ++i$) {
        i = ref$[i$];
        if (doc[i]) {
          for (j$ = 0, len1$ = (ref1$ = doc[i]).length; j$ < len1$; ++j$) {
            j = ref1$[j$];
            find = _.find(coll.tarif.find().fetch(), fn$);
            rows.push([_.startCase(find.nama), _.toString(j.harga)]);
          }
        }
      }
      table = {
        table: {
          widths: ['*', 'auto'],
          body: rows
        }
      };
      pdf = pdfMake.createPdf({
        content: [
          {
            text: 'PEMERINTAH PROVINSI RIAU\nRUMAH SAKIT UMUM DAERAH PETALA BUMI\nJL. DR. SOETOMO NO. 65, TELP. (0761) 23024, PEKANBARU',
            alignment: 'center'
          }, {
            text: '\nRINCIAN BIAYA RAWAT JALAN\n',
            alignment: 'center'
          }, {
            columns: [
              ['NO. MR', 'NAMA PASIEN', 'JENIS KELAMIN', 'TANGGAL LAHIR', 'UMUR', 'KLINIK'], _.map([zeros(pasien.no_mr), _.startCase(pasien.regis.nama_lengkap), ((ref$ = look('kelamin', pasien.regis.kelamin)) != null ? ref$.label : void 8) || '-', moment().format('D/MM/YYYY'), moment().diff(pasien.regis.tgl_lahir, 'years') + ' tahun', ((ref1$ = look('klinik', doc.klinik)) != null ? ref1$.label : void 8) || '-'], function(i){
                return ': ' + i;
              })
            ]
          }, {
            text: '\n\nRINCIAN PEMBAYARAN',
            alignment: center
          }, table, '\nTOTAL BIAYA' + 'Rp ' + _.toString(numeral(doc.total.semua)).format('0,0'), {
            text: '\nPEKANBARU, ' + moment().format('D/MM/YYYY') + '\n\n\n\n\n' + _.startCase(Meteor.user().username),
            alignment: 'right'
          }
        ]
      });
      return pdf.download(zeros(pasien.no_mr) + '_payRawat.pdf');
      function fn$(k){
        return k._id === j.nama;
      }
    },
    payRegCard: function(no_mr, idbayar, amount, words){
      var doc, pdf;
      doc = coll.pasien.findOne({
        no_mr: parseInt(no_mr)
      });
      pdf = pdfMake.createPdf({
        content: [
          {
            text: 'PEMERINTAH PROVINSI RIAU\nRUMAH SAKIT UMUM DAERAH PETALA BUMI\nJL. DR. SOETOMO NO. 65, TELP. (0761) 23024, PEKANBARU',
            alignment: 'center'
          }, {
            text: '\n\nKARCIS',
            alignment: 'center'
          }, {
            columns: [
              ['TANGGAL', 'NO. MR', 'NAMA PASIEN', 'TARIF', '\n\nPETUGAS'], _.map([moment().format('DD/MM/YYYY'), zeros(no_mr), _.startCase(doc.regis.nama_lengkap), 'Rp ' + amount, '\n\n' + _.startCase(Meteor.user().username)], function(i){
                return ': ' + i;
              })
            ]
          }
        ]
      });
      return pdf.download(zeros(no_mr) + '_payRegCard.pdf');
    },
    rekap: function(rows){
      var strings, pdf;
      strings = _.map(rows, function(i){
        return _.map(i, function(j){
          return _.toString(j);
        });
      });
      pdf = pdfMake.createPdf({
        content: [{
          table: {
            body: strings
          }
        }]
      });
      return pdf.download('rekap.pdf');
    }
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"rights.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/rights.ls.js                                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var slice$ = [].slice;
if (Meteor.isClient) {
  this.rights = [
    {
      group: 'regis',
      list: ['regis', 'jalan']
    }, {
      group: 'bayar',
      list: ['bayar']
    }, {
      group: 'jalan',
      list: ['jalan', 'farmasi']
    }, {
      group: 'inap',
      list: ['inap', 'farmasi']
    }, {
      group: 'labor',
      list: ['labor']
    }, {
      group: 'radio',
      list: ['radio']
    }, {
      group: 'obat',
      list: ['obat', 'farmasi']
    }, {
      group: 'rekam',
      list: ['rekam', 'regis']
    }, {
      group: 'admisi',
      list: ['admisi']
    }, {
      group: 'manajemen',
      list: ['manajemen']
    }, {
      group: 'farmasi',
      list: ['farmasi']
    }
  ];
  _.map(rights, function(i){
    return _.assign(i, {
      list: slice$.call(i.list).concat(['panduan'])
    });
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"selects.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/selects.ls.js                                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
this.selects = {
  rawat: ['rawat_jalan', 'rawat_inap', 'igd'],
  pekerjaan: ['pns', 'bumn_bumd', 'tni_polri', 'dokter', 'karyawan_swasta', 'wirausaha', 'honorer', 'pensiun', 'petani', 'buruh', 'tidak_bekerja', 'dan_lainnya'],
  kelamin: ['laki_laki', 'perempuan'],
  agama: ['islam', 'katolik', 'protestan', 'buddha', 'hindu', 'kong_hu_chu'],
  pendidikan: ['sd', 'smp', 'sma', 'diploma', 's1', 's2', 's3', 'tidak_sekolah'],
  darah: ['a', 'b', 'ab', 'o'],
  cara_bayar: ['umum', 'bpjs', 'jamkesda_pekanbaru', 'jamkesda_kampar', 'lapas_dinsos', 'free'],
  nikah: ['nikah', 'belum_nikah', 'janda', 'duda'],
  klinik: ['penyakit_dalam', 'gigi', 'kebidanan', 'tht', 'anak', 'saraf', 'mata', 'bedah', 'paru', 'tb_dots', 'kulit', 'fisioterapi', 'gizi', 'metadon', 'psikologi', 'tindakan', 'aps_labor', 'aps_radio'],
  karcis: [40, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 0, 25, 30, 25, 0, 0, 0],
  bentuk: ['butir', 'kapsul', 'tablet', 'sendok_makan', 'sendok_teh'],
  tipe_dokter: ['umum', 'spesialis'],
  rujukan: ['datang_sendiri', 'rs_lain', 'puskesmas', 'faskes_lainnya'],
  keluar: ['pulang', 'rujuk'],
  barang: ['generik', 'non_generik', 'obat_narkotika', 'bhp'],
  satuan: ['botol', 'vial', 'ampul', 'pcs', 'sachet', 'tube', 'supp', 'tablet', 'minidose', 'pot', 'turbuhaler', 'kaplet'],
  anggaran: ['blud', 'apbd', 'kemenkes', 'dinkes'],
  alias: ['tn', 'ny', 'nn', 'an', 'by']
};
_.map(selects, function(i, j){
  return selects[j] = _.map(selects[j], function(m, n){
    return {
      value: n + 1,
      label: _.startCase(m)
    };
  });
});
selects.tindakan = function(){
  var selector;
  if (Meteor.isClient) {
    selector = {
      jenis: Meteor.user().roles.jalan[0]
    };
    return Meteor.subscribe('coll', 'tarif', {}, {}).ready() && _.map(coll.tarif.find(selector).fetch(), function(i){
      return {
        value: i._id,
        label: _.startCase(i.nama)
      };
    });
  }
};
selects.dokter = function(){
  var selector, this$ = this;
  if (Meteor.isClient) {
    selector = {
      poli: function(it){
        return it.value;
      }(_.find(selects.klinik, function(i){
        return Meteor.user().roles.jalan[0] === _.snakeCase(i.label);
      }))
    };
    return Meteor.subscribe('coll', 'dokter', {}, {}).ready() && _.map(coll.dokter.find(selector).fetch(), function(i){
      return {
        value: i._id,
        label: i.nama
      };
    });
  }
};
selects.obat = function(){
  var filter;
  if (Meteor.isClient) {
    filter = function(arr){
      return _.filter(arr, function(i){
        return i.jenis === 1;
      });
    };
    return Meteor.subscribe('coll', 'gudang', {}, {}).ready() && _.map(filter(coll.gudang.find().fetch()), function(i){
      return {
        value: i._id,
        label: i.nama
      };
    });
  }
};
_.map(['labor', 'radio'], function(i){
  return selects[i] = function(){
    if (Meteor.isClient) {
      return Meteor.subscribe('coll', 'tarif', {}, {}).ready() && _.map(coll.tarif.find({
        jenis: i
      }).fetch(), function(j){
        return {
          value: j._id,
          label: _.startCase(j.nama)
        };
      });
    }
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"both.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// both.ls.js                                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading'
});
Router.route('/', {
  action: function(){
    return this.render('home');
  }
});
schema.regis = {
  no_mr: {
    type: Number,
    max: 999999
  },
  regis: {
    type: Object
  },
  'regis.alias': {
    type: Number,
    optional: true,
    autoform: {
      options: selects.alias
    }
  },
  'regis.nama_lengkap': {
    type: String
  },
  'regis.tgl_lahir': {
    type: Date,
    autoform: {
      type: 'pickadate',
      pickadateOptions: {
        selectYears: 150,
        selectMonths: true
      }
    }
  },
  'regis.tmpt_lahir': {
    type: String,
    optional: true
  },
  'regis.cara_bayar': {
    type: Number,
    autoform: {
      options: selects.cara_bayar
    }
  },
  'regis.kelamin': {
    type: Number,
    autoform: {
      options: selects.kelamin
    }
  },
  'regis.agama': {
    type: Number,
    autoform: {
      options: selects.agama
    }
  },
  'regis.nikah': {
    type: Number,
    autoform: {
      options: selects.nikah
    }
  },
  'regis.pendidikan': {
    type: Number,
    optional: true,
    autoform: {
      options: selects.pendidikan
    }
  },
  'regis.darah': {
    type: Number,
    optional: true,
    autoform: {
      options: selects.darah
    }
  },
  'regis.pekerjaan': {
    type: Number,
    optional: true,
    autoform: {
      options: selects.pekerjaan
    }
  },
  'regis.kabupaten': {
    type: String,
    optional: true
  },
  'regis.kecamatan': {
    type: String,
    optional: true
  },
  'regis.kelurahan': {
    type: String,
    optional: true
  },
  'regis.alamat': {
    type: String
  },
  'regis.kontak': {
    type: String,
    optional: true
  },
  'regis.ayah': {
    type: String,
    optional: true
  },
  'regis.ibu': {
    type: String,
    optional: true
  },
  'regis.pasangan': {
    type: String,
    optional: true
  },
  'regis.petugas': {
    type: String,
    autoform: {
      type: 'hidden'
    },
    autoValue: function(){
      if (Meteor.isClient) {
        return Meteor.userId();
      }
    }
  },
  'regis.date': {
    type: Date,
    autoform: {
      type: 'hidden'
    },
    autoValue: function(){
      return new Date;
    }
  },
  'regis.billCard': {
    type: Boolean,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  }
};
schema.fisik = {
  tekanan_darah: {
    type: String,
    optional: true
  },
  nadi: {
    type: Number,
    optional: true
  },
  suhu: {
    type: Number,
    decimal: true,
    optional: true
  },
  pernapasan: {
    type: Number,
    optional: true
  },
  berat: {
    type: Number,
    optional: true
  },
  tinggi: {
    type: Number,
    optional: true
  },
  lila: {
    type: Number,
    optional: true
  }
};
schema.tindakan = {
  idtindakan: {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  nama: {
    type: String,
    autoform: {
      options: selects.tindakan,
      type: 'universe-select'
    }
  },
  dokter: {
    type: String,
    autoform: {
      options: selects.dokter
    }
  },
  harga: {
    type: Number,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  }
};
schema.labor = {
  idlabor: {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  nama: {
    type: String,
    autoform: {
      options: selects.labor
    }
  },
  harga: {
    type: Number,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  hasil: {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  }
};
schema.radio = {
  idradio: {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  nama: {
    type: String,
    autoform: {
      options: selects.radio
    }
  },
  harga: {
    type: Number,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  hasil: {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  }
};
schema.obat = {
  idobat: {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  nama: {
    type: String,
    autoform: {
      options: selects.obat
    }
  },
  puyer: {
    type: String,
    optional: true
  },
  aturan: {
    type: Object
  },
  'aturan.kali': {
    type: Number
  },
  'aturan.dosis': {
    type: Number
  },
  'aturan.bentuk': {
    type: Number,
    autoform: {
      options: selects.bentuk
    }
  },
  jumlah: {
    type: Number
  },
  harga: {
    type: Number,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  subtotal: {
    type: Number,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  hasil: {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  }
};
schema.rawat = {
  no_mr: {
    type: Number
  },
  rawat: {
    type: Array
  },
  'rawat.$': {
    type: Object
  },
  'rawat.$.tanggal': {
    type: Date,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.idbayar': {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.jenis': {
    type: String,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.cara_bayar': {
    type: Number,
    autoform: {
      options: selects.cara_bayar,
      type: 'select-radio-inline'
    }
  },
  'rawat.$.klinik': {
    type: Number,
    autoform: {
      options: selects.klinik,
      type: 'select-radio-inline'
    }
  },
  'rawat.$.karcis': {
    type: Number,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.rujukan': {
    type: Number,
    optional: true,
    autoform: {
      options: selects.rujukan,
      type: 'select-radio-inline'
    }
  },
  'rawat.$.billRegis': {
    type: Boolean,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.nobill': {
    type: Number,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.status_bayar': {
    type: Boolean,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.anamesa_perawat': {
    type: String,
    optional: true,
    autoform: {
      afFieldInput: {
        type: 'textarea',
        rows: 6
      }
    }
  },
  'rawat.$.fisik': {
    optional: true,
    type: [new SimpleSchema(schema.fisik)]
  },
  'rawat.$.anamesa_dokter': {
    type: String,
    optional: true,
    autoform: {
      afFieldInput: {
        type: 'textarea',
        rows: 6
      }
    }
  },
  'rawat.$.diagnosa': {
    type: String,
    optional: true,
    autoform: {
      afFieldInput: {
        type: 'textarea',
        rows: 6
      }
    }
  },
  'rawat.$.planning': {
    type: String,
    optional: true,
    autoform: {
      afFieldInput: {
        type: 'textarea',
        rows: 6
      }
    }
  },
  'rawat.$.tindakan': {
    type: [new SimpleSchema(schema.tindakan)],
    optional: true
  },
  'rawat.$.labor': {
    type: [new SimpleSchema(schema.labor)],
    optional: true
  },
  'rawat.$.radio': {
    type: [new SimpleSchema(schema.radio)],
    optional: true
  },
  'rawat.$.obat': {
    type: [new SimpleSchema(schema.obat)],
    optional: true
  },
  'rawat.$.total': {
    type: Object,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.total.tindakan': {
    type: Number,
    optional: true
  },
  'rawat.$.total.labor': {
    type: Number,
    optional: true
  },
  'rawat.$.total.radio': {
    type: Number,
    optional: true
  },
  'rawat.$.total.obat': {
    type: Number,
    optional: true
  },
  'rawat.$.total.semua': {
    type: Number,
    optional: true
  },
  'rawat.$.spm': {
    type: Number,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  'rawat.$.pindah': {
    type: Number,
    optional: true,
    autoform: {
      options: selects.klinik
    }
  },
  'rawat.$.keluar': {
    type: Number,
    optional: true,
    autoform: {
      options: selects.keluar
    }
  },
  'rawat.$.petugas': {
    type: String,
    autoform: {
      type: 'hidden'
    }
  }
};
schema.jalan = _.assign({}, schema.rawat, {});
schema.inap = _.assign({}, schema.rawat, {});
schema.igd = _.assign({}, schema.rawat, {});
schema.gudang = {
  idbarang: {
    type: String,
    autoform: {
      type: 'hidden'
    },
    autoValue: function(){
      return randomId();
    }
  },
  jenis: {
    type: Number,
    autoform: {
      options: selects.barang
    }
  },
  nama: {
    type: String
  }
};
schema.farmasi = _.assign({}, schema.gudang, {
  kandungan: {
    type: String
  },
  satuan: {
    type: Number,
    autoform: {
      options: selects.satuan
    }
  },
  batch: {
    type: Array
  },
  'batch.$': {
    type: Object
  },
  'batch.$.idbatch': {
    type: String,
    autoform: {
      type: 'hidden'
    },
    autoValue: function(){
      return randomId();
    }
  },
  'batch.$.nobatch': {
    type: String
  },
  'batch.$.merek': {
    type: String
  },
  'batch.$.masuk': {
    type: Date,
    autoform: {
      type: 'pickadate',
      pickadateOptions: {
        selectYears: 150,
        selectMonths: true
      }
    }
  },
  'batch.$.kadaluarsa': {
    type: Date,
    autoform: {
      type: 'pickadate',
      pickadateOptions: {
        selectYears: 150,
        selectMonths: true
      }
    }
  },
  'batch.$.digudang': {
    type: Number
  },
  'batch.$.diapotik': {
    type: Number
  },
  'batch.$.diretur': {
    type: Boolean,
    optional: true,
    autoform: {
      type: 'hidden'
    }
  },
  'batch.$.beli': {
    type: Number,
    decimal: true
  },
  'batch.$.jual': {
    type: Number,
    decimal: true
  },
  'batch.$.suplier': {
    type: String
  },
  'batch.$.returnable': {
    type: Boolean,
    optional: true
  },
  'batch.$.anggaran': {
    type: Number,
    autoform: {
      options: selects.anggaran
    }
  },
  'batch.$.pengadaan': {
    type: Number
  }
});
schema.amprah = _.assign({}, schema.gudang, {
  amprah: {
    type: Array
  },
  'amprah.$': {
    type: Object
  },
  'amprah.$.diminta': {
    type: Number
  }
});
schema.logistik = _.assign({}, schema.gudang, {});
schema.dokter = {
  nama: {
    type: String
  },
  tipe: {
    type: Number,
    autoform: {
      options: selects.tipe_dokter
    }
  },
  poli: {
    type: Number,
    autoform: {
      options: selects.klinik
    }
  }
};
schema.tarif = {
  jenis: {
    type: String
  },
  nama: {
    type: String
  },
  harga: {
    type: Number
  },
  grup: {
    type: String,
    optional: true
  }
};
_.map(['dokter', 'tarif'], function(i){
  return _.assign(schema[i], {
    active: {
      type: Boolean,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return true;
      }
    }
  });
});
_.map(['pasien', 'gudang', 'dokter', 'tarif'], function(i){
  var arr;
  coll[i] = new Meteor.Collection(i);
  arr = ['insert', 'update', 'remove'];
  return coll[i].allow(_.zipObject(arr, _.map(arr, function(i){
    return function(){
      return true;
    };
  })));
});
_.map([modules[0], modules[1], modules[2], modules[3], modules[4], modules[5], modules[6], modules[7], modules[8], modules[9]], function(i){
  return Router.route("/" + i.name + "/:no_mr?", {
    name: i.name,
    action: function(){
      return this.render('pasien');
    },
    waitOn: function(){
      return _.map(['dokter', 'tarif', 'gudang'], function(j){
        return Meteor.subscribe('coll', j, {}, {});
      });
    }
  });
});
_.map([modules[10], modules[11]], function(i){
  return Router.route("/" + i.name + "/:idbarang?", {
    name: i.name,
    action: function(){
      return this.render('gudang');
    },
    waitOn: function(){
      return Meteor.subscribe('users', {}, {
        fields: {
          username: 1
        }
      });
    }
  });
});
_.map(['panduan'], function(i){
  return Router.route("/" + i, {
    action: function(){
      return this.render(i);
    }
  });
});
Router.route('/manajemen', {
  action: function(){
    return this.render('manajemen');
  },
  waitOn: function(){
    return [Meteor.subscribe('users', {}, {}), Meteor.subscribe('coll', 'dokter', {}, {}), Meteor.subscribe('coll', 'tarif', {}, {})];
  }
});
Router.route('/login', function(){
  return {
    action: function(){
      return this.render('login');
    }
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"client.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client.ls.js                                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var globalHelpers, slice$ = [].slice;
if (Meteor.isClient) {
  Router.onBeforeAction(function(){
    if (!Meteor.userId()) {
      return this.render('login');
    } else {
      return this.next();
    }
  });
  Router.onAfterAction(function(){
    if (!in$(currentRoute(), _.uniq(_.flatMap(roles(), function(i, j){
      var this$ = this;
      return function(it){
        return it.list;
      }(_.find(rights, function(k){
        return k.group === j;
      }));
    })))) {
      return sessNull() && Router.go('/');
    }
  });
  globalHelpers = {
    coll: function(){
      return coll;
    },
    schema: function(){
      return new SimpleSchema(schema[currentRoute()]);
    },
    zeros: function(num){
      return zeros(num);
    },
    showForm: function(){
      return Session.get('showForm');
    },
    hari: function(date){
      return date && moment(date).format('D MMM YYYY');
    },
    rupiah: function(val){
      return 'Rp ' + numeral(val).format('0,0');
    },
    currentRoute: function(name){
      if (!name) {
        return currentRoute();
      } else {
        return currentRoute() === name;
      }
    },
    currentPar: function(param){
      return currentPar(param);
    },
    stringify: function(obj){
      return JSON.stringify(obj);
    },
    startCase: function(val){
      return _.startCase(val);
    },
    modules: function(){
      return modules;
    },
    reverse: function(arr){
      return _.reverse(arr);
    },
    sortBy: function(arr, sel, sort){
      return _.sortBy(arr, function(it){
        return -it.tanggal.getTime();
      });
    },
    isTrue: function(a, b){
      return a === b;
    },
    isFalse: function(a, b){
      return a !== b;
    },
    look: function(option, value, field){
      var ref$;
      return (ref$ = look(option, value)) != null ? ref$[field] : void 8;
    },
    look2: function(option, value, field){
      var ref$;
      return (ref$ = look2(option, value)) != null ? ref$[field] : void 8;
    },
    userGroup: function(name){
      return userGroup(name);
    },
    userRole: function(name){
      return userRole(name);
    },
    userName: function(id){
      return _.startCase(userName(id));
    }
  };
  _.map(globalHelpers, function(val, key){
    return Template.registerHelper(key, val);
  });
  Template.body.events({
    'keypress #search': function(event){
      var term;
      if (event.key === 'Enter') {
        term = event.target.value;
        if (term.length > 2) {
          return Session.set('search', term);
        }
      }
    }
  });
  Template.layout.onRendered(function(){
    Session.set('limit', 10);
    return Session.set('page', 0);
  });
  Template.menu.helpers({
    menus: function(){
      return _.flatMap(roles(), function(i, j){
        var find;
        find = _.find(rights, function(k){
          return k.group === j;
        });
        return _.initial(_.map(find.list, function(k){
          return _.find(modules, function(l){
            return l.name === k;
          });
        }));
      });
    },
    navTitle: function(){
      var find;
      find = _.find(modules, function(i){
        return i.name === currentRoute();
      });
      return (find != null ? find.full : void 8) || _.startCase(currentRoute());
    },
    today: function(){
      return moment().format('LLL');
    }
  });
  Template.menu.events({
    'click #logout': function(){
      return Meteor.logout();
    }
  });
  Template.pasien.helpers({
    heads: function(){
      return {
        pasien: ['no_mr', 'nama', 'orang_tua', 'alamat', 'jenis_kelamin', 'tgl_lahir'],
        bayar: ['no_mr', 'nama', 'tanggal', 'total_biaya', 'cara_bayar', 'klinik', 'aksi'],
        labor: ['no_mr', 'pasien', 'grup', 'order', 'aksi'],
        radio: ['no_mr', 'pasien', 'order', 'aksi'],
        obat: ['tanggal', 'no_mr', 'pasien', 'dokter', 'klinik', 'nama_obat', 'aturan', 'jumlah', 'serah'],
        rawat: ['tanggal', 'klinik', 'cara_bayar', 'bayar_pendaftaran', 'bayar_tindakan', 'cek'],
        fisik: ['tekanan_darah', 'nadi', 'suhu', 'pernapasan', 'berat', 'tinggi', 'lila'],
        previewDokter: ['Tindakan', 'Dokter', 'Harga'],
        previewLabor: ['Grup', 'Order', 'Hasil'],
        previewRadio: ['Order', 'Arsip'],
        previewObat: ['Nama', 'Dosis', 'Bentuk', 'Kali', 'Jumlah']
      };
    },
    formType: function(){
      if (currentRoute() === 'regis') {
        if (currentPar('no_mr')) {
          return 'update';
        } else {
          return 'insert';
        }
      } else {
        return 'update-pushArray';
      }
    },
    umur: function(date){
      return moment().diff(date, 'years') + ' tahun';
    },
    showButton: function(){
      return Router.current().params.no_mr || currentRoute() === 'regis';
    },
    showButtonText: function(){
      switch (currentRoute()) {
      case 'regis':
        return '+ Pasien';
      case 'jalan':
        return '+ Rawat';
      }
    },
    formDoc: function(){
      return formDoc();
    },
    preview: function(){
      return Session.get('preview');
    },
    omitFields: function(){
      var arr, ref$, ref1$;
      arr = ['anamesa_perawat', 'fisik', 'anamesa_dokter', 'diagnosa', 'planning', 'tindakan', 'labor', 'radio', 'obat', 'spm', 'keluar', 'pindah'];
      if (!((ref$ = formDoc()) != null && ref$.billRegis)) {
        return arr;
      } else if ((ref1$ = _.first(_.split(Meteor.user().username, '.'))) !== 'dr' && ref1$ !== 'drg') {
        return slice$.call(arr, 2, arr.length + 1 || 9e9);
      }
    },
    roleFilter: function(arr){
      return _.reverse(_.filter(arr, function(i){
        var this$ = this;
        return i.klinik === function(it){
          return it.value;
        }(_.find(selects.klinik, function(j){
          return j.label === _.startCase(roles().jalan[0]);
        }));
      }));
    },
    userPoli: function(){
      return roles().jalan;
    },
    insurance: function(val){
      return 'Rp ' + numeral(val + 30000).format('0,0');
    },
    selPol: function(){
      var ref$;
      return _.map((ref$ = roles()) != null ? ref$.jalan : void 8, function(i){
        return _.find(selects.klinik, function(j){
          return i === _.snakeCase(j.label);
        });
      });
    },
    pasiens: function(){
      var selector, options, arr, byName, byNoMR, ref$, kliniks, ref1$, elem, selSub;
      if (currentPar('no_mr')) {
        selector = {
          no_mr: parseInt(currentPar('no_mr'))
        };
        options = {
          fields: {
            no_mr: 1,
            regis: 1
          }
        };
        arr = ['bayar', 'jalan', 'labor', 'radio', 'obat'];
        if (in$(currentRoute(), arr)) {
          options.fields.rawat = 1;
        }
        return Meteor.subscribe('coll', 'pasien', selector, options).ready() && coll.pasien.findOne();
      } else if (search()) {
        byName = {
          'regis.nama_lengkap': {
            $options: '-i',
            $regex: '.*' + search() + '.*'
          }
        };
        byNoMR = {
          no_mr: parseInt(search())
        };
        selector = {
          $or: [byName, byNoMR],
          no_mr: {
            $ne: NaN
          }
        };
        options = {
          fields: {
            no_mr: 1,
            regis: 1
          }
        };
        return Meteor.subscribe('coll', 'pasien', selector, options).ready() && coll.pasien.find().fetch();
      } else if ((ref$ = roles()) != null && ref$.jalan) {
        kliniks = _.map(roles().jalan, function(i){
          var this$ = this;
          return function(it){
            return it.value;
          }(_.find(selects.klinik, function(j){
            return i === _.snakeCase(j.label);
          }));
        });
        selector = {
          rawat: {
            $elemMatch: {
              klinik: {
                $in: kliniks
              },
              tanggal: {
                $gt: new Date(new Date().getDate() - 2)
              }
            }
          }
        };
        return Meteor.subscribe('coll', 'pasien', selector, {}).ready() && function(){
          var filter;
          filter = _.filter(coll.pasien.find().fetch(), function(i){
            var a, b, selPol, c;
            a = function(){
              return in$(i.rawat[i.rawat.length - 1].klinik, kliniks);
            };
            b = function(){
              return !i.rawat[i.rawat.length - 1].total.semua;
            };
            selPol = Session.get('selPol');
            c = function(){
              return i.rawat[i.rawat.length - 1].klinik === selPol;
            };
            if (selPol) {
              return b() && c();
            } else {
              return a() && b();
            }
          });
          return _.sortBy(filter, function(i){
            return i.rawat[i.rawat.length - 1].tanggal;
          });
        }();
      } else if (currentRoute() === 'bayar') {
        selector = {
          rawat: {
            $elemMatch: {
              $or: [{
                'status_bayar': {
                  $ne: true
                }
              }]
            }
          }
        };
        return Meteor.subscribe('coll', 'pasien', selector, {}).ready() && coll.pasien.find().fetch();
      } else if ((ref1$ = currentRoute()) === 'labor' || ref1$ === 'radio' || ref1$ === 'obat') {
        elem = {
          'status_bayar': true
        };
        elem[currentRoute()] = {
          $exists: true,
          $elemMatch: {
            hasil: {
              $exists: false
            }
          }
        };
        selSub = {
          rawat: {
            $elemMatch: elem
          }
        };
        return Meteor.subscribe('coll', 'pasien', selSub, {}).ready() && coll.pasien.find().fetch();
      }
    }
  });
  Template.pasien.events({
    'click #showForm': function(){
      var later;
      if (!(userGroup('jalan') && !Session.get('formDoc'))) {
        Session.set('showForm', !Session.get('showForm'));
        if (userGroup('regis')) {
          Session.set('formDoc', null);
        }
        Meteor.subscribe('coll', 'gudang', {}, {});
        Session.set('begin', new Date());
        return partialize$.apply(Meteor, [Meteor.setTimeout, [void 8, 1000], [0]])(later = function(){
          var list, arr;
          $('.autoform-remove-item').trigger('click');
          if (currentRoute() === 'jalan') {
            _.map(['cara_bayar', 'klinik', 'karcis', 'rujukan'], function(i){
              $('div[data-schema-key="' + i + '"]').prepend(tag('p', _.startCase(i)));
              if (formDoc()) {
                $('input[name="' + i + '"][value="' + formDoc()[i] + '"]').attr({
                  checked: true
                });
                return $('input[name="' + i + '"]').attr({
                  disabled: 'disabled'
                });
              }
            });
            _.map(['anamesa_perawat'], function(i){
              var ref$;
              return $('textarea[name="' + i + '"]').val((ref$ = formDoc()) != null ? ref$[i] : void 8);
            });
          }
          list = ['cara_bayar', 'kelamin', 'agama', 'nikah', 'pendidikan', 'darah', 'pekerjaan'];
          if (currentRoute() === 'regis') {
            _.map(list, function(i){
              return $('div[data-schema-key="regis.' + i + '"]').prepend(tag('p', _.startCase(i)));
            });
            arr = _.compact(_.map(schema.regis, function(i, j){
              var this$ = this;
              return function(it){
                return it[1];
              }(_.split(j, '.'));
            }));
            _.map(arr, function(i){
              return $('[name="regis.' + i + '"]').parents('div.row').removeClass('row').addClass('col m6');
            });
            return $('.card-content').addClass('row');
          }
        });
      }
    },
    'dblclick #row': function(){
      return Router.go('/' + currentRoute() + '/' + this.no_mr);
    },
    'click #close': function(){
      sessNull();
      return Router.go(currentRoute());
    },
    'click #card': function(){
      var dialog;
      dialog = {
        title: 'Cetak Kartu',
        message: 'Yakin untuk cetak kartu ini?'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return makePdf.card();
        }
      });
    },
    'click #consent': function(){
      var dialog;
      dialog = {
        title: 'General Consent',
        message: 'Yakin untuk dicetak?'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return makePdf.consent();
        }
      });
    },
    'dblclick #bill': function(event){
      var nodes, dialog;
      nodes = _.map(['pasien', 'idbayar', 'karcis'], function(i){
        return event.target.attributes[i].nodeValue;
      });
      dialog = {
        title: 'Pembayaran Pendaftaran',
        message: 'Apakah yakin pasien sudah membayar?'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          if (nodes[1]) {
            Meteor.call.apply(Meteor, ['billRegis'].concat([nodes[0], nodes[1]], [true]));
            return makePdf.payRegCard.apply(makePdf, [nodes[0], nodes[1], nodes[2]].concat(['...']));
          } else {
            Meteor.call('billCard', nodes[0], false);
            return makePdf.payRegCard(10000, 'Sepuluh Ribu Rupiah');
          }
        }
      });
    },
    'dblclick #bayar': function(event){
      var nodes, dialog;
      nodes = _.map(['pasien', 'idbayar'], function(i){
        return event.target.attributes[i].nodeValue;
      });
      dialog = {
        title: 'Konfirmasi Pembayaran',
        message: 'Apakah yakin tagihan ini sudah dibayar?'
      };
      return new Confirmation(dialog, function(ok){
        var pasien, doc;
        if (ok) {
          Meteor.call.apply(Meteor, ['bayar'].concat(slice$.call(nodes)));
          pasien = coll.pasien.findOne({
            no_mr: parseInt(nodes[1])
          });
          doc = _.find(pasien.rawat, function(i){
            return i.idbayar === nodes[1];
          });
          return makePdf.payRawat(nodes[0], doc);
        }
      });
    },
    'dblclick #request': function(event){
      var nodes;
      nodes = _.map(['pasien', 'idbayar', 'jenis', 'idjenis'], function(i){
        return event.target.attributes[i].nodeValue;
      });
      return MaterializeModal.prompt({
        message: 'Isikan data requestnya',
        callback: function(err, res){
          var params;
          if (res.submit) {
            params = ['request'].concat(slice$.call(nodes), [res.value]);
            return Meteor.call.apply(Meteor, slice$.call(params).concat([function(err, res){
              var rekap, flat, this$ = this;
              if (res) {
                MaterializeModal.message({
                  title: 'Penyerahan Obat',
                  message: function(it){
                    return it.join('');
                  }(_.map(res, function(val, key){
                    return tag('p', key + ": " + val);
                  }))
                });
                rekap = Session.get('rekap') || [];
                flat = _.flatten(_.toPairs(res));
                return Session.set('rekap', slice$.call(rekap).concat([slice$.call(nodes).concat(slice$.call(flat))]));
              }
            }]));
          }
        }
      });
    },
    'dblclick #rekap': function(){
      var headers;
      headers = ['psaien', 'id_bayar', 'jenis', 'id_request', 'no_batch', 'jumlah'];
      makePdf.rekap([headers].concat(slice$.call(Session.get('rekap'))));
      return Session.set('rekap', null);
    },
    'click .modal-trigger': function(event){
      if (this.idbayar) {
        Session.set('formDoc', this);
        Session.set('preview', modForm(this, this.idbayar));
      }
      return $('#preview').modal('open');
    },
    'click #rmRawat': function(){
      var self, dialog;
      self = this;
      dialog = {
        title: 'Konfirmasi Hapus',
        message: 'Apakah yakin hapus data rawat pasien ini?'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return Meteor.call('rmRawat', currentPar('no_mr'), self.idbayar);
        }
      });
    },
    'change #selPol': function(event){
      return Session.set('selPol', parseInt(event.target.id));
    },
    'click #rmPasien': function(){
      var dialog;
      dialog = {
        title: 'Hapus Pasien',
        message: 'Apakah yakin untuk menghapus pasien?'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          Meteor.call('rmPasien', currentPar('no_mr'));
          return Router.go('/' + currentRoute());
        }
      });
    }
  });
  Template['import'].events({
    'change :file': function(event, template){
      return Papa.parse(event.target.files[0], {
        header: true,
        step: function(result){
          var data, selector, modifier;
          data = result.data[0];
          if (currentRoute() === 'regis') {
            selector = {
              no_mr: parseInt(data.no_mr)
            };
            modifier = {
              regis: {
                nama_lengkap: _.startCase(data.nama_lengkap),
                alamat: data.alamat ? _.startCase(data.alamat) : void 8,
                agama: data.agama ? parseInt(data.agama) : void 8,
                ayah: data.ayah ? _.startCase(data.ayah) : void 8,
                nikah: data.nikah ? parseInt(data.nikah) : void 8,
                pekerjaan: data.pekerjaan ? parseInt(data.pekerjaan) : void 8,
                pendidikan: data.pendidikan ? parseInt(data.pendidikan) : void 8,
                tgl_lahir: Date.parse(data.tgl_lahir) ? new Date(data.tgl_lahir) : void 8,
                tmpt_kelahiran: data.tmpt_kelahiran ? _.startCase(data.tmpt_kelahiran) : void 8
              }
            };
            return Meteor.call('import', 'pasien', selector, modifier);
          } else if (currentRoute() === 'manajemen') {
            if (data.tipe) {
              selector = {
                nama: data.nama
              };
              modifier = {
                tipe: parseInt(data.tipe),
                poli: parseInt(data.poli),
                active: true
              };
              return Meteor.call('import', 'dokter', selector, modifier);
            } else if (data.harga) {
              selector = {
                nama: _.snakeCase(data.nama)
              };
              modifier = {
                harga: parseInt(data.harga),
                jenis: _.snakeCase(data.jenis),
                active: true
              };
              data.grup && (modifier.grup = _.startCase(data.grup));
              return Meteor.call('import', 'tarif', selector, modifier);
            } else if (data.password) {
              Meteor.call('newUser', data);
              return Meteor.call('addRole', data.username, [data.role], data.group);
            }
          } else if (currentRoute() === 'farmasi') {
            selector = {
              nama: data.nama
            };
            modifier = {
              jenis: parseInt(data.jenis),
              idbarang: randomId(),
              batch: [{
                idbatch: randomId(),
                anggaran: data.anggaran,
                beli: parseInt(data.beli),
                diapotik: parseInt(data.diapotik),
                digudang: parseInt(data.digudang),
                jenis: parseInt(data.jenis),
                jual: parseInt(data.jual),
                kadaluarsa: new Date(data.kadaluarsa),
                masuk: new Date(data.masuk),
                merek: data.merek || '',
                nobatch: data.nobatch,
                pengadaan: parseInt(data.pengadaan),
                satuan: parseInt(data.satuan),
                suplier: data.suplier
              }]
            };
            return data.nama && Meteor.call('import', 'gudang', selector, modifier, 'batch');
          }
        }
      });
    }
  });
  Template['export'].onRendered(function(){
    return $('select#export').material_select();
  });
  Template['export'].events({
    'click #export': function(){
      var select;
      select = $('select#export').val();
      return Meteor.call('export', select, function(err, content){
        var blob;
        if (content) {
          blob = new Blob([content], {
            type: 'text/plain;charset=utf-8'
          });
          return saveAs(blob, '#select.csv');
        }
      });
    }
  });
  Template.gudang.helpers({
    heads: function(){
      return {
        barang: ['jenis_barang', 'nama_barang', 'stok_gudang', 'stok_diapotik'],
        batch: ['no_batch', 'masuk', 'kadaluarsa', 'beli', 'jual', 'di_gudang', 'di_apotik', 'suplier'],
        amprah: ['ruangan', 'peminta', 'meminta', 'penyerah', 'menyerahkan', 'tanggal'],
        latestAmprah: ['nama', 'ruangan', 'peminta', 'diminta', 'tanggal']
      };
    },
    formType: function(){
      if (currentPar('idbarang')) {
        return 'update-pushArray';
      } else {
        return 'insert';
      }
    },
    warning: function(date){
      switch (false) {
      case !(monthDiff(date) < 2):
        return 'red';
      case !(monthDiff(date) < 7):
        return 'orange';
      case !(monthDiff(date) < 13):
        return 'yellow';
      default:
        return 'green';
      }
    },
    gudangs: function(){
      var aggr, selector, byName, byBatch;
      aggr = function(i){
        return _.map(i, function(j){
          var reduced;
          reduced = function(name){
            return _.reduce(j.batch, function(sum, n){
              return sum + n[name];
            }, 0);
          };
          return _.assign(j, {
            akumulasi: {
              digudang: reduced('digudang'),
              diapotik: reduced('diapotik')
            }
          });
        });
      };
      if (currentPar('idbarang')) {
        selector = {
          idbarang: currentPar('idbarang')
        };
        return Meteor.subscribe('coll', 'gudang', selector, {}).ready() && coll.gudang.findOne();
      } else if (search()) {
        byName = {
          nama: {
            $options: '-i',
            $regex: '.*' + search() + '.*'
          }
        };
        byBatch = {
          idbatch: search()
        };
        selector = {
          $or: [byName, byBatch]
        };
        return Meteor.subscribe('coll', 'gudang', selector, {}).ready() && aggr(coll.gudang.find().fetch());
      } else {
        return Meteor.subscribe('coll', 'gudang', {}, {}).ready() && aggr(coll.gudang.find().fetch());
      }
    },
    nearEds: function(){
      return Session.get('nearEds');
    },
    addAmprah: function(){
      return Session.get('addAmprah');
    },
    schemaAmprah: function(){
      return new SimpleSchema(schema.amprah);
    },
    latestAmprah: function(){
      return Session.get('latestAmprah');
    }
  });
  Template.gudang.events({
    'click #showForm': function(){
      return Session.set('showForm', !Session.get('showForm'));
    },
    'dblclick #row': function(){
      return Router.go('/' + currentRoute() + '/' + this.idbarang);
    },
    'dblclick #transfer': function(){
      var self;
      self = this;
      if (roles().farmasi) {
        return MaterializeModal.prompt({
          message: 'Transfer Gudang > Apotek',
          callback: function(err, res){
            if (res.submit) {
              return Meteor.call('transfer', currentPar('idbarang'), self.idbatch, parseInt(res.value));
            }
          }
        });
      }
    },
    'click #rmBarang': function(){
      var self, dialog;
      self = this;
      dialog = {
        title: 'Hapus Jenis Obat',
        message: 'Apakah yakin untuk hapus jenis obat ini dari sistem?'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return Meteor.call('rmBarang', self.idbarang);
        }
      });
    },
    'click #rmBatch': function(){
      var self, dialog;
      self = this;
      dialog = {
        title: 'Yakin?',
        message: 'Hapus 1 batch ini'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return Meteor.call('rmBatch', currentPar('idbarang'), self.idbatch);
        }
      });
    },
    'click #nearEds': function(){
      var returnable;
      Session.set('nearEds', null);
      returnable = $('#returnable').is(':checked');
      return Meteor.call('nearEds', returnable, function(err, res){
        if (res) {
          return Session.set('nearEds', res);
        }
      });
    },
    'click #latestAmprah': function(){
      return Meteor.call('latestAmprah', function(err, res){
        if (res) {
          return Session.set('latestAmprah', res);
        }
      });
    },
    'dblclick #nearEd': function(){
      var self, dialog;
      self = this;
      dialog = {
        title: 'Karantina?',
        message: 'Pindahkan ke karantina'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return Meteor.call('returBatch', self);
        }
      });
    },
    'click #addAmprah': function(){
      if (!userGroup('farmasi')) {
        return Session.set('addAmprah', !Session.get('addAmprah'));
      }
    },
    'dblclick #amprah': function(){
      var self;
      if (userGroup('farmasi') && !this.diserah) {
        self = this;
        return MaterializeModal.prompt({
          message: 'Jumlah diserahkan',
          callback: function(err, res){
            if (res.submit) {
              return Meteor.call('amprah', currentPar('idbarang'), self.idamprah, parseInt(res.value), function(err, res){
                return res && Meteor.call('transfer', currentPar('idbarang'), false, parseInt(res.value));
              });
            }
          }
        });
      }
    }
  });
  Template.manajemen.helpers({
    users: function(){
      return Meteor.users.find().fetch();
    },
    onUser: function(){
      return Session.get('onUser');
    },
    selRoles: function(){
      return ['petugas', 'admin'];
    },
    klinik: function(){
      return selects.klinik;
    },
    schemadokter: function(){
      return new SimpleSchema(schema.dokter);
    },
    schematarif: function(){
      return new SimpleSchema(schema.tarif);
    },
    dokters: function(){
      var selector, options;
      selector = {
        active: true
      };
      options = {
        limit: limit(),
        skip: page() * limit()
      };
      return coll.dokter.find(selector, options).fetch();
    },
    tarifs: function(){
      var selector, options;
      selector = {
        active: true
      };
      options = {
        limit: limit(),
        skip: page() * limit()
      };
      return coll.tarif.find(selector, options).fetch();
    }
  });
  Template.manajemen.events({
    'submit #userForm': function(event){
      var onUser, doc, repeat, role, group, poli, theRole;
      event.preventDefault();
      onUser = Session.get('onUser');
      if (!onUser) {
        doc = {
          username: event.target.children.username.value,
          password: event.target.children.password.value
        };
        repeat = event.target.children.repeat.value;
        if (doc.password === repeat) {
          Meteor.call('newUser', doc);
          return $('input').val('');
        } else {
          return Materialize.toast('Password tidak mirip', 3000);
        }
      } else {
        role = $('input[name="role"]:checked', event.target)[0].id;
        group = $('input[name="group"]:checked', event.target)[0].id;
        poli = $('input[name="poli"]:checked', event.target)[0];
        theRole = !poli
          ? role
          : _.snakeCase(poli.id);
        return Meteor.call('addRole', onUser._id, [theRole], group);
      }
    },
    'dblclick #row': function(){
      return Session.set('onUser', this);
    },
    'dblclick #reset': function(){
      var self, dialog;
      self = this;
      dialog = {
        title: 'Reset Peranan',
        message: 'Anda yakin untuk menghapus semua perannya?'
      };
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return Meteor.call('rmRole', self._id);
        }
      });
    },
    'click #close': function(){
      return sessNull();
    },
    'dblclick #baris': function(event){
      var jenis, dialog, self;
      jenis = event.currentTarget.className;
      dialog = {
        title: 'Hapus ' + _.startCase(jenis),
        message: "Yakin untuk menghapus " + jenis + " dari daftar?"
      };
      self = this;
      return new Confirmation(dialog, function(ok){
        if (ok) {
          return Meteor.call('inactive', jenis, self._id);
        }
      });
    }
  });
  Template.login.onRendered(function(){
    return $('.slider').slider();
  });
  Template.login.events({
    'submit form': function(event){
      var username, password;
      event.preventDefault();
      username = event.target.children.username.value;
      password = event.target.children.password.value;
      return Meteor.loginWithPassword(username, password, function(err){
        if (err) {
          return Materialize.toast('Salah username / password', 3000);
        } else {
          return Router.go('/' + _.keys(roles())[0]);
        }
      });
    }
  });
  Template.pagination.helpers({
    pagins: function(name){
      var limit, length, end, i$, results$ = [];
      limit = Session.get('limit');
      length = coll[name].find().fetch().length;
      end = (length - length % limit) / limit;
      for (i$ = 1; i$ <= end; ++i$) {
        results$.push(i$);
      }
      return results$;
    }
  });
  Template.pagination.events({
    'click #next': function(){
      return Session.set('page', 1 + page());
    },
    'click #prev': function(){
      return Session.set('page', -1 + page());
    },
    'click #num': function(event){
      return Session.set('page', parseInt(event.target.innerText));
    }
  });
  Template.report.helpers({
    datas: function(){
      return Session.get('laporan');
    }
  });
  Template.report.events({
    'click .datepicker': function(event, template){
      var type;
      type = event.target.attributes.date.nodeValue;
      return $('#' + type).pickadate({
        onSet: function(data){
          var start, end;
          Session.set(type + 'Date', data.select);
          start = Session.get('startDate');
          end = Session.get('endDate');
          if (start && end) {
            return Meteor.call('report', template.data.jenis, start, end, function(err, res){
              return res && Session.set('laporan', res);
            });
          }
        }
      });
    },
    'click #export': function(event, template){
      var content, blob;
      content = exportcsv.exportToCSV(Session.get('laporan').csv, true, ';');
      blob = new Blob([content], {
        type: 'text/plain;charset=utf-8'
      });
      return saveAs(blob, template.data.jenis + '.csv');
    }
  });
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function partialize$(f, args, where){
  var context = this;
  return function(){
    var params = slice$.call(arguments), i,
        len = params.length, wlen = where.length,
        ta = args ? args.concat() : [], tw = where ? where.concat() : [];
    for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
    return len < wlen && len ?
      partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"server.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// server.ls.js                                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
if (Meteor.isServer) {
  Meteor.startup(function(){
    return coll.pasien._ensureIndex({
      'regis.nama_lengkap': 1
    });
  });
  Meteor.publish('coll', function(name, selector, options){
    return coll[name].find(selector, options);
  });
  Meteor.publish('users', function(selector, options){
    return Meteor.users.find(selector, options);
  });
  Meteor.methods({
    'import': function(name, selector, modifier, arrName){
      var find, sel, obj, ref$;
      if (!arrName) {
        return coll[name].insert(_.assign(selector, modifier));
      } else {
        find = coll[name].findOne(selector);
        if (!find) {
          return coll[name].insert(_.assign(selector, modifier));
        } else {
          sel = {
            _id: find._id
          };
          obj = (ref$ = {}, ref$[arrName + ""] = modifier[arrName][0], ref$);
          return coll[name].update(sel, {
            $push: obj
          });
        }
      }
    },
    'export': function(jenis){
      var arr;
      if (jenis === 'regis') {
        arr = _.map(coll.pasien.find().fetch(), function(i){
          return {
            no_mr: i.no_mr,
            nama_lengkap: i.regis.nama_lengkap
          };
        });
      } else if (jenis === 'jalan') {
        arr = _.flatMap(coll.pasien.find().fetch(), function(i){
          if (i.rawat) {
            return _.map(i.rawat, function(j){
              return {
                no_mr: i.no_mr,
                nama_lengkap: i.regis.nama_lengkap,
                idbayar: j.idbayar,
                cara_bayar: look('cara_bayar', j.cara_bayar).label,
                klinik: find('klinik', j.klinik)
              };
            });
          }
        });
      } else if (jenis === 'farmasi') {
        arr = _.flatMap(coll.gudang.find().fetch(), function(i){
          return _.map(i.batch, function(j){
            var head, body;
            head = ['jenis', 'nama'];
            head = _.zipObject(head, _.map(head, function(k){
              return i[k];
            }));
            body = ['nobatch', 'merek', 'satuan', 'masuk', 'kadaluarsa', 'digudang', 'diapotik', 'beli', 'jual', 'suplier', 'anggaran', 'pengadaan'];
            body = _.zipObject(body, _.map(body, function(k){
              return j[k];
            }));
            return _.assign(head, body);
          });
        });
      }
      return exportcsv.exportToCSV(arr, true, ';');
    },
    billCard: function(no_mr, state){
      var selector, modifier;
      selector = {
        no_mr: parseInt(no_mr)
      };
      modifier = {
        $set: {
          'regis.billCard': state
        }
      };
      return coll.pasien.update(selector, modifier);
    },
    billRegis: function(no_mr, idbayar, state){
      var selector, modifier;
      selector = {
        'rawat.idbayar': idbayar,
        no_mr: parseInt(no_mr)
      };
      modifier = {
        $set: {
          'rawat.$.billRegis': state
        }
      };
      return coll.pasien.update(selector, modifier);
    },
    bayar: function(no_mr, idbayar){
      var selector, modifier;
      selector = {
        'rawat.idbayar': idbayar,
        no_mr: parseInt(no_mr)
      };
      modifier = {
        'rawat.$.status_bayar': true
      };
      return coll.pasien.update(selector, {
        $set: modifier
      });
    },
    request: function(no_mr, idbayar, jenis, idjenis, hasil){
      var selector, findPasien, i$, ref$, len$, i, j$, ref1$, len1$, j, modifier, give, findStock, k$, ref2$, len2$, k, filtered, sortedIn, sortedEd, key;
      selector = {
        no_mr: parseInt(no_mr)
      };
      findPasien = coll.pasien.findOne(selector);
      for (i$ = 0, len$ = (ref$ = findPasien.rawat).length; i$ < len$; ++i$) {
        i = ref$[i$];
        if (i.idbayar === idbayar) {
          if (i[jenis]) {
            for (j$ = 0, len1$ = (ref1$ = i[jenis]).length; j$ < len1$; ++j$) {
              j = ref1$[j$];
              if (j["id" + jenis] === idjenis) {
                j.hasil = hasil;
              }
            }
          }
        }
      }
      modifier = {
        rawat: findPasien.rawat
      };
      coll.pasien.update(selector, {
        $set: modifier
      });
      give = {};
      if (jenis === 'obat') {
        for (i$ = 0, len$ = (ref$ = findPasien.rawat).length; i$ < len$; ++i$) {
          i = ref$[i$];
          if (i.idbayar === idbayar) {
            if (i.obat) {
              for (j$ = 0, len1$ = (ref1$ = i.obat).length; j$ < len1$; ++j$) {
                j = ref1$[j$];
                if (j.idobat === idjenis) {
                  findStock = coll.gudang.findOne({
                    _id: j.nama
                  });
                  for (k$ = 0, len2$ = (ref2$ = (fn$())).length; k$ < len2$; ++k$) {
                    k = ref2$[k$];
                    filtered = _.filter(findStock.batch, fn1$);
                    sortedIn = _.sortBy(filtered, fn2$);
                    sortedEd = _.sortBy(sortedIn, fn3$);
                    sortedEd[0].diapotik -= 1;
                    key = findStock.nama(+';' + sortedEd[0].nobatch);
                    give[key] || (give[key] = 0);
                    give[key] += 1;
                  }
                  selector = {
                    _id: findStock._id
                  };
                  modifier = {
                    $set: {
                      batch: findStock.batch
                    }
                  };
                  coll.gudang.update(selector, modifier);
                }
              }
            }
          }
        }
      }
      if (jenis === 'obat') {
        return give;
      }
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = j.jumlah; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
      function fn1$(l){
        return l.diapotik > 0;
      }
      function fn2$(l){
        return new Date(l.masuk).getTime();
      }
      function fn3$(l){
        return new Date(l.kadaluarsa).getTime();
      }
    },
    transfer: function(idbarang, idbatch, amount){
      var selector, modifier;
      selector = {
        idbarang: idbarang,
        'batch.idbatch': idbatch || function(){
          var filtered, this$ = this;
          filtered = _.filter(coll.gudang.findOne({
            idbarang: idbarang
          }).batch, function(i){
            var a, b;
            a = function(){
              return i.digudang > 0;
            };
            b = function(){
              return 0 < monthDiff(i.kadaluarsa);
            };
            return a() && b();
          });
          return function(it){
            return it[0].idbatch;
          }(_.sortBy(filtered, 'kadaluarsa'));
        }()
      };
      modifier = {
        $inc: {
          'batch.$.digudang': -amount,
          'batch.$.diapotik': amount
        }
      };
      return coll.gudang.update(selector, modifier);
    },
    rmPasien: function(no_mr){
      return coll.pasien.remove({
        no_mr: parseInt(no_mr)
      });
    },
    rmRawat: function(no_mr, idbayar){
      var selector, modifier;
      selector = {
        no_mr: parseInt(no_mr)
      };
      modifier = {
        $pull: {
          rawat: {
            idbayar: idbayar
          }
        }
      };
      return coll.pasien.update(selector, modifier);
    },
    addRole: function(id, roles, group, poli){
      return Roles.addUsersToRoles(id, poli || roles, group);
    },
    rmRole: function(id){
      var selector, modifier;
      selector = {
        _id: id
      };
      modifier = {
        $set: {
          roles: {}
        }
      };
      return Meteor.users.update(selector, modifier);
    },
    newUser: function(doc){
      var find;
      find = Accounts.findUserByUsername(doc.username);
      if (find) {
        Accounts.setUsername(find._id, doc.username);
        return Accounts.setPassword(find._id, doc.password);
      } else {
        return Accounts.createUser(doc);
      }
    },
    rmBarang: function(idbarang){
      return coll.gudang.remove({
        idbarang: idbarang
      });
    },
    rmBatch: function(idbarang, idbatch){
      var findStock, terbuang;
      findStock = coll.gudang.findOne({
        idbarang: idbarang
      });
      terbuang = _.without(findStock.batch, _.find(findStock.batch, function(i){
        return i.idbatch === idbatch;
      }));
      return coll.gudang.update({
        _id: findStock._id
      }, {
        $set: {
          batch: terbuang
        }
      });
    },
    inactive: function(name, id){
      var sel, mod;
      sel = {
        _id: id
      };
      mod = {
        $set: {
          active: false
        }
      };
      return coll[name].update(sel, mod);
    },
    pindah: function(no_mr){
      var find, ref$, last, selector, modifier;
      find = coll.pasien.findOne({
        no_mr: parseInt(no_mr)
      });
      ref$ = find.rawat, last = ref$[ref$.length - 1];
      if (last.pindah) {
        selector = {
          _id: find._id
        };
        modifier = {
          $push: {
            rawat: {
              idbayar: randomId(),
              tanggal: new Date(),
              cara_bayar: last.cara_bayar,
              klinik: last.pindah,
              billRegis: true,
              total: {
                semua: 0
              }
            }
          }
        };
        return coll.pasien.update(selector, modifier);
      }
    },
    report: function(jenis, start, end){
      var filter, docs;
      filter = function(arr){
        return _.filter(arr, function(i){
          var ref$;
          return new Date(start) < (ref$ = new Date(i.tanggal)) && ref$ < new Date(end);
        });
      };
      docs = _.flatMap(coll.pasien.find().fetch(), function(i){
        return _.map(filter(i.rawat), function(j){
          var obj;
          obj = {
            no_mr: i.no_mr,
            nama_lengkap: _.startCase(i.regis.nama_lengkap),
            tanggal: j.tanggal,
            no_bill: j.nobill,
            cara_bayar: look('cara_bayar', j.cara_bayar).label,
            rujukan: j.rujukan ? look('rujukan', j.rujukan).label : '',
            klinik: look('klinik', j.klinik).label,
            diagnosa: j.diagnosa || '-',
            tindakan: _.flatMap(['tindakan', 'labor', 'radio'], function(k){
              var saring;
              saring = _.filter(j[k], function(l){
                return l;
              });
              return _.map(saring, function(l){
                return '/' + _.startCase(look2('tarif', l.nama)).nama;
              });
            }),
            harga: 'Rp ' + j.total.semua,
            petugas: Meteor.users.findOne({
              _id: j.petugas
            }).username,
            keluar: j.keluar ? look('keluar', j.keluar).label : '-',
            baru_lama: i.rawat.length > 1 ? 'Lama' : 'Baru'
          };
          if (jenis === 'pendaftaran') {
            return _.pick(obj, ['tanggal', 'no_mr', 'nama_lengkap', 'cara_bayar', 'rujukan', 'klinik', 'diagnosa', 'baru_lama']);
          } else if (jenis === 'pembayaran') {
            return _.pick(obj, ['tanggal', 'no_bill', 'no_mr', 'nama_lengkap', 'klinik', 'diagnosa', 'tindakan', 'harga', 'petugas']);
          } else if (jenis === 'rawat_jalan') {
            return _.pick(obj, ['tanggal', 'no_mr', 'nama_lengkap', 'keluar', 'umur', 'cara_bayar', 'diagnosa', 'tindakan', 'petugas', 'keluar', 'rujukan']);
          }
        });
      });
      return {
        headers: _.map(docs[0], function(val, key){
          return _.startCase(key);
        }),
        rows: _.map(docs, function(i){
          return _.values(i);
        }),
        csv: docs
      };
    },
    patientExist: function(no_mr){
      if (coll.pasien.findOne({
        no_mr: parseInt(no_mr)
      })) {
        return true;
      }
    },
    nearEds: function(returnable){
      var sel, source, assign, batch, diffed;
      sel = {
        'digudang': {
          $gt: 0
        },
        'diretur': {
          $ne: true
        }
      };
      source = coll.gudang.find({
        batch: {
          $elemMatch: sel
        }
      }).fetch();
      assign = _.map(source, function(i){
        return _.map(i.batch, function(j){
          return _.assign(j, {
            idbarang: i.idbarang,
            nama: i.nama
          });
        });
      });
      batch = _.flatMap(source, function(i){
        return i.batch;
      });
      return diffed = _.filter(batch, function(i){
        var a, b;
        a = function(){
          return 6 > monthDiff(i.kadaluarsa);
        };
        b = function(){
          return i.returnable;
        };
        if (returnable) {
          return a() && b();
        } else {
          return a();
        }
      });
    },
    returBatch: function(doc){
      var findStock, i$, ref$, len$, i, sel, mod;
      findStock = coll.gudang.findOne({
        idbarang: doc.idbarang
      });
      for (i$ = 0, len$ = (ref$ = findStock.batch).length; i$ < len$; ++i$) {
        i = ref$[i$];
        if (i.idbatch === doc.idbatch) {
          i.diretur = true;
        }
      }
      sel = {
        _id: findStock._id
      };
      mod = {
        batch: findStock.batch
      };
      return coll.gudang.update(sel, {
        $set: mod
      });
    },
    amprah: function(idbarang, idamprah, diserah){
      var barang, i$, ref$, len$, i;
      barang = coll.gudang.findOne({
        idbarang: idbarang
      });
      for (i$ = 0, len$ = (ref$ = barang.amprah).length; i$ < len$; ++i$) {
        i = ref$[i$];
        if (i.idamprah === idamprah) {
          i.penyerah = this.userId;
          i.diserah = diserah;
        }
      }
      return coll.gudang.update(barang._id, barang);
    },
    latestAmprah: function(){
      return _.map(coll.gudang.find().fetch(), function(i){
        if (i.amprah) {
          return _.assign(i, {
            amprah: _.filter(i.amprah, function(j){
              return !j.penyerah;
            })
          });
        }
      });
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},{
  "extensions": [
    ".js",
    ".json",
    ".coffee"
  ]
});
require("./folder/parent/funcs.ls.js");
require("./folder/hooks.ls.js");
require("./folder/modules.ls.js");
require("./folder/pdf.ls.js");
require("./folder/rights.ls.js");
require("./folder/selects.ls.js");
require("./both.ls.js");
require("./client.ls.js");
require("./server.ls.js");