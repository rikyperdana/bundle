var require = meteorInstall({"folder":{"funcs.ls.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/funcs.ls.js                                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var slice$ = [].slice;
this._ = lodash;
this.coll = {};
this.schema = {};
this.afState = {};
this.ors = function(it){
  return it.find(function(it){
    return it;
  });
};
this.ands = function(it){
  if (_.every(it)) {
    return _.last(it);
  }
};
this.bool = function(it){
  return !!it;
};
this.reduce = function(){
  var params, res$, i$, to$;
  res$ = [];
  for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  params = res$;
  if (params.length === 2) {
    return Object.values(params[0]).reduce(params[1]);
  } else if (params.length === 3) {
    return Object.values(params[1]).reduce(params[2], params[0]);
  } else {
    return 'your arguments are invalid';
  }
};
this.same = function(it){
  return bool(reduce(it, function(res, inc){
    if (res === inc) {
      return inc;
    }
  }));
};
this.reverse = function(it){
  return reduce([], it, function(res, inc){
    return [inc].concat(slice$.call(res));
  });
};
if (Meteor.isClient) {
  this.m = require('mithril');
  this.normalize = function(obj){
    var recurse, key, val;
    recurse = function(value, name){
      var isNum, res, ref$;
      if (_.isObject(value)) {
        isNum = _.size(_.filter(value, function(val, key){
          return +key;
        }));
        res = (ref$ = {}, ref$[name + ""] = isNum > 0
          ? _.map(value, recurse)
          : value.getMonth
            ? value
            : _.merge.apply(_, [{}].concat(slice$.call(_.map(value, recurse)))), ref$);
        if (+name) {
          return res[name];
        } else {
          return res;
        }
      } else {
        if (+name + 1) {
          return value;
        } else {
          return ref$ = {}, ref$[name + ""] = value, ref$;
        }
      }
    };
    obj = recurse(obj, 'obj').obj;
    for (key in obj) {
      val = obj[key];
      if (key.split('.').length > 1) {
        delete obj[key];
      }
    }
    return obj;
  };
  this.autoForm = function(opts){
    var state, normed, scope, that, usedSchema, theSchema, omitFields, usedFields, arr, alphabetically, optionList, ref$, key$, stateTempGet, clonedDoc, usedDoc, attr, columnize, inputTypes;
    state = afState;
    normed = function(it){
      return it.replace(/\d/g, '$');
    };
    scope = (that = opts.scope) ? new SimpleSchema(function(){
      var reducer;
      reducer = function(res, val, key){
        var ref$;
        if (new RegExp("^" + that).test(key)) {
          return _.merge(res, (ref$ = {}, ref$[key + ""] = val, ref$));
        } else {
          return res;
        }
      };
      return _.reduce(opts.schema._schema, reducer, {});
    }()) : void 8;
    usedSchema = scope || opts.schema;
    theSchema = function(name){
      return usedSchema._schema[name];
    };
    omitFields = opts.omitFields ? _.pull.apply(_, [_.values(usedSchema._firstLevelSchemaKeys)].concat(slice$.call(opts.omitFields))) : void 8;
    usedFields = ors(arr = [omitFields, opts.fields, usedSchema._firstLevelSchemaKeys]);
    alphabetically = function(it){
      return _.sortBy(it, 'label');
    };
    optionList = function(name){
      var arr, ref$, ref1$, ref2$, ref3$, ref4$, ref5$, ref6$, ref7$;
      return alphabetically(ors(arr = [
        (ref$ = theSchema(normed(name))) != null ? (ref1$ = ref$.allowedValues) != null ? ref1$.map(function(i){
          return {
            value: i,
            label: _.startCase(i)
          };
        }) : void 8 : void 8, _.isFunction((ref2$ = theSchema(normed(name))) != null ? (ref3$ = ref2$.autoform) != null ? ref3$.options : void 8 : void 8)
          ? (ref4$ = theSchema(normed(name))) != null ? (ref5$ = ref4$.autoform) != null ? ref5$.options(name) : void 8 : void 8
          : (ref6$ = theSchema(normed(name))) != null ? (ref7$ = ref6$.autoform) != null ? ref7$.options : void 8 : void 8, ['true', 'false'].map(function(i){
          return {
            value: JSON.parse(i),
            label: _.startCase(i)
          };
        })
      ]));
    };
    state.arrLen == null && (state.arrLen = {});
    state.form == null && (state.form = {});
    state.temp == null && (state.temp = {});
    state.errors == null && (state.errors = {});
    (ref$ = state.form)[key$ = opts.id] == null && (ref$[key$] = {});
    (ref$ = state.temp)[key$ = opts.id] == null && (ref$[key$] = []);
    stateTempGet = function(field){
      if (state.temp[opts.id]) {
        return _.findLast(state.temp[opts.id], function(it){
          return it.name === field;
        });
      }
    };
    clonedDoc = opts.type === 'update-pushArray' ? _.assign({}, opts.doc, (ref$ = {}, ref$[opts.scope + ""] = [], ref$)) : void 8;
    usedDoc = clonedDoc || opts.doc;
    attr = {
      form: {
        id: opts.id,
        onchange: function(arg$){
          var target, that, arr, ref$, ref1$;
          target = arg$.target;
          if (that = opts.onchange) {
            that(target);
          }
          arr = ['radio', 'checkbox', 'select'];
          if (!in$((ref$ = theSchema(target.name)) != null ? (ref1$ = ref$.autoform) != null ? ref1$.type : void 8 : void 8, arr)) {
            state.form[opts.id][target.name] = target.value;
          }
          return opts.autosave && $("form#" + opts.id).submit();
        },
        onsubmit: function(e){
          var temp, formValues, obj, context, after, formTypes, that, ref$;
          if (!afState.disable) {
            afState.disable = true;
            e.preventDefault();
            temp = state.temp[opts.id].map(function(it){
              var ref$;
              return ref$ = {}, ref$[it.name + ""] = it.value, ref$;
            });
            formValues = _.filter(e.target, function(i){
              var a, arr, b;
              a = function(){
                return i.value !== 'on' && i.name;
              };
              arr = ['radio', 'checkbox', 'select'];
              b = function(){
                var ref$, ref1$;
                return in$((ref$ = theSchema(i)) != null ? (ref1$ = ref$.autoform) != null ? ref1$.type : void 8 : void 8, arr);
              };
              return a() && !b();
            }).map(function(arg$){
              var name, value;
              name = arg$.name, value = arg$.value;
              if (name && value) {
                return _.reduceRight(name.split('.'), function(res, inc){
                  var ref$;
                  return ref$ = {}, ref$[inc + ""] = res, ref$;
                }, value ? (function(){
                  switch (theSchema(normed(name)).type) {
                  case String:
                    return value;
                  case Number:
                    return +value;
                  case Date:
                    return new Date(value);
                  }
                }()) : void 8);
              }
            });
            obj = normalize(_.merge.apply(_, temp.concat(formValues)));
            context = usedSchema.newContext();
            context.validate(_.merge({}, obj, !opts.scope ? opts.doc || {} : void 8));
            state.errors[opts.id] = _.merge.apply(_, [{}].concat(slice$.call(function(){
              var a;
              a = context._invalidKeys.filter(function(i){
                var arr, ref$;
                return ands(arr = [i.type !== 'keyNotInSchema', !((ref$ = theSchema(normed(i.name))) != null && ref$.autoValue)]);
              });
              return a.map(function(it){
                var ref$;
                return ref$ = {}, ref$[it.name + ""] = it.type, ref$;
              });
            }())));
            after = function(err, res){
              var ref$;
              if (res) {
                afState.disable = false;
                return (ref$ = opts.hooks) != null ? ref$.after(res) : void 8;
              }
            };
            formTypes = function(doc){
              return {
                insert: function(){
                  return opts.collection.insert(doc || obj, after);
                },
                update: function(){
                  return opts.collection.update(usedDoc._id, {
                    $set: doc || obj
                  }, after);
                },
                method: function(){
                  return Meteor.call(opts.meteormethod, doc || obj, after);
                },
                'update-pushArray': function(){
                  var ref$;
                  return opts.collection.update({
                    _id: usedDoc._id
                  }, {
                    $push: (ref$ = {}, ref$[opts.scope + ""] = {
                      $each: _.values(obj[opts.scope])
                    }, ref$)
                  }, function(err, res){
                    var ref$;
                    afState.disable = false;
                    if (res) {
                      return (ref$ = opts.hooks) != null ? ref$.after(doc) : void 8;
                    }
                  });
                }
              };
            };
            if (_.values(state.errors[opts.id]).length === 0) {
              if (that = (ref$ = opts.hooks) != null ? ref$.before : void 8) {
                that(obj, function(moded){
                  return formTypes(moded)[opts.type]();
                });
              } else {
                formTypes()[opts.type]();
              }
              afState.form = null;
              return afState.temp = null;
            }
          }
        }
      },
      radio: function(name, value){
        var ref$;
        return {
          type: 'radio',
          name: name,
          id: name + "" + value,
          checked: value === (((ref$ = stateTempGet(name)) != null ? ref$.value : void 8) || (usedDoc != null ? usedDoc[name] : void 8)),
          onchange: function(){
            return state.temp[opts.id].push({
              name: name,
              value: value
            });
          }
        };
      },
      select: function(name){
        var ref$;
        return {
          name: name,
          value: ((ref$ = stateTempGet(name)) != null ? ref$.value : void 8) || _.get(usedDoc, name),
          onchange: function(arg$){
            var target;
            target = arg$.target;
            return state.temp[opts.id].push({
              name: name,
              value: target.value
            });
          }
        };
      },
      checkbox: function(name, value){
        var that;
        return {
          type: 'checkbox',
          name: name,
          id: name + "" + value,
          data: value,
          onchange: function(){
            return state.temp[opts.id].push({
              name: name,
              value: _.map($("input:checked[name='" + name + "']"), function(it){
                var theVal;
                theVal = function(it){
                  var that;
                  if (that = +it) {
                    return that;
                  } else {
                    return it;
                  }
                };
                return theVal(it.attributes.data.nodeValue);
              })
            });
          },
          checked: (that = stateTempGet(name))
            ? in$(value.toString(), _.map(that.value, function(it){
              return it.toString();
            }))
            : usedDoc != null && usedDoc[name + ".0"] ? in$(value.toString(), _.compact(_.map(usedDoc, function(val, key){
              if (_.includes(key, name)) {
                return val.toString();
              }
            }))) : void 8
        };
      },
      arrLen: function(name, type){
        return {
          onclick: function(){
            var ref$, num;
            (ref$ = state.arrLen)[name] == null && (ref$[name] = 0);
            num = {
              inc: 1,
              dec: -1
            };
            return state.arrLen[name] += num[type];
          }
        };
      }
    };
    columnize = function(it){
      var chunk, recDom, structure;
      chunk = function(it){
        return reduce([], it, function(res, inc){
          var end, ref$, i$, first, last;
          end = function(){
            return slice$.call(res).concat([[inc]]);
          };
          if ((ref$ = inc.type) === Object || ref$ === Array) {
            return end();
          } else {
            first = 0 < (i$ = res.length - 1) ? slice$.call(res, 0, i$) : (i$ = 0, []), last = res[i$];
            if (!((last != null ? last.length : void 8) < opts.columns)) {
              return end();
            } else {
              if ((ref$ = last[0].type) === Object || ref$ === Array) {
                return end();
              } else {
                return slice$.call(first).concat([slice$.call(last).concat([inc])]);
              }
            }
          }
        });
      };
      recDom = function(i){
        if (_.isArray(i)) {
          return i.map(function(it){
            return recDom(it);
          });
        } else {
          return function(){
            var type, ref$, split, title;
            type = (i != null ? (ref$ = i.autoform) != null ? ref$.type : void 8 : void 8) || 'other';
            split = _.split(i.name, '.');
            title = function(){
              if (split.length === 1) {
                return i.head;
              } else {
                return i.head + "." + _.last(split);
              }
            };
            return inputTypes(title(), i)[type]();
          }();
        }
      };
      structure = function(it){
        return it.map(function(i){
          return m('.columns', i.map(function(j){
            var ref$;
            return m('div', {
              'class': ((ref$ = j.attrs) != null ? ref$.type : void 8) !== 'hidden' ? 'column' : void 8
            }, j);
          }));
        });
      };
      return structure(recDom(chunk(it)));
    };
    inputTypes = function(name, schema){
      var title, arr, ref$, label, error;
      title = ors(arr = [(ref$ = theSchema(normed(name))) != null ? ref$.label : void 8, _.startCase(_.last(_.split(normed(name), '.')))]);
      label = m('label.label', m('span', title), !theSchema(normed(name)).optional ? m('span.has-text-danger', '*') : void 8);
      error = _.startCase(_.find(state.errors[opts.id], function(val, key){
        return key === name;
      }));
      return {
        disabled: function(){
          var arr;
          return m('div', label, m('input.input', {
            name: name,
            disabled: true,
            value: ors(arr = [
              _.get(usedDoc, name), typeof schema.autoValue == 'function' ? schema.autoValue(name, _.map(state.form[opts.id], function(val, key){
                return {
                  value: val,
                  name: key
                };
              })) : void 8
            ])
          }));
        },
        hidden: function(){
          return m('input', {
            type: 'hidden',
            name: name,
            id: name,
            value: typeof schema.autoValue == 'function' ? schema.autoValue(name, _.map(state.form[opts.id], function(val, key){
              return {
                value: val,
                name: key
              };
            })) : void 8
          });
        },
        textarea: function(){
          return m('div', label, m('textarea.textarea', {
            name: name,
            id: name,
            'class': error ? 'is-danger' : void 8,
            value: state.form[opts.id][name] || (usedDoc != null ? usedDoc[name] : void 8)
          }), error ? m('p.help.is-danger', error) : void 8);
        },
        range: function(){
          var ref$;
          return m('div', label, m('input', {
            type: 'range',
            id: name,
            name: name,
            'class': error ? 'is-danger' : void 8,
            value: state.form[opts.id][name] || (usedDoc != null ? (ref$ = usedDoc[name]) != null ? ref$.toString() : void 8 : void 8)
          }), error ? m('p.help.is-danger', error) : void 8);
        },
        checkbox: function(){
          return m('div', label, optionList(name).map(function(j){
            return m('label.checkbox', m('input', attr.checkbox(name, j.value)), m('span', _.startCase(j.label)));
          }), error ? m('p.help.is-danger', error) : void 8);
        },
        select: function(){
          var arr, ref$;
          return m('div', label, m('.select', m('select', attr.select(name), m('option', {
            value: ''
          }, ors(arr = [(ref$ = theSchema(normed(name)).autoform) != null ? ref$.firstLabel : void 8, 'Select One'])), optionList(name).map(function(j){
            return m('option', {
              value: j.value
            }, j.label);
          }))), error ? m('p.help.is-danger', error) : void 8);
        },
        radio: function(){
          return m('.control', label, optionList(normed(name)).map(function(j){
            return m('label.radio', m('input', attr.radio(name, j.value)), m('span', _.startCase(j.label)));
          }), error ? m('p.help.is-danger', error) : void 8);
        },
        other: function(){
          var defaultInputTypes, defaultType, maped, ref$, ref1$, that, ref2$, ref3$, arr, ref4$, sorted, filtered, found, docLen, this$ = this;
          defaultInputTypes = {
            text: String,
            number: Number,
            radio: Boolean,
            date: Date
          };
          defaultType = function(){
            return _.toPairs(defaultInputTypes).find(function(it){
              return it[1] === schema.type;
            });
          };
          maped = _.map(usedSchema._schema, function(val, key){
            return _.merge(val, {
              name: key
            });
          });
          if ((ref$ = schema.autoform) != null && ref$.options) {
            return inputTypes(name, defaultType()[0]).select();
          } else if (((ref1$ = defaultType()) != null ? ref1$[0] : void 8) === 'radio') {
            return inputTypes(name, defaultType()[0]).radio();
          } else if (that = (ref2$ = defaultType()) != null ? ref2$[0] : void 8) {
            return m('.field', label, m('.control', m('input.input', {
              'class': error ? 'is-danger' : void 8,
              type: ((ref3$ = schema.autoform) != null ? ref3$.type : void 8) || that,
              name: name,
              id: name,
              step: 'any',
              value: ors(arr = [(ref4$ = state.form[opts.id]) != null ? ref4$[name] : void 8, ands(arr = [_.get(usedDoc, name), that === 'date', moment(_.get(usedDoc, name)).format('YYYY-MM-DD')]), _.get(usedDoc, name)])
            })), error ? m('p.help.is-danger', error) : void 8);
          } else if (schema.type === Object) {
            sorted = function(){
              return reduce([], reverse(maped), function(res, inc){
                var ref$;
                if (((ref$ = inc.autoform) != null ? ref$.type : void 8) === 'hidden') {
                  return slice$.call(res).concat([inc]);
                } else {
                  return [inc].concat(slice$.call(res));
                }
              });
            };
            filtered = sorted().filter(function(j){
              var getLen, conds;
              getLen = function(str){
                return _.size(_.split(str, '.'));
              };
              return _.every(conds = [_.includes(j.name, normed(name) + "."), getLen(name) + 1 === getLen(j.name)]);
            });
            return m('.box', !+label ? m('h5', label) : void 8, m('.box', columnize(filtered.map(function(it){
              return _.merge(it, {
                head: name
              });
            }))));
          } else if (schema.type === Array) {
            found = maped.find(function(it){
              return it.name === normed(name) + ".$";
            });
            docLen = opts.scope === name
              ? 1
              : function(it){
                return it.length - 1;
              }(_.filter(usedDoc, function(val, key){
                return _.includes(key, name + ".");
              }));
            return m('.box', opts.scope !== name ? m('div', m('h5.subtitle', label), m('a.button.is-success', attr.arrLen(name, 'inc'), '+ Add'), m('a.button.is-warning', attr.arrLen(name, 'dec'), '- Rem')) : void 8, (function(){
              var i$, to$, results$ = [];
              for (i$ = 1, to$ = state.arrLen[name] || docLen || 0; i$ <= to$; ++i$) {
                results$.push(i$);
              }
              return results$;
            }()).map(function(num){
              var type, ref$;
              type = (typeof j != 'undefined' && j !== null ? (ref$ = j.autoform) != null ? ref$.type : void 8 : void 8) || 'other';
              return inputTypes(name + "." + num, found)[type]();
            }), error ? m('p.help.is-danger', error) : void 8);
          }
        }
      };
    };
    return {
      view: function(){
        var ref$, ref1$;
        return m('.box', m('form', attr.form, m('.row', columnize(usedFields.map(function(i){
          return _.merge(theSchema(i), {
            name: i,
            head: i
          });
        }))), m('.row', m('.columns', m('.column.is-1', m('input.button.is-primary', {
          type: 'submit',
          value: opts != null ? opts.buttonContent : void 8,
          'class': opts != null ? opts.buttonClasses : void 8
        })), m('.column.is-1', m('input.button.is-warning', {
          type: 'reset',
          value: opts != null ? (ref$ = opts.reset) != null ? ref$.content : void 8 : void 8,
          'class': opts != null ? (ref1$ = opts.reset) != null ? ref1$.classes : void 8 : void 8
        }))))));
      }
    };
  };
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"guides.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/guides.ls.js                                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
if (Meteor.isClient) {
  this.guide = function(group, role){
    var arr;
    if (role === 'mr') {
      return m('div', m('h5', 'Tabel Antrian Kodifikasi'), ols(arr = ['Klik tombol cek pada baris data yang ingin dikerjakan', 'Sebuah modal akan muncul berikut informasi diagnosa dokter saat rawat', 'Klik tombol +Add untuk menambahkan ICD-X seperlunya', 'Jika telah yakin dengan data yang diisikan, klik Submit']));
    } else if (group === 'regis') {
      return m('div', m('p', 'Untuk setiap pasien yang datang, mohon gunakan menu "Cari Pasien" terlebih dahulu untuk memastikan keberadaannya di dalam sistem.'), m('h5', 'Menu Cari Pasien'), ols(arr = ['Klik pada field pencarian', 'Ketikkan pencarian berdasarkan nama atau NoMR', 'Tekan tombol Enter pada Keyboard untuk mulai mencari', 'Untuk mengulangi pencarian, kosongkan field dan ulangi langkah 2', 'Bila hasil pencarian telah muncul, klik ganda pada salah satu nama']), m('h5', 'Menu Pasien Baru'), ols(arr = ['Jika bisa dipastikan bahwa pasien belum pernah terdaftar pada sistem, klik menu "Pasien Baru"', 'Silahkan isikan informasi pasien. Semakin lengkap semakin baik.', 'Bila NoMR yang diisikan telah terpakai, silahkan coba kembali dengan angka yg lain', 'Bila sudah yakin data yang diisikan benar, klik tombol "Simpan"', 'Anda akan langsung diarahkan ke halaman rincian pasien tersebut']), m('h5', 'Menu Rincian Pasien'), m('p', 'Pada menu ini Anda dapat melakukan berbagai aktifitas seperti cetak kartu, General Consent, Edit data pasien, dan menambahkan request berobat'), ols(arr = ['Klik pada tombol "+Rawat Jalan"', 'Isikan pilihan cara bayar, apakah umum atau asuransi', 'Isikan pilihan poli spesialis yang dituju pasien', 'Isikan pilihan dokter yang diinginkan, bila perlu', 'Isikan informasi lainnya dan klik tombol "Simpan"', 'Bila pasien memilih cara bayar umum, arahkan ke kasir. Bila jaminan, arahkan langsung ke Poli']));
    } else if (group === 'bayar') {
      return m('div', m('h5', 'Daftar Pembayaran'), m('p', 'Pada halaman ini Anda dapat melihat daftar pasien yang sedang mengantri untuk membayar tagihan, baik untuk registrasi atau pembayaran tindakan'), ols(arr = ['Klik tombol "Bayar" pada salah satu baris', 'Anda akan melihat rincian tagihan yang harus dibayarkan pasien', 'Bila dana telah diterima, klik tombol "Sudah"', 'Sebuah file pdf bill pembayaran siap untuk diunduh dan dicetak']));
    } else if (group === 'jalan') {
      return m('div', m('h5', 'Menu Rawat Jalan bagi Perawat'), m('p', "Pada menu ini seorang perawat dapat melihat daftar pasien yang sedang mengantri untuk dilayani di dalam Poli " + _.startCase(userRole())), ols(arr = ['Klik ganda pada salah satu baris nama pasien yang ingin dilayani', 'Di bagian bawah terdapat daftar riwayat berobat, klik tombol "Lihat" pada baris teratas', 'Sebuah Modal akan muncul, dan pastikan tanggal yang tertera adalah tanggal hari ini', 'Klik tombol "Lanjutkan" untuk mulai mengisikan SOAP', 'Isikan informasi yang diperlukan sesuai kebutuhan dan SOAP seorang perawat', 'Bila sudah yakin informasi yang diisikan adalah benar, klik tombol "Simpan"', 'Anda akan dikembalikan ke halaman rincian pasien tersebut', 'Anda dapat meninjau kembali inputan sebelumnya dengan klik tombol "Lihat" pada baris teratas', 'Anda dapat kembali ke halaman utama dengan klik menu "Rawat Jalan"']), m('p', "Pada daftar yang di bawah, Anda dapat melihat daftar pasien yang telah di anamesa dan sedang menunggu dokter"), m('h5', 'Menu Rawat Jalan bagi Dokter'), ols(arr = ['Dapat lakukan langkah yang sama dengan perawat mulai dari 1 hingga 4', 'Silahkan isikan informasi yang dibutuhkan sesuai dengan SOAP seorang dokter', 'Kolom diagnosa dapat ditambahkan/dikurangi sesuai dengan jumlah diagnosa', 'Tindakan dapat diisikan dengan memilih dari Grup dan Nama tindakan. Bisa lebih dari 1', 'Resep obat dapat diisikan dengan memilih nama obat, aturan pakai, dan jumlah unit obat yang harus dikonsumsi', 'Dokter bisa meresepkan beberapa obat yang berbeda dengan klik tombol "+Add" atau "-Rem"', 'Bila dokter tersebut berupa Puyer, maka isikan informasi yang sama pada obat yang berbeda tersebut', 'Isikan pilihan "Pindah" bila pasien tersebut ingin dirujuk untuk ditangani oleh poli yang lain', 'Bila telah yakin bahwa informasi yang diisikan benar, klik tombol "Simpan"', 'Anda akan dikembalikan ke halaman utama Rawat Jalan untuk melanjutkan ke pasien berikutnya']), m('h5', 'Menu Gudang Farmasi'), m('p', 'Adalah menu yang bisa diakses oleh baik perawat dan dokter untuk meninjau ketersediaan obat yang akan diresepkan kepada pasien, atau barang habis pakai yang tersedia untuk diminta'), m('h5', 'Menu Amprah'), m('p', 'Adalah menu yang bisa diakses oleh perawat untuk mengamprah kepada apotik atas barang habis pakai yang dibutuhkan'));
    } else if (group === 'obat') {
      return m('div', m('h5', 'Menu Apotik'), m('p', 'Pada tabel akan terlihat daftar pasien yang sedang mengantri untuk diserahkan obat yang telah diresepkan oleh dokter'), ols(arr = ['Klik tombol "Serah" pada salah satu baris nama yang akan diserahkan obat', 'Pada Modal tercantum daftar nama obat, jumlah yang diminta, dan aturan pakai', 'Bila apoteker yakin ingin menyerahkan obat, klik tombol "Serahkan"', 'Lakukan langkah 1 sampai 4 hingga dirasa cukup untuk pengambilan obat', 'Klik tombol "Cetak Rekap" untuk mengunduh file pdf yang bisa dicetak untuk dijadikan panduan bagi apoteker mengambil obat']), m('h5', 'Menu Gudang Farmasi'), m('p', 'Adalah menu yang bisa digunakan oleh apoteker untuk meninjau ketersediaan obat maupun barang habis pakai'), m('p', 'Apoteker dapat membuka salah satu informasi obat dan mengisikan nilai "Batas Minimum" dengan cara klik ganda'), m('h5', 'Menu Amprah'), m('p', 'Adalah menu yang dapat digunakan oleh apoteker untuk merespon permintaan amprah dari ruangan dan mengamprah obat dan bhp ke farmasi'), m('h6', 'Meminta barang ke Farmasi'), ols(arr = ['Klik tombol "Request Obat" atau "Request BHP"', 'Pada pilihan nama, tunjuk nama barang yang diinginkan', 'Huruf "A" dan "G" yang diikuti dengan angka mewakili jumlah stok yang tersedia di "Apotik" dan "Gudang"', 'Pada kolom jumlah, isikan jumlah barang yang dibutuhkan', 'Bila telah yakin, klik tombol "Simpan"']), m('h6', 'Menyerahkan barang ke Ruangan'), ols(arr = ['Klik tombol "Serah" pada salah satu baris permintaan yang ingin direspon', 'Pada Modal yang tercantum, muncul angka "Diminta" dan "Sedia"', 'Isikan angka jumlah barang yang ingin diserahkan pada kolom "Diserah"', 'Pastikan bahwa jumlah barang yang akan diserah lebih kecil dari angka "Sedia"', 'Bila telah yakin untuk menyerahkan barangnya dalam jumlah tersebut, klik tombol "Submit"']));
    } else if (group === 'farmasi') {
      return m('div', m('h5', 'Menu Gudang Farmasi'), m('p', 'Adalah menu yang dapat digunakan petugas farmasi untuk mengelola seluruh barang yang ada di dalam sistem seperti menginput jenis barang baru, dan menambahkan batch'), m('h6', 'Penambahan Barang'), ols(arr = ['Pastikan nama barang yang akan diisikan belum pernah tersedia di dalam sistem dengan lakukan pencarian nama barang', 'Bila nama barang tersebut memang belum tersedia di sistem, lanjutkan ke langkah berikut', 'Klik tombol "+Tambah Jenis Barang"', 'Pilih jenis barang sesuai dengan jenisnya', 'Isikan nama barang bersangkutan', 'Bila data tersebut adalah obat, silahkan isikan kandungannya. Bila lebih dari satu maka pisahkan dengan koma', 'Pilih satuan dari barang tersebut', 'Klik tombol "+Add" pada bagian "Batch"', 'Isikan No. Batch pertama untuk barang ini', 'Isikan informasi lainnya yang bersifat wajib dan opsional', 'Bila telah yakin dengan informasi yang diisikan, maka klik tombol "Simpan"', 'Barang baru yang telah ditambahkan dapat dilihat pada daftar dan dalam pencarian']), m('h6', 'Menambahkan Batch pada Barang yang telah ada'), ols(arr = ['Lakukan pencarian nama barang pada kolom pencarian', 'Klik ganda pada nama barang yang akan ditambahkan batch-nya', 'Klik tombol "+Tambahkan Batch"', 'Isikan informasi seperti menambahkan batch pada tutorial diatas', 'Bila telah yakin dengan informasi yang diisikan, klik tombol "Tambahkan"']), m('h5', 'Menu Amprah'), m('p', 'Adalah menu yang dapat digunakan oleh petugas farmasi untuk merespon permintaan barang dari apotik'), ols(arr = ['Klik tombol "Serah" pada salah satu baris permintaan yang ingin direspon', 'Pada Modal yang muncul tercantum jumlah barang yang "Diminta" dan jumlah yang ter-"Sedia" di gudang', 'Pada kolom "Diserah", isikan angka jumlah barang yang akan diberikan', 'Pastikan bahwa angka "Diserah" lebih kecil dari angka "Sedia"', 'Bila telah yakin dengan informasi yang diisikan maka klik "Serahkan"', 'Sebuah Modal baru akan muncul untuk menunjukkan nama barang, jumlah barang, dan dari batch mana barang tersebut harus diambil untuk diserahkan']));
    } else if (group === 'manajemen') {
      return m('div', m('h5', 'Users Management'), m('p', 'Adalah menu yang dapat digunakan Tim EDP dalam mengelola para pengguna sistem'), m('h5', 'Melakukan Pencarian Pengguna'), ols(arr = ['Pada kolom pencarian, silahkan isikan nama user, grupnya, peranannya, atau polinya', 'Tabel dibawahnya akan menampilkan daftar pengguna yang mirip dengan kriteria pencarian']), m('h5', 'Menambahkan Pengguna Baru'), ols(arr = ['Pada form Pengguna Baru isikan informasi username, password, dan ulangi password', 'Bila informasi dianggap benar, silahkan klik tombol "Daftarkan"', 'Pengguna baru tersebut langsung tercantum pada daftar pengguna sistem']), m('h5', 'Merubah Password Pengguna'), ols(arr = ['Pada form Pengguna Baru isikan username dari akun yang akan diganti passwordnya', 'Isikan password yang baru, dan pada kolom ulangi password baru', 'Klik tombol "Daftarkan" untuk konfirmasi ganti password']), m('h5', 'Memberikan Peranan ke Pengguna'), ols(arr = ['Pada daftar pengguna, klik ganda pada salah satu baris pengguna yang ingin dirubah', 'Pada Modal yang muncul, pilihkan Grup, Peran, (dan Poli bila dari poli)', 'Bila telah yakin dengan pilihan peran yang akan diberikan, klik tombol "Simpan"']), m('h5', 'Menghapus Peranan dari Pengguna'), ols(arr = ['Pada daftar pengguna, klik tombol "Reset" pada salah satu baris pengguna', 'Sebuah Modal akan muncul untuk menanyakan peranan baru yang akan diberikan, dan Simpan', 'Bila tidak ada peran baru yang akan diserahkan, silahkan tutup Modal']));
    }
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"modules.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/modules.ls.js                                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
this.modules = [
  {
    name: 'regis',
    full: 'Pendaftaran',
    icon: 'users',
    color: 'orange'
  }, {
    name: 'bayar',
    full: 'Pembayaran',
    icon: 'cash-register',
    color: 'green'
  }, {
    name: 'jalan',
    full: 'Rawat Jalan',
    icon: 'directions',
    color: 'blue'
  }, {
    name: 'inap',
    full: 'Rawat Inap',
    icon: 'procedures',
    color: 'red'
  }, {
    name: 'obat',
    full: 'Apotek',
    icon: 'mortar-pestle',
    color: 'light-green'
  }, {
    name: 'farmasi',
    full: 'Gudang Farmasi',
    icon: 'book-medical',
    color: 'orange'
  }, {
    name: 'manajemen',
    full: 'Manajemen',
    icon: 'tasks',
    color: 'orange'
  }, {
    name: 'amprah',
    full: 'Amprah',
    icon: 'shopping-basket',
    color: 'blue-grey'
  }, {
    name: 'depook',
    full: 'Depo OK',
    icon: 'mortar-pestle',
    color: 'green'
  }
];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"parent.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/parent.ls.js                                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
this.look = function(list, val){
  return selects[list].find(function(it){
    return it.value === val;
  });
};
this.look2 = function(list, id){
  return coll[list].find().fetch().find(function(it){
    return it._id === id;
  });
};
this.randomId = function(){
  return Math.random().toString(36).slice(2);
};
this.zeros = function(it){
  return repeatString$('0', 6 - it.toString().length) + it;
};
this.min = function(it){
  return reduce(it, function(res, inc){
    if (inc < res) {
      return inc;
    } else {
      return res;
    }
  });
};
this.max = function(it){
  return reduce(it, function(res, inc){
    if (inc > res) {
      return inc;
    } else {
      return res;
    }
  });
};
this.abs = function(it){
  return Math.sqrt(Math.pow(it, 2));
};
this.dayDiff = function(date){
  var diff;
  diff = date.getTime() - new Date().getTime();
  diff /= 1000 * 60 * 60 * 24;
  return Math.round(diff);
};
this.hari = function(it){
  return moment(it).format('D MMM YYYY');
};
this.rupiah = function(it){
  return "Rp " + numeral(+it || 0).format('0,0') + ",-";
};
this.ols = function(it){
  return m('ol', it.map(function(it){
    return m('li', it);
  }));
};
if (Meteor.isClient) {
  this.state = {
    regions: {},
    notify: {},
    pagins: {
      limit: 10,
      page: 0
    }
  };
  this.currentRoute = function(){
    return m.route.get().split('/')[1];
  };
  this.isDr = function(){
    var ref$, ref1$;
    return (ref$ = _.split((ref1$ = Meteor.user()) != null ? ref1$.username : void 8, '.')[0]) === 'dr' || ref$ === 'drg';
  };
  this.roles = function(){
    var ref$;
    return (ref$ = Meteor.user()) != null ? ref$.roles : void 8;
  };
  this.tds = function(it){
    return it.map(function(i){
      return m('td', i);
    });
  };
  this.userRole = function(it){
    var that, ref$, ref1$;
    if (that = it) {
      return ((ref$ = roles()) != null ? (ref1$ = ref$[currentRoute()]) != null ? ref1$[0] : void 8 : void 8) === that;
    } else {
      return function(it){
        var ref$;
        return it != null ? (ref$ = it[0]) != null ? ref$[0] : void 8 : void 8;
      }(_.values(roles()));
    }
  };
  this.userGroup = function(it){
    var that, ref$;
    if (that = it) {
      return (ref$ = roles()) != null ? ref$[that] : void 8;
    } else {
      return function(it){
        return it != null ? it[0] : void 8;
      }(_.keys(roles()));
    }
  };
  this.pagins = function(it){
    var position;
    position = state.pagins.page * state.pagins.limit;
    return _.slice(it, position, position + state.pagins.limit);
  };
  this.elem = {
    modal: function(obj){
      var that;
      return m('.modal.is-active', m('.modal-background'), m('.modal-card', m('header.modal-card-head', m('p.modal-card-title', obj.title), m('button.delete', {
        'aria-label': 'close',
        onclick: function(){
          return state.modal = null;
        }
      })), (that = obj.content) ? m('section.modal-card-body', m('.content', that)) : void 8, m('footer.modal-card-foot', (that = obj.confirm) ? m('button.button.is-success', {
        onclick: function(){
          return typeof obj.action == 'function' ? obj.action() : void 8;
        }
      }, m('span', that)) : void 8, (that = obj.danger) ? m('button.button.is-danger', {
        onclick: function(){
          return typeof obj.dangerAction == 'function' ? obj.dangerAction() : void 8;
        }
      }, that) : void 8)));
    },
    pagins: function(arr){
      return m('nav.pagination', {
        role: 'navigation',
        'aria-label': 'pagination'
      }, [['previous', -1], ['next', 1]].map(function(i){
        return m(".pagination-" + i[0], {
          onclick: function(){
            return state.pagins.page += i[1];
          }
        }, m('span', _.startCase(i[0])));
      }), m('.pagination-list', [0, 1, 2].map(function(i){
        return m('a.pagination-link', m('span', _.startCase(state.pagins.page + i + 1)));
      })));
    },
    report: function(arg$){
      var title, action;
      title = arg$.title, action = arg$.action;
      return m('.box', m('h5', title), m('form.columns', {
        onsubmit: function(e){
          var arr, vals, that;
          return arr = [
            e.preventDefault(), vals = [0, 1, 2].map(function(it){
              return e.target[it].value;
            }), action({
              start: (that = vals[0]) ? new Date(that) : void 8,
              end: (that = vals[1]) ? new Date(moment(that).add(1, 'days')) : void 8,
              type: vals[2]
            })
          ];
        }
      }, m('.column', m('input.input', {
        type: 'date',
        placeholder: 'Mulai'
      })), m('.column', m('input.input', {
        type: 'date',
        placeholder: 'Akhir'
      })), m('.column.is-2', m('.field', m('.control', m('.select', m('select', ['Pdf', 'Excel'].map(function(i){
        return m('option', i);
      })))))), m('.column.is-1', m('input.button.is-info', {
        type: 'submit',
        value: 'Unduh'
      }))));
    }
  };
  this.csv = function(title, docs){
    var content, blob;
    content = exportcsv.exportToCSV(docs, true, ';');
    blob = new Blob([content], {
      type: 'text/plain;charset=utf-8'
    });
    return saveAs(blob, title + ".csv");
  };
}
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"pdf.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/pdf.ls.js                                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var kop, slice$ = [].slice;
if (Meteor.isClient) {
  kop = {
    text: 'PEMERINTAH PROVINSI RIAU\nRUMAH SAKIT UMUM DAERAH PETALA BUMI\nJL. Dr. Soetomo No. 65, Telp. (0761) 23024\n\n\n',
    alignment: 'center',
    bold: true
  };
  this.makePdf = {
    card: function(idpasien){
      var doc, pdf;
      doc = coll.pasien.findOne(idpasien);
      pdf = pdfMake.createPdf({
        content: ["Nama : " + doc.regis.nama_lengkap, "No. MR: " + zeros(doc.no_mr)],
        pageSize: 'B8',
        pageMargins: [110, 50, 0, 0],
        pageOrientation: 'landscape'
      });
      return pdf.download(zeros(doc.no_mr) + "_card.pdf");
    },
    consent: function(){
      var doc, pdf, arr;
      doc = coll.pasien.findOne(m.route.param('idpasien'));
      pdf = pdfMake.createPdf({
        content: arr = [
          kop, {
            text: '\nDATA UMUM PASIEN',
            alignment: 'center'
          }, {
            columns: [
              ['NO. MR', 'NAMA LENGKAP', 'TEMPAT & TANGGAL LAHIR', 'GOLONGAN DARAH', 'JENIS KELAMIN', 'AGAMA', 'PENDIDIKAN', 'PEKERJAAN', 'NAMA AYAH', 'NAMA IBU', 'NAMA SUAMI / ISTRI', 'ALAMAT', 'NO. TELP / HP'], [zeros(doc.no_mr), doc.regis.nama_lengkap, (doc.regis.tmpt_lahir || '-') + ", " + moment(doc.regis.tgl_lahir).format('D/MM/YYYY')].concat(
                slice$.call(_.map(['darah', 'kelamin', 'agama', 'pendidikan', 'pekerjaan'], function(i){
                  var ref$;
                  return ((ref$ = look(i, doc.regis[i])) != null ? ref$.label : void 8) || '-';
                })), slice$.call(_.map(['ayah', 'ibu', 'pasangan', 'alamat', 'kontak'], function(i){
                  return doc.regis[i] || '-';
                }))
              ).map(function(it){
                return ": " + it;
              })
            ]
          }, {
            text: '\nPERSETUJUAN UMUM (GENERAL CONSENT)',
            alignment: 'center'
          }, {
            table: {
              body: [[
                'S', 'TS', {
                  text: 'Keterangan',
                  alignment: 'center'
                }
              ]].concat(slice$.call([['Saya akan mentaati peraturan yang berlaku di RSUD Petala Bumi'], ['Saya memberi kuasa kepada dokter dan semua tenaga kesehatan untuk melakukan pemeriksaan / pengobatan / tindakan yang diperlakukan upaya kesembuhan saya / pasien tersebut diatas'], ['Saya memberi kuasa kepada dokter dan semua tenaga kesehatan yang ikut merawat saya untuk memberikan keterangan medis saya kepada yang bertanggung jawab atas biaya perawatan saya.'], ['Saya memberi kuasa kepada RSUD Petala Bumi untuk menginformasikan identitas sosial saya kepada keluarga / rekan / masyarakat'], ['Saya mengatakan bahwa informasi hasil pemeriksaan / rekam medis saya dapat digunakan untuk pendidikan / penelitian demi kemajuan ilmu kesehatan']].map(function(it){
                return [' ', ' '].concat(slice$.call(it));
              })))
            }
          }, '\nPetunjuk :', 'S: Setuju', 'TS: Tidak Setuju', {
            alignment: 'justify',
            columns: [
              {
                text: '\n\n\n\n__________________\n' + _.startCase(Meteor.user().username),
                alignment: 'center'
              }, {
                text: 'Pekanbaru, ' + moment().format('DD/MM/YYYY') + '\n\n\n\n__________________\n' + _.startCase(doc.regis.nama_lengkap),
                alignment: 'center'
              }
            ]
          }
        ]
      });
      return pdf.download(zeros(doc.no_mr) + "_consent.pdf");
    },
    payRawat: function(idpasien, idrawat, rows){
      var pasien, rawat, items, table, pdf, arr, ref$, ref1$;
      pasien = coll.pasien.findOne(idpasien);
      rawat = pasien.rawat.find(function(it){
        return it.idrawat === idrawat;
      });
      items = rows.map(function(it){
        return [it[0], rupiah(it[1])];
      });
      table = {
        table: {
          widths: ['*', 'auto'],
          body: [['Uraian', 'Harga']].concat(slice$.call(items))
        }
      };
      pdf = pdfMake.createPdf({
        content: arr = [
          kop, "\n", {
            columns: [
              ['NO. MR', 'NAMA PASIEN', 'JENIS KELAMIN', 'TANGGAL LAHIR', 'UMUR', 'KLINIK'], [zeros(pasien.no_mr), _.startCase(pasien.regis.nama_lengkap), ((ref$ = look('kelamin', pasien.regis.kelamin)) != null ? ref$.label : void 8) || '-', moment().format('D/MM/YYYY'), moment().diff(pasien.regis.tgl_lahir, 'years') + " tahun", ((ref1$ = look('klinik', rawat.klinik)) != null ? ref1$.label : void 8) || '-'].map(function(it){
                return ": " + it;
              })
            ]
          }, {
            text: '\n\nRINCIAN PEMBAYARAN',
            alignment: 'center'
          }, table, "\nTOTAL BIAYA " + rupiah(_.sum(rows.map(function(it){
            return it[1];
          }))), {
            text: '\nPEKANBARU, ' + moment().format('D/MM/YYYY') + '\n\n\n\n\n' + _.startCase(Meteor.user().username),
            alignment: 'right'
          }
        ]
      });
      return pdf.download(zeros(pasien.no_mr) + "_payRawat.pdf");
    },
    payRegCard: function(idpasien, idrawat, rows){
      var doc, pdf, arr;
      doc = coll.pasien.findOne(idpasien);
      pdf = pdfMake.createPdf({
        content: arr = [
          kop, {
            columns: [
              ['TANGGAL', 'NO. MR', 'NAMA PASIEN', 'TARIF', '\n\nPETUGAS'], [moment().format('DD/MM/YYYY'), zeros(doc.no_mr), _.startCase(doc.regis.nama_lengkap)].concat(
                slice$.call(rows.map(function(it){
                  return it[0] + " " + rupiah(it[1]);
                })), [
                  "Total: " + rupiah(_.sum(rows.map(function(it){
                    return it[1];
                  }))), "\n\n " + _.startCase(Meteor.user().username)
                ]
              ).map(function(it){
                return ": " + it;
              })
            ]
          }
        ]
      });
      return pdf.download(zeros(doc.no_mr) + "_payRegCard.pdf");
    },
    rekap: function(){
      var fields, source, rows, headers;
      fields = ['no_mr_nama_pasien', 'nama_obat', 'nobatch', 'jumlah', 'satuan', 'harga'];
      source = coll.rekap.find().fetch().map(function(i){
        return i.obat.map(function(j){
          return j.batches.map(function(k){
            var arr;
            return arr = [
              {
                text: i.idpasien
                  ? "" + coll.pasien.findOne(i.idpasien).no_mr.toString() + "\n" + coll.pasien.findOne(i.idpasien).regis.nama_lengkap + ""
                  : i.no_mr + "\n" + i.nama_pasien,
                rowSpan: _.sum(i.obat.map(function(it){
                  return it.batches.length;
                }))
              }, {
                text: look2('gudang', j.nama_obat).nama,
                rowSpan: j.batches.length
              }, k.nobatch, k.jumlah.toString(), function(){
                var obat;
                obat = coll.gudang.findOne(j.nama_obat);
                return look('satuan', obat.satuan).label;
              }(), rupiah(k.jumlah * function(){
                return coll.gudang.findOne(j.nama_obat).batch.find(function(i){
                  return i.nobatch === k.nobatch;
                }).jual;
              }())
            ];
          });
        });
      });
      rows = _.flattenDepth(source, 2);
      headers = [fields.map(function(it){
        return _.startCase(it);
      })];
      if (rows.length > 0) {
        Meteor.call('doneRekap');
        return pdfMake.createPdf({
          content: [{
            table: {
              body: slice$.call(headers).concat(slice$.call(rows))
            }
          }]
        }).download('cetak_rekap.pdf');
      }
    },
    icdx: function(pasien){
      var headers, rows, columns, arr, ref$;
      headers = ['tanggal', 'klinik', 'dokter', 'diagnosa', 'terapi', 'perawat', 'icd10'];
      rows = _.compact(pasien.rawat.map(function(i){
        var arr, ref$, this$ = this;
        if (i.icdx) {
          return arr = [
            hari(i.tanggal), look('klinik', i.klinik).label, _.startCase(Meteor.users.findOne(i.petugas.dokter).username), {
              ol: i.diagnosa
            }, {
              ul: (function(it){
                return it || ['-'];
              })((ref$ = i.tindakan) != null ? ref$.map(function(j){
                return _.startCase(look2('tarif', j.nama).nama);
              }) : void 8)
            }, _.startCase(Meteor.users.findOne(i.petugas.perawat).username), {
              ol: i.icdx
            }
          ];
        }
      }));
      columns = [['NO. MR', 'NAMA LENGKAP', 'TANGGAL LAHIR', 'JENIS KELAMIN'], arr = [pasien.no_mr.toString(), pasien.regis.nama_lengkap, hari(pasien.regis.tgl_lahir), ((ref$ = look('kelamin', pasien.regis.kelamin)) != null ? ref$.label : void 8) || '-']];
      return pdfMake.createPdf({
        content: arr = [
          kop, {
            text: 'FORM RESUME RAWAT JALAN',
            alignment: 'center'
          }, '\n\n', {
            columns: columns
          }, '\n\n', {
            table: {
              body: [headers.map(function(it){
                return _.startCase(it);
              })].concat(slice$.call(rows))
            }
          }
        ]
      }).download("icdX_" + pasien.no_mr + ".pdf");
    },
    csv: function(name, docs, head){
      var rows, headers, arr;
      rows = docs.map(function(it){
        return _.map(it, function(it){
          return it.toString();
        });
      });
      headers = [_.map(docs[0], function(val, key){
        return {
          text: key,
          bold: true,
          alignment: 'center'
        };
      })];
      if (rows.length > 0) {
        return pdfMake.createPdf({
          pageOrientation: 'landscape',
          content: arr = [
            kop, {
              text: name,
              alignment: 'center'
            }, '\n', {
              table: {
                body: slice$.call(headers).concat(slice$.call(rows))
              }
            }
          ]
        }).download(name + ".pdf");
      }
    },
    ebiling: function(doc){
      var pasien, that, rawat, dokter, ref$, title, sumber, profile, x, list, obats, petugas;
      pasien = coll.pasien.findOne(doc.idpasien);
      if (that = pasien) {
        rawat = _.last(that.rawat);
      }
      dokter = (ref$ = Meteor.users.findOne(rawat != null ? rawat.dokter : void 8)) != null ? ref$.username : void 8;
      title = "Billing Obat - " + ((pasien != null ? pasien.no_mr : void 8) || doc.no_mr) + " - " + ((pasien != null ? pasien.regis.nama_lengkap : void 8) || doc.nama_pasien) + " - " + hari(new Date()) + ".pdf";
      sumber = (that = (rawat != null ? rawat.klinik : void 8) || doc.poli)
        ? ['Poliklinik', ": " + look('klinik', that).label]
        : doc.ruangan ? ['Ruangan', ": " + doc.ruangan] : void 8;
      profile = {
        layout: 'noBorders',
        table: {
          widths: [0, 1, 2, 3].map(function(){
            return '*';
          }),
          body: x = [['Nama Lengkap', ": " + ((pasien != null ? pasien.regis.nama_lengkap : void 8) || doc.nama_pasien), 'No. MR', ": " + ((pasien != null ? pasien.no_mr : void 8) || doc.no_mr)], ['Cara Bayar', ": " + look('cara_bayar', (rawat != null ? rawat.cara_bayar : void 8) || doc.cara_bayar).label, 'Tanggal', ": " + hari(new Date())], slice$.call(sumber).concat(['Dokter', ": " + (dokter || doc.dokter)]), ['No. SEP', ": " + ((that = doc.no_sep) ? that : '-'), 'Jenis Pasien', ": " + look('rawat', doc.rawat || 1).label]]
        }
      };
      list = doc.obat.map(function(i){
        var barang, harga, satuan, jumlah;
        barang = look2('gudang', i.nama_obat);
        harga = barang.batch[0].jual;
        satuan = look('satuan', barang.satuan).label;
        jumlah = _.sumBy(i.batches, 'jumlah');
        return [look2('gudang', i.nama_obat).nama, jumlah, harga, jumlah * harga, satuan];
      });
      obats = {
        table: {
          widths: [0, 1, 2, 3].map(function(){
            return '*';
          }),
          body: x = [['Nama Obat', 'Jumlah', 'Harga', 'Total'].map(function(it){
            return {
              text: it,
              bold: true
            };
          })].concat(
            slice$.call(list.map(function(i){
              return [i[0], i[1] + " " + i[4], rupiah(i[2]), rupiah(i[3])];
            })), [[
              '', '', {
                text: 'Total',
                bold: true
              }, rupiah(_.sum(list.map(function(it){
                return it[3];
              })))
            ]]
          )
        }
      };
      petugas = {
        text: '\nPEKANBARU, ' + moment().format('D/MM/YYYY') + '\n\n\n\n\n' + _.startCase(Meteor.user().username),
        alignment: 'right'
      };
      return pdfMake.createPdf({
        pageOrientation: 'landscape',
        content: [kop, profile, '\n', obats, petugas],
        pageSize: 'A5'
      }).download(title);
    }
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"rights.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/rights.ls.js                                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var slice$ = [].slice;
if (Meteor.isClient) {
  this.rights = [
    {
      group: 'regis',
      list: ['regis']
    }, {
      group: 'bayar',
      list: ['bayar']
    }, {
      group: 'jalan',
      list: ['jalan', 'farmasi', 'amprah']
    }, {
      group: 'inap',
      list: ['inap', 'farmasi', 'amprah']
    }, {
      group: 'labor',
      list: ['labor']
    }, {
      group: 'radio',
      list: ['radio']
    }, {
      group: 'obat',
      list: ['obat', 'farmasi', 'amprah']
    }, {
      group: 'rekam',
      list: ['rekam', 'regis']
    }, {
      group: 'admisi',
      list: ['admisi']
    }, {
      group: 'manajemen',
      list: ['manajemen']
    }, {
      group: 'farmasi',
      list: ['farmasi', 'amprah']
    }, {
      group: 'depook',
      list: ['depook', 'farmasi', 'amprah']
    }
  ].map(function(i){
    return _.assign(i, {
      list: slice$.call(i.list).concat(['panduan'])
    });
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"selects.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// folder/selects.ls.js                                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
this.selects = {
  rawat: ['rawat_jalan', 'rawat_inap', 'igd'],
  pekerjaan: ['pns', 'swasta', 'wiraswasta', 'tni', 'polri', 'pensiunan', 'lainnya'],
  kelamin: ['laki_laki', 'perempuan'],
  agama: ['islam', 'katolik', 'protestan', 'buddha', 'hindu', 'kong_hu_chu'],
  pendidikan: ['sd', 'smp', 'sma', 'diploma', 's1', 's2', 's3', 'tidak_sekolah'],
  darah: ['a', 'b', 'ab', 'o'],
  cara_bayar: ['umum', 'bpjs', 'jamkesda_pekanbaru', 'jamkesda_kampar', 'lapas_dinsos', 'jampersal'],
  nikah: ['nikah', 'belum_nikah', 'janda', 'duda'],
  klinik: ['penyakit_dalam', 'gigi', 'kebidanan', 'tht', 'anak', 'saraf', 'mata', 'bedah', 'paru', 'kulit', 'fisioterapi', 'gizi', 'psikologi', 'tindakan', 'aps_labor', 'aps_radio'],
  karcis: [50, 30, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 0, 0],
  bentuk: ['butir', 'kapsul', 'tablet', 'sendok_makan', 'sendok_teh'],
  tipe_dokter: ['umum', 'spesialis'],
  rujukan: ['datang_sendiri', 'rs_lain', 'puskesmas', 'faskes_lainnya'],
  keluar: ['pulang', 'rujuk'],
  barang: ['generik', 'non_generik', 'obat_narkotika', 'bhp', 'obat_keras_tertentu'],
  satuan: ['botol', 'vial', 'ampul', 'pcs', 'sachet', 'tube', 'supp', 'tablet', 'minidose', 'pot', 'turbuhaler', 'kaplet', 'kapsul', 'bag', 'pen', 'rectal', 'flash', 'cream', 'nebu', 'galon', 'lembar', 'roll', 'liter', 'cup', 'pasang', 'bungkus', 'box'],
  anggaran: ['blud', 'apbd'],
  alias: ['tn', 'ny', 'nn', 'an', 'by'],
  tinggal: ['orang_tua', 'keluarga', 'sendiri', 'panti_asuhan'],
  cara_masuk: ['jalan', 'kursi_roda', 'lainnya'],
  imunisasi: ['dpt1', 'dpt2', 'dpt3', 'bcg', 'campak', 'polio1', 'polio2', 'polio3', 'hepatitis', 'mmr'],
  penyakit: ['asma', 'diabetes', 'hipertensi', 'cancer', 'anemia', 'jantung', 'lainnya'],
  kb: ['iud', 'susuk', 'suntik', 'pil', 'steril', 'vasectomi'],
  nyeri: ['ya', 'tidak'],
  frekuensi: ['sering', 'kadang', 'jarang'],
  karakteristik_nyeri: ['terbakar', 'tertindih', 'menyebar', 'tajam', 'tumpul', 'berdenyut', 'lainnya'],
  psikologi: ['tenang', 'marah', 'cemas', 'gelisah', 'takut', 'lainnya'],
  bab: ['asma', 'diare', 'konstipasi', 'colostomy'],
  bak: ['normal', 'retensia', 'inkontinesia', 'poliuria', 'disuria', 'lainnya'],
  bicara: ['normal', 'gangguan_bicara', 'lainnya'],
  hambatan: ['tidak_ada', 'pendengaran', 'cemas', 'motivasi_memburuk', 'bahasa', 'lainnya'],
  potensial: ['proses_penyakit', 'pengobatan', 'nutrisi', 'tindakan', 'lainnya'],
  yatidak: ['ya', 'tidak']
};
_.map(selects, function(i, j){
  return selects[j] = _.map(selects[j], function(m, n){
    return {
      value: n + 1,
      label: _.startCase(m)
    };
  });
});
selects.tindakan = function(){
  var ref$;
  if (Meteor.isClient) {
    return (ref$ = coll.tarif) != null ? ref$.find().fetch().map(function(it){
      return {
        value: it._id,
        label: it.nama
      };
    }) : void 8;
  }
};
selects.grupTindakan = function(){
  var a, ref$;
  if (Meteor.isClient) {
    a = (ref$ = coll.tarif) != null ? ref$.find().fetch().filter(function(it){
      var arr, this$ = this;
      return ands(arr = [
        it.first === 'jalan', it.second === _.snakeCase(function(it){
          return it.label;
        }(selects.klinik.find(function(it){
          var this$ = this;
          return it.value === function(it){
            return it.klinik;
          }(coll.pasien.findOne(m.route.param('idpasien')).rawat.find(function(it){
            return it.idrawat === state.docRawat;
          }));
        })))
      ]);
    }) : void 8;
    return _.uniqBy(a, 'third').map(function(it){
      return {
        value: it.third,
        label: _.startCase(it.third)
      };
    });
  }
};
selects.namaTindakan = function(name){
  var current, a, ref$;
  if (Meteor.isClient) {
    current = _.initial(name.split('.')).join('.') + ".grup";
    a = (ref$ = coll.tarif) != null ? ref$.find().fetch().filter(function(it){
      var arr, this$ = this;
      return ands(arr = [
        it.first === 'jalan', it.second === _.snakeCase(function(it){
          return it.label;
        }(selects.klinik.find(function(it){
          var this$ = this;
          return it.value === function(it){
            return it.klinik;
          }(coll.pasien.findOne(m.route.param('idpasien')).rawat.find(function(it){
            return it.idrawat === state.docRawat;
          }));
        }))), it.third === afState.form.formRawat[current]
      ]);
    }) : void 8;
    return a.map(function(it){
      return {
        value: it._id,
        label: _.startCase(it.nama)
      };
    });
  }
};
selects.gudang = function(){
  if (Meteor.isClient) {
    return coll.gudang.find().fetch().map(function(i){
      return {
        value: i._id,
        label: i.nama
      };
    });
  }
};
selects.obat = function(){
  var joined, a;
  if (Meteor.isClient) {
    joined = function(it){
      return _.join(it, ' ');
    };
    a = _.compact(coll.gudang.find().fetch().map(function(i){
      var ref$;
      if ((ref$ = i.jenis) === 1 || ref$ === 2 || ref$ === 3) {
        return {
          value: i._id,
          label: i.nama
        };
      }
    }));
    return _.sortBy(a, 'label');
  }
};
selects.bhp = function(){
  if (Meteor.isClient) {
    return _.compact(coll.gudang.find().fetch().map(function(i){
      if (i.jenis === 4) {
        return {
          value: i._id,
          label: i.nama
        };
      }
    }));
  }
};
selects.dokter = function(){
  var selPoli, a;
  if (Meteor.isClient) {
    selPoli = afState.form.formJalan['rawat.1.klinik'] - 1;
    a = Meteor.users.find().fetch().filter(function(i){
      var arr, ref$, this$ = this;
      return ands(arr = [
        (ref$ = _.split(i.username, '.')[0]) === 'dr' || ref$ === 'drg', _.includes((ref$ = i.roles) != null ? ref$.jalan : void 8, function(it){
          return it[selPoli];
        }(selects.klinik.map(function(it){
          return _.snakeCase(it.label);
        })))
      ]);
    });
    return a.map(function(it){
      return {
        value: it._id,
        label: _.startCase(it.username)
      };
    });
  }
};
selects.provinsi = function(){
  if (Meteor.isClient) {
    return coll.daerah.find().fetch().filter(function(it){
      return it.provinsi && !it.kabupaten;
    }).map(function(it){
      return {
        value: it.provinsi,
        label: _.startCase(it.daerah)
      };
    });
  }
};
selects.kabupaten = function(){
  var that;
  if (Meteor.isClient) {
    if (that = +afState.form.formRegis['regis.provinsi']) {
      return coll.daerah.find().fetch().filter(function(it){
        return it.provinsi === that && it.kabupaten;
      }).map(function(it){
        return {
          value: it.kabupaten,
          label: _.startCase(it.daerah)
        };
      });
    }
  }
};
selects.kecamatan = function(){
  var that;
  if (Meteor.isClient) {
    if (that = +afState.form.formRegis['regis.kabupaten']) {
      return coll.daerah.find().fetch().filter(function(it){
        return it.kabupaten === that && it.kecamatan;
      }).map(function(it){
        return {
          value: it.kecamatan,
          label: _.startCase(it.daerah)
        };
      });
    }
  }
};
selects.kelurahan = function(){
  var that;
  if (Meteor.isClient) {
    if (that = +afState.form.formRegis['regis.kecamatan']) {
      return coll.daerah.find().fetch().filter(function(it){
        return it.kecamatan === that && it.kelurahan;
      }).map(function(it){
        return {
          value: it.kelurahan,
          label: _.startCase(it.daerah)
        };
      });
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"both.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// both.ls.js                                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
['pasien', 'gudang', 'tarif', 'rekap', 'amprah', 'daerah'].map(function(i){
  coll[i] = new Meteor.Collection(i);
  coll[i].allow(_.merge.apply(_, ['insert', 'update'].map(function(it){
    var ref$;
    return ref$ = {}, ref$[it + ""] = function(){
      return true;
    }, ref$;
  })));
  if (Meteor.isClient) {
    return ['added', 'changed'].map(function(j){
      var ref$;
      return coll[i].find().observe((ref$ = {}, ref$[j + ""] = function(){
        return m.redraw();
      }, ref$));
    });
  }
});
if (Meteor.isClient) {
  schema.regis = {
    no_mr: {
      type: Number,
      min: 1,
      max: 999999
    },
    regis: {
      type: Object
    },
    'regis.alias': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.alias
      }
    },
    'regis.nama_lengkap': {
      type: String
    },
    'regis.no_ktp': {
      type: Number,
      max: 9999999999999999,
      optional: true
    },
    'regis.tgl_lahir': {
      type: Date,
      optional: true
    },
    'regis.tmpt_lahir': {
      type: String,
      optional: true
    },
    'regis.kelamin': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.kelamin
      }
    },
    'regis.agama': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.agama
      }
    },
    'regis.nikah': {
      type: Number,
      optional: true,
      label: 'Status Nikah',
      autoform: {
        options: selects.nikah
      }
    },
    'regis.pendidikan': {
      type: Number,
      optional: true,
      label: 'Pendidikan Terakhir',
      autoform: {
        options: selects.pendidikan
      }
    },
    'regis.darah': {
      type: Number,
      optional: true,
      label: 'Golongan Darah',
      autoform: {
        options: selects.darah
      }
    },
    'regis.pekerjaan': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.pekerjaan
      }
    },
    'regis.alamat': {
      type: String,
      optional: true
    },
    'regis.provinsi': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.provinsi
      }
    },
    'regis.kabupaten': {
      type: Number,
      optional: true,
      label: 'Kabupaten/Kota',
      autoform: {
        options: selects.kabupaten
      }
    },
    'regis.kecamatan': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.kecamatan
      }
    },
    'regis.kelurahan': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.kelurahan
      }
    },
    'regis.kontak': {
      type: String,
      optional: true
    },
    'regis.ayah': {
      type: String,
      optional: true
    },
    'regis.ibu': {
      type: String,
      optional: true
    },
    'regis.pasangan': {
      type: String,
      optional: true,
      label: 'Suami/Istri'
    },
    'regis.petugas': {
      type: Object,
      optional: true
    },
    'regis.petugas.regis': {
      type: String,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return Meteor.userId();
      }
    },
    'regis.tanggal': {
      type: Date,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return new Date();
      }
    }
  };
  schema.fisik = {
    tekanan_darah: {
      type: String,
      optional: true
    },
    nadi: {
      type: Number,
      optional: true,
      decimal: true
    },
    suhu: {
      type: Number,
      optional: true,
      decimal: true
    },
    pernapasan: {
      type: Number,
      optional: true,
      decimal: true
    },
    berat: {
      type: Number,
      optional: true,
      decimal: true
    },
    tinggi: {
      type: Number,
      optional: true,
      decimal: true
    },
    lila: {
      type: Number,
      optional: true,
      decimal: true
    }
  };
  schema.tindakan = {
    idtindakan: {
      type: String,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return randomId();
      }
    },
    grup: {
      type: String,
      autoform: {
        options: selects.grupTindakan
      }
    },
    nama: {
      type: String,
      autoform: {
        options: selects.namaTindakan
      }
    },
    harga: {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(name, doc){
        var string, sel, that;
        string = _.initial(name.split('.')).join('.') + ".nama";
        sel = doc.find(function(it){
          return it.name === string;
        });
        if (that = sel != null ? sel.value : void 8) {
          return look2('tarif', that).harga;
        }
      }
    }
  };
  schema.obat = {
    idobat: {
      type: String,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return randomId();
      }
    },
    nama: {
      type: String,
      label: 'Nama Obat',
      autoform: {
        options: selects.obat
      }
    },
    puyer: {
      type: String,
      optional: true
    },
    aturan: {
      type: Object,
      optional: true
    },
    'aturan.kali': {
      type: Number,
      label: 'Kali sehari',
      optional: true
    },
    'aturan.dosis': {
      type: String,
      optional: true
    },
    jumlah: {
      type: Number
    },
    harga: {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return null;
      }
    },
    subtotal: {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return null;
      }
    },
    hasil: {
      type: String,
      optional: true,
      autoform: {
        type: 'hidden'
      }
    }
  };
  schema.rawatRegis = {
    no_mr: {
      type: Number
    },
    rawat: {
      type: Array
    },
    'rawat.$': {
      type: Object
    },
    'rawat.$.idrawat': {
      type: String,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return randomId();
      }
    },
    'rawat.$.tanggal': {
      type: Date,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return new Date();
      }
    },
    'rawat.$.cara_bayar': {
      type: Number,
      autoform: {
        options: selects.cara_bayar
      }
    },
    'rawat.$.no_sep': {
      type: String,
      optional: true,
      label: 'No. SEP'
    },
    'rawat.$.klinik': {
      type: Number,
      label: 'Poliklinik',
      autoform: {
        options: selects.klinik
      }
    },
    'rawat.$.dokter': {
      type: String,
      autoform: {
        options: selects.dokter
      }
    },
    'rawat.$.billRegis': {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(name, docs){
        var sel;
        sel = docs.find(function(it){
          return 'cara_bayar' === _.last(it.name.split('.'));
        });
        if ((sel != null ? sel.value : void 8) === '1') {
          return 0;
        } else {
          return 1;
        }
      }
    },
    'rawat.$.nobill': {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return +_.toString(Date.now()).substr(7, 13);
      }
    },
    'rawat.$.status_bayar': {
      type: Boolean,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return false;
      }
    },
    'rawat.$.tinggal': {
      type: Number,
      optional: true,
      label: 'Pasien Tinggal',
      autoform: {
        options: selects.tinggal
      }
    },
    'rawat.$.tanggung_jawab': {
      type: String,
      optional: true
    }
  };
  schema.rawatNurse = {
    'rawat.$.anamesa_perawat': {
      type: String,
      autoform: {
        type: 'textarea'
      }
    },
    'rawat.$.fisik': {
      optional: true,
      type: new SimpleSchema(schema.fisik)
    },
    'rawat.$.cara_masuk': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.cara_masuk,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.rujukan': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.rujukan,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.sumber_rujukan': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat': {
      type: Object,
      optional: true
    },
    'rawat.$.riwayat.kesehatan': {
      type: Object,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.penyakit_sebelumnya': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.operasi': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.dirawat': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.pengobatan_dirumah': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.alergi': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.transfusi_darah': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.merokok': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.yatidak,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.riwayat.kesehatan.minuman_keras': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.yatidak,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.riwayat.kesehatan.obat_terlarang': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.yatidak,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.riwayat.kesehatan.imunisasi': {
      type: Array,
      optional: true
    },
    'rawat.$.riwayat.kesehatan.imunisasi.$': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.imunisasi,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.riwayat.keluarga': {
      type: Array,
      optional: true,
      label: 'Riwayat penyakit keluarga'
    },
    'rawat.$.riwayat.keluarga.$': {
      type: Object
    },
    'rawat.$.riwayat.keluarga.$.penyakit': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.penyakit,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.riwayat.keluarga.$.hubungan': {
      type: String,
      optional: true
    },
    'rawat.$.riwayat.reproduksi': {
      type: Object,
      optional: true
    },
    'rawat.$.riwayat.reproduksi.wanita_hamil': {
      type: Number,
      autoform: {
        options: selects.yatidak,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.riwayat.reproduksi.pria_prostat': {
      type: Number,
      autoform: {
        options: selects.yatidak,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.riwayat.reproduksi.keikutsertaan_kb': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.kb,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.kenyamanan': {
      type: Object,
      optional: true
    },
    'rawat.$.kenyamanan.nyeri': {
      type: Number,
      autoform: {
        options: selects.nyeri,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.kenyamanan.lokasi': {
      type: String,
      optional: true
    },
    'rawat.$.kenyamanan.frekuensi': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.frekuensi
      }
    },
    'rawat.$.kenyamanan.karakteristik_nyeri': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.karakteristik_nyeri,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.status_psikologi': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.psikologi,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.eliminasi': {
      type: Object,
      optional: true
    },
    'rawat.$.eliminasi.bab': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.bab,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.eliminasi.bak': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.bak,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.komunikasi': {
      type: Object,
      optional: true
    },
    'rawat.$.komunikasi.bicara': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.bicara,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.komunikasi.hambatan': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.hambatan,
        firstLabel: 'Pilih satu'
      }
    },
    'rawat.$.komunikasi.potensial': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.potensial,
        firstLabel: 'Pilih satu'
      }
    }
  };
  schema.rawatDoctor = {
    'rawat.$.anamesa_dokter': {
      type: String,
      autoform: {
        type: 'textarea'
      }
    },
    'rawat.$.diagnosa': {
      type: [String]
    },
    'rawat.$.planning': {
      type: String,
      optional: true,
      autoform: {
        type: 'textarea'
      }
    },
    'rawat.$.tindakan': {
      type: [new SimpleSchema(schema.tindakan)],
      optional: true
    },
    'rawat.$.obat': {
      type: [new SimpleSchema(schema.obat)],
      optional: true
    },
    'rawat.$.spm': {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return moment().diff(state.spm, 'minutes');
      }
    },
    'rawat.$.pindah': {
      type: Number,
      optional: true,
      label: 'Konsultasi',
      autoform: {
        options: selects.klinik
      }
    },
    'rawat.$.keluar': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.keluar
      }
    }
  };
  schema.rawatMR = {
    'rawat.$.icdX': {
      type: String
    }
  };
  schema.addRole = {
    roles: {
      type: String,
      optional: true,
      autoform: {
        type: 'select',
        options: function(){
          return ['admin', 'petugas', 'perawat', 'dokter', 'mr'].map(function(it){
            return {
              value: it,
              label: _.startCase(it)
            };
          });
        }
      }
    },
    group: {
      type: String,
      autoform: {
        type: 'select',
        options: function(){
          return modules.map(function(it){
            return {
              value: it.name,
              label: it.full
            };
          });
        }
      }
    },
    poli: {
      type: String,
      optional: true,
      autoform: {
        type: 'select',
        options: function(){
          return selects.klinik.map(function(it){
            return {
              label: it.label,
              value: _.snakeCase(it.label)
            };
          });
        }
      }
    }
  };
  schema.gudang = {
    idbarang: {
      type: String,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return randomId();
      }
    },
    jenis: {
      type: Number,
      autoform: {
        options: selects.barang
      }
    },
    nama: {
      type: String
    }
  };
  schema.farmasi = _.assign({}, schema.gudang, {
    kandungan: {
      type: String,
      optional: true
    },
    satuan: {
      type: Number,
      autoform: {
        options: selects.satuan
      }
    },
    batch: {
      type: Array
    },
    'batch.$': {
      type: Object
    },
    'batch.$.idbatch': {
      type: String,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return randomId();
      }
    },
    'batch.$.nobatch': {
      type: String
    },
    'batch.$.merek': {
      type: String,
      optional: true
    },
    'batch.$.masuk': {
      type: Date
    },
    'batch.$.kadaluarsa': {
      type: Date
    },
    'batch.$.digudang': {
      type: Number,
      label: 'Jumlah Barang'
    },
    'batch.$.awal': {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(name, docs){
        return function(it){
          return it != null ? it.value : void 8;
        }(docs.find(function(it){
          return 'digudang' === _.last(it.name.split('.'));
        }));
      }
    },
    'batch.$.diapotik': {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return 0;
      }
    },
    'batch.$.didepook': {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return 0;
      }
    },
    'batch.$.diretur': {
      type: Boolean,
      optional: true,
      autoform: {
        type: 'hidden'
      }
    },
    'batch.$.beli': {
      type: Number,
      decimal: true
    },
    'batch.$.jual': {
      type: Number,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(name, docs){
        return 1.25 * function(it){
          return it != null ? it.value : void 8;
        }(docs.find(function(it){
          return 'beli' === _.last(it.name.split('.'));
        }));
      }
    },
    'batch.$.suplier': {
      type: String,
      optional: true
    },
    'batch.$.returnable': {
      type: Number,
      optional: true,
      autoform: {
        options: selects.yatidak
      }
    },
    'batch.$.anggaran': {
      type: Number,
      autoform: {
        options: selects.anggaran
      }
    },
    'batch.$.pengadaan': {
      type: Number,
      optional: true
    }
  });
  schema.amprah = function(type){
    return {
      nama: {
        type: String,
        autoform: {
          type: 'select',
          options: selects[type]
        }
      },
      jumlah: {
        type: Number
      },
      tanggal_minta: {
        type: Date,
        autoform: {
          type: 'hidden'
        },
        autoValue: function(){
          return new Date();
        }
      },
      peminta: {
        type: String,
        autoform: {
          type: 'hidden'
        },
        autoValue: function(){
          return Meteor.userId();
        }
      },
      ruangan: {
        type: String,
        autoform: {
          type: 'hidden'
        },
        autoValue: function(){
          if (userGroup('jalan')) {
            return userRole();
          } else {
            return userGroup();
          }
        }
      }
    };
  };
  schema.responAmprah = {
    diserah: {
      type: Number
    },
    penyerah: {
      type: String,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return Meteor.userId();
      }
    },
    tanggal_serah: {
      type: Date,
      autoform: {
        type: 'hidden'
      },
      autoValue: function(){
        return new Date();
      }
    }
  };
  schema.bypassObat = {
    no_mr: {
      type: Number
    },
    nama_pasien: {
      type: String
    },
    rawat: {
      type: Number,
      label: 'Jenis Pasien',
      autoform: {
        options: selects.rawat
      }
    },
    cara_bayar: {
      type: Number,
      autoform: {
        options: selects.cara_bayar
      }
    },
    poli: {
      type: Number,
      optional: true,
      label: 'Poliklinik',
      autoform: {
        options: selects.klinik
      }
    },
    ruangan: {
      type: String,
      optional: true
    },
    dokter: {
      type: String
    },
    no_sep: {
      type: String,
      optional: true,
      label: 'No. SEP'
    },
    obat: {
      type: Array
    },
    'obat.$': {
      type: Object
    },
    'obat.$.nama': {
      type: String,
      label: 'Nama Obat',
      autoform: {
        options: selects.obat
      }
    },
    'obat.$.stok': {
      type: String,
      label: 'Info Stok',
      optional: true,
      autoform: {
        type: 'disabled'
      },
      autoValue: function(name, doc){
        var num, that, barang, arr, this$ = this;
        num = function(it){
          return it[1];
        }(name.split('.'));
        if (that = function(it){
          return it != null ? it.value : void 8;
        }(doc.find(function(it){
          return it.name === "obat." + num + ".nama";
        }))) {
          barang = coll.gudang.findOne(that);
          return _.join(arr = [
            "Apotik: " + _.sum(barang.batch.map(function(it){
              return it.diapotik;
            })), "Gudang: " + _.sum(barang.batch.map(function(it){
              return it.digudang;
            })), "OK: " + _.sum(barang.batch.map(function(it){
              return it.didepook;
            }))
          ]);
        }
      }
    },
    'obat.$.jumlah': {
      type: Number
    },
    bhp: {
      type: Array,
      optional: true
    },
    'bhp.$': {
      type: Object
    },
    'bhp.$.nama': {
      type: String,
      label: 'Nama bhp',
      autoform: {
        options: selects.bhp
      }
    },
    'bhp.$.stok': {
      type: String,
      label: 'Info Stok',
      optional: true,
      autoform: {
        type: 'disabled'
      },
      autoValue: function(name, doc){
        var num, that, barang, arr, this$ = this;
        num = function(it){
          return it[1];
        }(name.split('.'));
        if (that = function(it){
          return it != null ? it.value : void 8;
        }(doc.find(function(it){
          return it.name === "bhp." + num + ".nama";
        }))) {
          barang = coll.gudang.findOne(that);
          return _.join(arr = [
            "Apotik: " + _.sum(barang.batch.map(function(it){
              return it.diapotik;
            })), "Gudang: " + _.sum(barang.batch.map(function(it){
              return it.digudang;
            })), "OK: " + _.sum(barang.batch.map(function(it){
              return it.didepook;
            }))
          ]);
        }
      }
    },
    'bhp.$.jumlah': {
      type: Number
    }
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"client.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client.ls.js                                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var attr, loginComp, comp, slice$ = [].slice;
if (Meteor.isClient) {
  attr = {
    layout: {
      hospital: 'RSUD Petala Bumi',
      rights: function(){
        return modules.filter(function(it){
          var ref$;
          return in$(it.name, _.flatMap(_.keys((ref$ = Meteor.user()) != null ? ref$.roles : void 8), function(i){
            var this$ = this;
            return function(it){
              return it.list;
            }(rights.find(function(it){
              return it.group === i;
            }));
          }));
        });
      }
    },
    pageAccess: function(it){
      return in$(userGroup(), it);
    },
    pasien: {
      showForm: {
        patient: {
          onclick: function(){
            return state.showAddPatient = !state.showAddPatient;
          }
        },
        rawat: {
          onclick: function(){
            return state.showAddRawat = !state.showAddRawat;
          }
        }
      },
      headers: {
        patientList: ['tanggal_terakhir_rawat', 'no_mr', 'nama_lengkap', 'tanggal_lahir', 'tempat_lahir', 'poliklinik'],
        rawatFields: ['tanggal_berobat', 'poliklinik', 'cara_bayar', 'dokter', 'bayar_pendaftaran', 'status_bayar'],
        icdFields: ['nama_pasien', 'tanggal', 'klinik', 'dokter', 'diagnosis', 'nama_perawat', 'cek']
      },
      rawatDetails: function(doc){
        var arr, that, ref$, ref1$, ref2$, ref3$, ref4$, ref5$;
        return arr = [
          {
            head: 'Tanggal',
            cell: (that = doc.tanggal) ? hari(that) : void 8
          }, {
            head: 'Klinik',
            cell: look('klinik', doc.klinik).label
          }, {
            head: 'Cara Bayar',
            cell: look('cara_bayar', doc.cara_bayar).label
          }, {
            head: 'Anamesa Perawat',
            cell: doc != null ? doc.anamesa_perawat : void 8
          }, {
            head: 'Anamesa Dokter',
            cell: doc != null ? doc.anamesa_dokter : void 8
          }, {
            head: 'Diagnosa',
            cell: doc != null ? (ref$ = doc.diagnosa) != null ? ref$.join(', ') : void 8 : void 8
          }, {
            head: 'Planning',
            cell: doc != null ? doc.planning : void 8
          }
        ].concat(
          slice$.call([['tekanan_darah', 'mmHg'], ['nadi', 'pulse'], ['suhu', 'Celcius'], ['pernafasan', 'RR'], ['berat', 'Kg'], ['tinggi', 'cm'], ['lila', 'cm']].map(function(it){
            var that, ref$;
            return {
              head: "Fisik " + _.startCase(it[0]),
              cell: (that = (ref$ = doc.fisik) != null ? ref$[it[0]] : void 8) ? that + " " + ((it != null ? it[1] : void 8) || '') : void 8
            };
          })), slice$.call(['penyakit_sebelumnya', 'operasi', 'dirawat', 'pengobatan_dirumah', 'alergi', 'transfusi', 'darah', 'merokok', 'minuman_keras', 'obat_terlarang'].map(function(it){
            var ref$;
            return {
              head: "Riwayat " + _.startCase(it),
              cell: (ref$ = doc.riwayat) != null ? ref$[it] : void 8
            };
          })), slice$.call((((ref1$ = doc.riwayat) != null ? (ref2$ = ref1$.kesehatan) != null ? ref2$.imunisasi : void 8 : void 8) || []).map(function(i, j){
            var ref$;
            return {
              head: "Imunisasi " + (j + 1),
              cell: (ref$ = look('imunisasi', i)) != null ? ref$.label : void 8
            };
          })), slice$.call((((ref3$ = doc.riwayat) != null ? ref3$.keluarga : void 8) || []).map(function(i, j){
            var ref$;
            return {
              head: "Penyakit keluarga/hubungan " + (j + 1),
              cell: ((ref$ = look('penyakit', i.penyakit)) != null ? ref$.label : void 8) + "/" + i.hubungan
            };
          })), slice$.call(['wanita_hamil', 'pria_prostat', 'keikutsertaan_kb'].map(function(it){
            var that, ref$, ref1$, ref2$;
            return {
              head: "Reproduksi " + _.startCase(it),
              cell: (that = (ref$ = doc.riwayat) != null ? (ref1$ = ref$.reproduksi) != null ? ref1$[it] : void 8 : void 8) ? (ref2$ = look('yatidak', that)) != null ? ref2$.label : void 8 : void 8
            };
          })), slice$.call(['nyeri', 'frekuensi', 'karakteristik_nyeri'].map(function(it){
            var ref$, ref1$;
            return {
              head: "Kenyamanan " + _.startCase(it),
              cell: (ref$ = look(it, (ref1$ = doc.kenyamanan) != null ? ref1$[it] : void 8)) != null ? ref$.label : void 8
            };
          })), [
            {
              head: 'Kenyamanan Lokasi',
              cell: (ref4$ = doc.kenyamanan) != null ? ref4$.lokasi : void 8
            }, {
              head: 'Status Psikologi',
              cell: (that = doc.status_psikologi) ? (ref5$ = look('psikologi', that)) != null ? ref5$.label : void 8 : void 8
            }
          ], slice$.call(['bab', 'bak'].map(function(it){
            var that, ref$, ref1$;
            return {
              head: "Eliminasi " + _.startCase(it),
              cell: (that = (ref$ = doc.eliminasi) != null ? ref$[it] : void 8) ? (ref1$ = look(it, that)) != null ? ref1$.label : void 8 : void 8
            };
          })), slice$.call(['bicara', 'hambatan', 'potensial'].map(function(it){
            var that, ref$, ref1$;
            return {
              head: "Komunikasi " + _.startCase(it),
              cell: (that = (ref$ = doc.komunikasi) != null ? ref$[it] : void 8) ? (ref1$ = look(it, that)) != null ? ref1$.label : void 8 : void 8
            };
          }))
        );
      },
      currentPasien: function(){
        return look2('pasien', m.route.param('idpasien'));
      },
      ownKliniks: function(){
        var ref$, ref1$;
        return (ref$ = roles()) != null ? (ref1$ = ref$.jalan) != null ? ref1$.map(function(i){
          var this$ = this;
          return function(it){
            return it.value;
          }(selects.klinik.find(function(j){
            return i === _.snakeCase(j.label);
          }));
        }) : void 8 : void 8;
      },
      list: function(){
        var byName, byNoMR, this$ = this;
        byName = {
          'regis.nama_lengkap': {
            $options: 'i',
            $regex: ".*" + (state.search || '') + ".*"
          }
        };
        byNoMR = {
          no_mr: +(state.search || '')
        };
        return function(it){
          return it.fetch();
        }(coll.pasien.find({
          $or: [byName, byNoMR]
        }));
      },
      lastKlinik: function(arr){
        var ref$;
        if (!((ref$ = roles()) != null && ref$.jalan)) {
          return arr;
        } else if (isDr()) {
          return arr.filter(function(it){
            var list;
            return ands(list = [_.last(it.rawat).dokter === Meteor.userId(), _.last(it.rawat).anamesa_perawat, !_.last(it.rawat).anamesa_dokter]);
          });
        } else {
          return arr.filter(function(it){
            var list;
            return ands(list = [!_.last(it.rawat).anamesa_perawat, _.last(it.rawat).billRegis]);
          });
        }
      },
      patientHistory: function(){
        return _.reverse(_.sortBy(attr.pasien.currentPasien().rawat, 'tanggal'));
      },
      continuable: function(it){
        var arr, this$ = this;
        return ands(arr = [
          it.idrawat === function(it){
            return it.idrawat;
          }(_.last(attr.pasien.currentPasien().rawat)), currentRoute() === 'jalan', !isDr() ? !it.anamesa_perawat : true, isDr() ? it.anamesa_perawat : true, isDr() ? !it.anamesa_dokter : true, userRole() === _.snakeCase(look('klinik', it.klinik).label)
        ]);
      }
    },
    bayar: {
      header: ['no_mr', 'nama', 'tanggal', 'cara_bayar', 'klinik', 'aksi']
    },
    apotik: {
      header: ['no_mr', 'nama', 'tanggal', 'cara_bayar', 'klinik', 'aksi']
    },
    farmasi: {
      headers: {
        farmasi: ['jenis_barang', 'nama_barang', 'satuan', 'batas_depook', 'batas_apotik', 'batas_gudang', 'stok_diapotik', 'stok_didepook', 'stok_gudang'],
        rincian: ['nobatch', 'digudang', 'diapotik', 'didepook', 'masuk', 'kadaluarsa']
      },
      currentBarang: function(){
        return look2('gudang', m.route.param('idbarang'));
      },
      fieldSerah: ['nama_obat', 'jumlah_obat', 'aturan_kali', 'aturan_dosis'],
      search: function(it){
        return it.filter(function(i){
          return ors(['nama', 'kandungan'].map(function(j){
            return _.includes(_.lowerCase(i[j]), _.lowerCase(state.search));
          }));
        });
      }
    },
    manajemen: {
      headers: {
        tarif: ['nama', 'harga', 'first', 'second', 'third', 'active']
      },
      userList: function(){
        var arr, that;
        return pagins(_.reverse(ors(arr = [
          (that = state.search) ? _.concat(Meteor.users.find().fetch().filter(function(i){
            return ors(['keys', 'values'].map(function(j){
              return _.includes(_.join(_[j](i.roles)), that);
            }));
          }), Meteor.users.find({
            username: {
              $regex: ".*" + that + ".*"
            }
          }).fetch()) : void 8, Meteor.users.find().fetch()
        ])));
      }
    },
    amprah: {
      headers: {
        requests: ['tanggal_minta', 'ruangan', 'peminta', 'jumlah', 'nama_barang', 'penyerah', 'diserah', 'tanggal_serah']
      },
      amprahList: function(){
        return reverse(coll.amprah.find().fetch().filter(function(i){
          if (userGroup('jalan')) {
            return i.ruangan === userRole();
          } else if (!userGroup('farmasi')) {
            return i.ruangan === userGroup();
          } else {
            return i;
          }
        }));
      },
      buttonConds: function(obj){
        var arr;
        return ands(arr = [!obj.diserah, userGroup() === 'farmasi', !same([userGroup(), obj.ruangan])]);
      },
      reqForm: function(){
        var arr, ref$;
        return arr = [!userGroup('farmasi') ? 'bhp' : void 8, (ref$ = userGroup()) === 'obat' || ref$ === 'inap' || ref$ === 'depook' ? 'obat' : void 8];
      },
      available: function(){
        return _.sum(look2('gudang', state.modal.nama).batch.map(function(i){
          if (userGroup('farmasi')) {
            return i.digudang;
          } else {
            return i.diapotik;
          }
        }));
      }
    }
  };
  loginComp = function(){
    return {
      view: function(){
        var that;
        return m('.container', m('.columns', m('.column'), m('.column', m('.content', m('h4', 'Login')), m('form', {
          onsubmit: function(e){
            var vals;
            e.preventDefault();
            vals = _.initial(_.map(e.target, function(it){
              return it.value;
            }));
            return Meteor.loginWithPassword.apply(Meteor, slice$.call(vals).concat([function(err){
              if (err) {
                state.error = 'Salah Password atau Username';
                return m.redraw();
              } else {
                return m.route.set('/dashboard');
              }
            }]));
          }
        }, m('input.input', {
          type: 'text',
          placeholder: 'Username'
        }), m('input.input', {
          type: 'password',
          placeholder: 'Password'
        }), m('input.button.is-success', {
          type: 'submit',
          value: 'Login'
        }), (that = state.error) ? m('article.message', m('.message-header', m('p', that), m('button.delete', {
          'aria-label': 'delete'
        }))) : void 8)), m('.column')));
      }
    };
  };
  comp = {
    layout: function(comp){
      return {
        view: function(){
          var ref$, that;
          return m('div', m('link', {
            rel: 'stylesheet',
            href: 'https://use.fontawesome.com/releases/v5.8.1/css/all.css'
          }), m('nav.navbar.is-info', {
            role: 'navigation',
            'aria-label': 'main navigation'
          }, m('.navbar-brand', m('a.navbar-item', {
            href: '/dashboard',
            oncreate: m.route.link,
            style: "margin-left: 600px"
          }, _.upperCase(function(it){
            return (it != null ? it.full : void 8) || attr.layout.hospital;
          }(modules.find(function(it){
            return it.name === m.route.get().split('/')[1];
          }))))), m('.navbar-end', m('.navbar-item.has-dropdown', {
            'class': state.userMenu ? 'is-active' : void 8
          }, m('a.navbar-link', {
            onclick: function(){
              return state.userMenu = !state.userMenu;
            }
          }, m('span', m('i.fa.fa-user', {
            style: "padding-right: 5px"
          })), m('span', (ref$ = Meteor.user()) != null ? ref$.username : void 8)), m('.navbar-dropdown.is-right', function(){
            var logout, arr, ref$;
            logout = function(){
              var arr;
              return arr = [Meteor.logout(), m.route.set('/login'), m.redraw()];
            };
            arr = [
              (ref$ = Meteor.user()) != null && ref$.roles
                ? ["Grup: " + userGroup() + ", Peran: " + userRole(), 'user-tag']
                : [''], !Meteor.userId()
                ? [
                  'Login', 'sign-in-alt\'', function(){
                    return m.route.set('/login');
                  }
                ]
                : [
                  'Logout', 'sign-out-alt', function(){
                    return logout();
                  }
                ]
            ];
            return arr.map(function(i){
              return m('a.navbar-item', {
                onclick: i != null ? i[2] : void 8
              }, m('span.icon.is-small', m("i.fa.fa-" + (i != null ? i[1] : void 8), {
                style: "padding-right: 5px"
              })), m('span', i != null ? i[0] : void 8));
            });
          }())))), m('.columns', Meteor.userId() && m('.column.is-2', m('aside.menu.box', m('p.menu-label', 'Admin Menu'), m('ul.menu-list', attr.layout.rights().map(function(i){
            var ref$;
            return m('li', {
              oncreate: function(){
                var args, arr;
                args = {
                  name: i.name,
                  params: arr = [userGroup('jalan') ? userRole() : void 8, userGroup('jalan') ? isDr() : void 8]
                };
                return Meteor.call('notify', args, function(err, res){
                  if (res) {
                    state.notify[i.name] = res;
                  }
                  return m.redraw();
                });
              }
            }, m('a', {
              href: "/" + i.name,
              oncreate: m.route.link,
              'class': state.activeMenu === i.name ? 'is-active' : void 8
            }, m('span.icon.is-small', m("i.fa.fa-" + i.icon)), m('span', "    " + i.full + " " + (((ref$ = state.notify) != null ? ref$[i.name] : void 8) || ''))), attr.pageAccess(['regis', 'jalan']) ? 'regis' === currentRoute() ? m('ul', [['lama', 'Cari Pasien'], ['baru', 'Pasien Baru']].map(function(i){
              return m('li', m('a', {
                href: "/regis/" + i[0],
                oncreate: m.route.link
              }, _.startCase(i[1])));
            })) : void 8 : void 8, same(['manajemen', currentRoute(), i.name]) ? m('ul', ['users', 'imports'].map(function(i){
              return m('li', m('a', {
                href: "/manajemen/" + i,
                oncreate: m.route.link
              }, m('span', _.startCase(i))));
            })) : void 8);
          })))), m('.column', !Meteor.userId()
            ? m(loginComp)
            : (that = comp) ? m(that) : void 8)));
        }
      };
    },
    login: loginComp,
    welcome: function(){
      return {
        view: function(){
          return m('.content', {
            oncreate: function(){
              return Meteor.subscribe('users', function(err, res){
                return res && m.redraw();
              });
            }
          }, m('h1', "Panduan bagi " + function(it){
            return it != null ? it.full : void 8;
          }(modules.find(function(it){
            return it.name === userGroup();
          }))), m('div', guide(userGroup(), userRole())));
        }
      };
    },
    pasien: function(){
      return {
        view: function(){
          var arr, ref$, that, doc;
          if (attr.pageAccess(['regis', 'jalan'])) {
            return m('.content', {
              oncreate: Meteor.subscribe('coll', 'daerah', {
                $and: arr = [
                  {
                    provinsi: {
                      $exists: true
                    }
                  }, {
                    kabupaten: {
                      $exists: false
                    }
                  }
                ]
              })
            }, userGroup('regis') && userRole('admin') ? elem.report({
              title: 'Laporan Kunjungan Poliklinik',
              action: function(arg$){
                var start, end, type;
                start = arg$.start, end = arg$.end, type = arg$.type;
                if (start && end) {
                  return Meteor.call('visits', {
                    start: start,
                    end: end
                  }, function(err, res){
                    var that, title, obj;
                    if (that = res) {
                      title = "Kunjungan " + hari(start) + " - " + hari(end);
                      obj = {
                        Excel: csv,
                        Pdf: makePdf.csv
                      };
                      return obj[type](title, that);
                    }
                  });
                }
              }
            }) : void 8, (ref$ = m.route.param('jenis')) === 'baru' || ref$ === 'edit' ? m(autoForm({
              collection: coll.pasien,
              schema: new SimpleSchema(schema.regis),
              type: m.route.param('idpasien') ? 'update' : 'insert',
              id: 'formRegis',
              doc: attr.pasien.currentPasien(),
              buttonContent: 'Simpan',
              columns: 3,
              onchange: function(doc){
                var arr;
                if (doc.name === 'no_mr') {
                  return Meteor.call('onePasien', {
                    no_mr: doc.value
                  }, function(err, res){
                    if (res) {
                      afState.errors.formRegis = {
                        no_mr: 'Terpakai'
                      };
                    } else {
                      delete afState.errors.formRegis.no_mr;
                    }
                    return m.redraw();
                  });
                } else if (doc.name === 'regis.provinsi') {
                  return Meteor.subscribe('coll', 'daerah', {
                    $and: arr = [
                      {
                        provinsi: +doc.value
                      }, {
                        kabupaten: {
                          $exists: true
                        }
                      }
                    ]
                  });
                } else if (doc.name === 'regis.kabupaten') {
                  return Meteor.subscribe('coll', 'daerah', {
                    $and: arr = [
                      {
                        kabupaten: +doc.value
                      }, {
                        kecamatan: {
                          $exists: true
                        }
                      }
                    ]
                  });
                } else if (doc.name === 'regis.kecamatan') {
                  return Meteor.subscribe('coll', 'daerah', {
                    $and: arr = [
                      {
                        kecamatan: +doc.value
                      }, {
                        kelurahan: {
                          $exists: true
                        }
                      }
                    ]
                  });
                }
              },
              hooks: {
                before: function(doc, cb){
                  if ('edit' === m.route.param('jenis')) {
                    return cb(doc);
                  } else {
                    return Meteor.call('onePasien', {
                      no_mr: doc.no_mr
                    }, function(err, res){
                      if (!res) {
                        return cb(doc);
                      }
                    });
                  }
                },
                after: function(id){
                  state.showAddPatient = null;
                  if (id === 1) {
                    return m.route.set("/regis/lama/" + m.route.param('idpasien'));
                  } else {
                    return m.route.set("/regis/lama/" + id);
                  }
                }
              }
            })) : void 8, userRole('mr')
              ? m('div', m('br', {
                oncreate: function(){
                  Meteor.subscribe('coll', 'tarif');
                  return Meteor.subscribe('users');
                }
              }), m('form.columns', {
                onsubmit: function(e){
                  e.preventDefault();
                  return Meteor.call('onePasien', {
                    no_mr: e.target[0].value
                  }, function(err, res){
                    if (res) {
                      return makePdf.icdx(res);
                    }
                  });
                }
              }, m('.column', m('input.input', {
                type: 'text',
                placeholder: 'No MR Pasien'
              })), m('.column', m('input.button.is-primary', {
                type: 'submit',
                value: 'Unduh'
              }))), m('h4', 'Kodifikasi ICD 10'), m('table.table', {
                oncreate: function(){
                  return Meteor.subscribe('coll', 'pasien', {
                    rawat: {
                      $elemMatch: {
                        $and: [
                          {
                            'anamesa_dokter': {
                              $exists: true
                            }
                          }, {
                            icdx: {
                              $exists: false
                            }
                          }
                        ]
                      }
                    }
                  }, {
                    onReady: function(){
                      return m.redraw();
                    }
                  });
                }
              }, m('thead', attr.pasien.headers.icdFields.map(function(i){
                return m('th', _.startCase(i));
              })), m('tbody', coll.pasien.find().fetch().map(function(i){
                return i.rawat.map(function(j){
                  var arr, ref$;
                  if (j.anamesa_dokter && !j.icdx) {
                    return m('tr', tds(arr = [
                      i.regis.nama_lengkap, hari(j.tanggal), look('klinik', j.klinik).label, _.startCase(Meteor.users.findOne(j.petugas.dokter).username), (ref$ = j.diagnosa) != null ? ref$[0] : void 8, _.startCase(Meteor.users.findOne(j.petugas.perawat).username), m('.button.is-info', {
                        onclick: function(){
                          return state.modal = _.merge({
                            rawat: j,
                            pasien: i
                          });
                        }
                      }, m('span', 'Cek'))
                    ]));
                  }
                });
              }))), (that = state.modal) ? elem.modal({
                title: 'Kodekan ICD 10',
                content: m('div', m('table.table', that.rawat.diagnosa.map(function(i, j){
                  return m('tr', [m('td', j + 1), m('td', _.startCase(i))]);
                })), m(autoForm({
                  schema: new SimpleSchema({
                    icdx: {
                      type: [String]
                    }
                  }),
                  type: 'method',
                  meteormethod: 'icdX',
                  hooks: {
                    before: function(doc, cb){
                      return cb(_.merge({}, doc, {
                        idpasien: state.modal.pasien._id,
                        rawat: state.modal.rawat
                      }));
                    },
                    after: function(){
                      state.modal = null;
                      return m.redraw();
                    }
                  }
                })))
              }) : void 8)
              : (ref$ = m.route.get()) === '/regis/lama' || ref$ === '/jalan'
                ? m('div', userGroup('regis') && m('form', {
                  onsubmit: function(e){
                    var val, byName, byNoMR;
                    e.preventDefault();
                    val = e.target[0].value;
                    if (val.length > 3) {
                      byName = {
                        'regis.nama_lengkap': {
                          $options: '-i',
                          $regex: ".*" + val + ".*"
                        }
                      };
                      byNoMR = {
                        no_mr: +val
                      };
                      state.search = val;
                      return Meteor.subscribe('coll', 'pasien', {
                        $or: [byName, byNoMR]
                      }, {
                        limit: 30
                      }, {
                        onReady: function(){
                          return m.redraw();
                        }
                      });
                    }
                  }
                }, m('input.input', {
                  type: 'text',
                  placeholder: 'Pencarian'
                })), m('table.table', {
                  oncreate: function(){
                    return Meteor.subscribe('users', {
                      onReady: function(){
                        var onKlinik;
                        onKlinik = {
                          rawat: {
                            $elemMatch: {
                              klinik: {
                                $in: attr.pasien.ownKliniks()
                              }
                            }
                          }
                        };
                        return Meteor.subscribe('coll', 'pasien', onKlinik, {
                          onReady: function(){
                            return m.redraw();
                          }
                        });
                      }
                    });
                  }
                }, m('thead', m('tr', attr.pasien.headers.patientList.map(function(i){
                  return m('th', _.startCase(i));
                }))), m('tbody', attr.pasien.lastKlinik(attr.pasien.list()).map(function(i){
                  var rows, ref$, ref1$, ref2$;
                  rows = function(){
                    var arr, that, ref$, ref1$, ref2$;
                    if (i.no_mr) {
                      return m('tr', {
                        ondblclick: function(){
                          return m.route.set(m.route.get() + "/" + i._id);
                        }
                      }, tds(arr = [(that = (ref$ = i.rawat) != null ? (ref1$ = ref$[((ref2$ = i.rawat) != null ? ref2$.length : void 8) - 1]) != null ? ref1$.tanggal : void 8 : void 8) ? hari(that) : void 8, i.no_mr, i.regis.nama_lengkap, (that = i.regis.tgl_lahir) ? moment(that).format('D MMM YYYY') : void 8, (that = i.regis.tmpt_lahir) ? _.startCase(that) : void 8, _.startCase(userRole())]));
                    }
                  };
                  if (currentRoute() === 'jalan') {
                    if ((ref$ = i.rawat) != null && ((ref1$ = ref$.reverse()) != null && ((ref2$ = ref1$[0]) != null && ref2$.billRegis))) {
                      return rows();
                    }
                  } else {
                    return rows();
                  }
                }))), userGroup('jalan') && !isDr() ? m('div', [0, 1].map(function(){
                  return m('br');
                }), m('h4', 'Daftar Antrian Panggilan Dokter'), m('table.table', m('thead', m('tr', attr.pasien.headers.patientList.map(function(i){
                  return m('th', _.startCase(i));
                }))), m('tbody', coll.pasien.find().fetch().map(function(i){
                  var doneByNurse, arr;
                  doneByNurse = function(){
                    var arr;
                    return ands(arr = [i.rawat[i.rawat.length - 1].anamesa_perawat, !i.rawat[i.rawat.length - 1].anamesa_dokter]);
                  };
                  if (doneByNurse()) {
                    return m('tr', tds(arr = [hari(i.rawat[i.rawat.length - 1].tanggal), i.no_mr, i.regis.nama_lengkap, hari(i.regis.tgl_lahir), i.regis.tmpt_lahir, _.startCase(userRole())]));
                  }
                })))) : void 8)
                : m.route.param('idpasien')
                  ? m('div', {
                    oncreate: function(){
                      Meteor.subscribe('users');
                      Meteor.subscribe('coll', 'tarif');
                      Meteor.subscribe('coll', 'gudang');
                      return Meteor.subscribe('coll', 'pasien', {
                        _id: m.route.param('idpasien')
                      }, {
                        onReady: function(){
                          Meteor.call('regions', attr.pasien.currentPasien().regis, function(err, res){
                            state.regions = res;
                            return m.redraw();
                          });
                          return m.redraw();
                        }
                      });
                    }
                  }, [0, 1].map(function(){
                    return m('br');
                  }), m('.content', m('h4', 'Rincian Pasien')), (doc = attr.pasien.currentPasien()) ? m('div', m('table.table', _.chunk([
                    {
                      name: 'No. MR',
                      data: doc.no_mr
                    }, {
                      name: 'Nama Lengkap',
                      data: doc.regis.nama_lengkap
                    }, {
                      name: 'Tanggal Lahir',
                      data: hari(doc.regis.tgl_lahir)
                    }, {
                      name: 'Tempat Lahir',
                      data: doc.regis.tmpt_lahir
                    }, {
                      name: 'Jenis kelamin',
                      data: (that = doc.regis.kelamin) ? look('kelamin', that).label : void 8
                    }, {
                      name: 'Agama',
                      data: (that = doc.regis.agama) ? look('agama', that).label : void 8
                    }, {
                      name: 'Status nikah',
                      data: (that = doc.regis.nikah) ? look('nikah', that).label : void 8
                    }, {
                      name: 'Pendidikan terakhir',
                      data: (that = doc.regis.pendidikan) ? look('pendidikan', that).label : void 8
                    }, {
                      name: 'Golongan Darah',
                      data: (that = doc.regis.darah) ? look('darah', that).label : void 8
                    }, {
                      name: 'Pekerjaan terakhir',
                      data: (that = doc.regis.pekerjaan) ? look('pekerjaan', that).label : void 8
                    }, {
                      name: 'Tempat Tinggal',
                      data: doc.regis.alamat
                    }, {
                      name: 'Umur',
                      data: moment().diff(doc.regis.tgl_lahir, 'years') + ' tahun'
                    }, {
                      name: 'Nama Bapak',
                      data: doc.regis.ayah
                    }, {
                      name: 'Nama Ibu',
                      data: doc.regis.ibu
                    }, {
                      name: 'Suami/Istri',
                      data: doc.regis.pasangan
                    }, {
                      name: 'Kontak',
                      data: doc.regis.kontak
                    }, {
                      name: 'Provinsi',
                      data: (that = state.regions.provinsi) ? _.startCase(that) : void 8
                    }, {
                      name: 'Kabupaten',
                      data: (that = state.regions.kabupaten) ? _.startCase(that) : void 8
                    }, {
                      name: 'Kecamatan',
                      data: (that = state.regions.kecamatan) ? _.startCase(that) : void 8
                    }, {
                      name: 'Kelurahan',
                      data: (that = state.regions.kelurahan) ? _.startCase(that) : void 8
                    }
                  ], 4).map(function(i){
                    return m('tr', i.map(function(j){
                      return [m('th', j.name), m('td', j.data)];
                    }));
                  })), currentRoute() === 'regis' ? m('div', [
                    [
                      'Kartu', 'is-info', {
                        onclick: function(){
                          return makePdf.card(m.route.param('idpasien'));
                        }
                      }
                    ], [
                      'Consent', 'is-info', {
                        onclick: function(){
                          return makePdf.consent();
                        }
                      }
                    ], [
                      'Edit', 'is-warning', {
                        onclick: function(){
                          return m.route.set("/regis/edit/" + m.route.param('idpasien'));
                        }
                      }
                    ], ['+Rawat Jalan', 'is-success', attr.pasien.showForm.rawat]
                  ].map(function(i){
                    return m(".button." + i[1], _.merge({
                      style: 'margin-right: 10px'
                    }, i[2]), i[0]);
                  })) : void 8, state.showAddRawat && m(autoForm({
                    collection: coll.pasien,
                    schema: new SimpleSchema(schema.rawatRegis),
                    type: 'update-pushArray',
                    id: 'formJalan',
                    scope: 'rawat',
                    doc: attr.pasien.currentPasien(),
                    buttonContent: 'Simpan',
                    columns: 3,
                    hooks: {
                      before: function(doc, cb){
                        var ref$;
                        return cb({
                          rawat: [_.merge(doc.rawat[0], {
                            petugas: (ref$ = {}, ref$[userGroup() + ""] = Meteor.userId(), ref$)
                          })]
                        });
                      },
                      after: function(){
                        state.showAddRawat = false;
                        return m.redraw();
                      }
                    }
                  })), [0, 1].map(function(){
                    return m('br');
                  }), state.docRawat && m('.content', m('h4', 'Rincian Rawat'), m('table.table', attr.pasien.rawatDetails(attr.pasien.currentPasien().rawat.find(function(it){
                    return it.idrawat === state.docRawat;
                  })).map(function(i){
                    return i.cell && m('tr', [m('th', i.head), m('td', i.cell)]);
                  }))), state.docRawat && m(autoForm({
                    collection: coll.pasien,
                    schema: new SimpleSchema(isDr()
                      ? schema.rawatDoctor
                      : schema.rawatNurse),
                    type: 'update-pushArray',
                    id: 'formRawat',
                    scope: 'rawat',
                    doc: attr.pasien.currentPasien(),
                    buttonContent: 'Simpan',
                    columns: 3,
                    hooks: {
                      before: function(doc, cb){
                        var base, obj;
                        base = attr.pasien.currentPasien().rawat.find(function(it){
                          return it.idrawat === state.docRawat;
                        });
                        obj = {
                          idpasien: attr.pasien.currentPasien()._id,
                          idrawat: state.docRawat
                        };
                        return Meteor.call('rmRawat', obj, function(err, res){
                          var ref$, arr;
                          return res && cb(_.merge(doc.rawat[0], base, {
                            petugas: (ref$ = {}, ref$[(isDr() ? 'dokter' : 'perawat') + ""] = Meteor.userId(), ref$),
                            first: attr.pasien.currentPasien().rawat.length === 0 ? true : void 8,
                            status_bayar: ors(arr = [base.cara_bayar !== 1, ands(arr = [doc.rawat[0].obat, !doc.rawat[0].tindakan])]) ? true : void 8
                          }));
                        });
                      },
                      after: function(doc){
                        var that;
                        if (that = doc.pindah) {
                          coll.pasien.update({
                            _id: m.route.param('idpasien')
                          }, {
                            $push: {
                              rawat: {
                                klinik: that,
                                billRegis: doc.billRegis,
                                cara_bayar: doc.cara_bayar,
                                idrawat: randomId(),
                                petugas: doc.petugas,
                                tanggal: new Date()
                              }
                            }
                          });
                        }
                        state.docRawat = null;
                        return m.redraw();
                      }
                    }
                  })), m('table.table', m('thead', m('tr', attr.pasien.headers.rawatFields.map(function(i){
                    return m('th', _.startCase(i));
                  }), userGroup('jalan') ? m('th', 'Rincian') : void 8, userRole('admin') ? m('th', 'Hapus') : void 8)), m('tbody', pagins(attr.pasien.patientHistory().map(function(i){
                    var that, ref$, obj;
                    return m('tr', [hari(i.tanggal), look('klinik', i.klinik).label, look('cara_bayar', i.cara_bayar).label, (that = i.dokter) ? _.startCase((ref$ = Meteor.users.findOne(that)) != null ? ref$.username : void 8) : void 8].concat(
                      slice$.call(['billRegis', 'status_bayar'].map(function(it){
                        if (i[it]) {
                          return 'Sudah';
                        } else {
                          return 'Belum';
                        }
                      })), [
                        userGroup('jalan') ? m('button.button.is-info', {
                          onclick: function(){
                            if (attr.pasien.continuable(i)) {
                              return state.docRawat = i.idrawat;
                            } else {
                              return state.modal = i;
                            }
                          }
                        }, m('span', attr.pasien.continuable(i) ? 'Lanjutkan' : 'Lihat')) : void 8, userRole('admin') ? m('.button.is-danger', {
                          ondblclick: function(){}
                        }, obj = {
                          idpasien: m.route.param('idpasien'),
                          idrawat: i.idrawat
                        }, Meteor.call('rmRawat', obj, function(err, res){
                          return res && m.redraw();
                        }), m('span', 'Hapus')) : void 8
                      ]
                    ).map(function(j){
                      return m('td', j) || '-';
                    }));
                  }))), elem.pagins()), state.modal ? elem.modal({
                    title: 'Rincian rawat',
                    content: m('div', m('h1', attr.pasien.currentPasien().regis.nama_lengkap), m('table.table', attr.pasien.rawatDetails(state.modal).map(function(i){
                      return i.cell && m('tr', [m('th', i.head), m('td', i.cell)]);
                    })), (that = state.modal.tindakan) ? m('div', m('br'), m('table', m('tr', m('th', 'Tindakan'))), m('table.table', that != null ? that.map(function(i){
                      var arr;
                      return m('tr', tds(arr = [_.startCase(look2('tarif', i.nama).nama), rupiah(i.harga)]));
                    }) : void 8, m('tr', m('th', 'Total'), m('td', rupiah(_.sum(that.map(function(it){
                      return it.harga;
                    }))))))) : void 8, (that = state.modal.obat) ? m('div', m('br'), m('table', m('tr', m('th', 'Obat'))), m('table.table', that.map(function(i){
                      var arr, that, ref$, ref1$;
                      return m('tr', tds(arr = [_.startCase(look2('gudang', i.nama).nama), (that = (ref$ = i.aturan) != null ? ref$.kali : void 8) ? that + " kali" : void 8, (that = (ref1$ = i.aturan) != null ? ref1$.dosis : void 8) ? that + " dosis" : void 8, i.jumlah + " unit", (that = i.puyer) ? "puyer " + that : void 8]));
                    }))) : void 8),
                    action: function(){
                      state.docRawat = state.modal.idrawat;
                      state.spm = new Date();
                      return state.modal = null;
                    }
                  }) : void 8) : void 8)
                  : m('div'));
          }
        }
      };
    },
    regis: function(){
      return this.pasien;
    },
    jalan: function(){
      return this.pasien;
    },
    bayar: function(){
      return {
        view: function(){
          var that, tindakans, ref$, obats, ref1$, uraian, arr, ref2$, ref3$, params;
          if (attr.pageAccess(['bayar'])) {
            return m('.content', m('table.table', {
              oncreate: function(){
                Meteor.subscribe('coll', 'tarif');
                Meteor.subscribe('coll', 'gudang');
                return Meteor.subscribe('coll', 'pasien', {
                  rawat: {
                    $elemMatch: {
                      $or: [
                        {
                          billRegis: {
                            $ne: true
                          }
                        }, {
                          status_bayar: {
                            $ne: true
                          }
                        }
                      ]
                    }
                  }
                }, {
                  onReady: function(){
                    return m.redraw();
                  }
                });
              }
            }, m('thead', m('tr', attr.bayar.header.map(function(i){
              return m('th', _.startCase(i));
            }))), m('tbody', coll.pasien.find().fetch().map(function(i){
              return _.compact(i.rawat.map(function(j){
                var conds, arr;
                conds = ors(arr = [!j.billRegis, j.tindakan ? !j.status_bayar : void 8, j.obat && j.givenDrug && !j.paidDrug]);
                if (j.cara_bayar === 1) {
                  if (conds) {
                    return m('tr', [
                      i.no_mr, i.regis.nama_lengkap, hari(j.tanggal), look('cara_bayar', j.cara_bayar).label, look('klinik', j.klinik).label, m('a.button.is-success', {
                        onclick: function(){
                          return state.modal = _.merge(j, {
                            pasienId: i._id
                          });
                        }
                      }, m('span', 'Bayar'))
                    ].map(function(k){
                      return m('td', k);
                    }));
                  }
                }
              }));
            }))), (that = state.modal) ? (tindakans = (ref$ = state.modal.tindakan) != null ? ref$.map(function(it){
              var arr;
              return arr = [_.startCase(look2('tarif', it.nama).nama), it.harga];
            }) : void 8, obats = (ref1$ = state.modal.obat) != null ? ref1$.map(function(it){
              var arr;
              return arr = [
                _.startCase(look2('gudang', it.nama).nama) + " x " + it.jumlah, 1.25 * it.jumlah * _.max(look2('gudang', it.nama).batch.map(function(it){
                  return it.beli;
                }))
              ];
            }) : void 8, uraian = state.modal.givenDrug
              ? obats || []
              : arr = [ands(arr = [!((ref2$ = coll.pasien.findOne(state.modal.pasienId).rawat) != null && ((ref3$ = ref2$[0]) != null && ref3$.billRegis)), coll.pasien.findOne(state.modal.pasienId).regis.petugas]) ? ['Cetak Kartu', 10000] : void 8, !state.modal.billRegis ? ['Konsultasi Spesialis', look('karcis', that.klinik).label * 1000] : void 8].concat(slice$.call(tindakans || [])), params = ['pasienId', 'idrawat'].map(function(it){
              return state.modal[it];
            }), elem.modal({
              title: 'Sudah bayar?',
              content: m('table.table', uraian.map(function(i){
                if (i) {
                  return m('tr', [m('th', i[0]), m('td', rupiah(i[1]))]);
                }
              }), m('tr', [
                m('th', 'Total Biaya'), m('td', rupiah(_.sum(uraian.map(function(it){
                  return it != null ? it[1] : void 8;
                }))))
              ])),
              confirm: 'Sudah',
              action: function(){
                return Meteor.call('updateArrayElm', {
                  name: 'pasien',
                  recId: that.pasienId,
                  scope: 'rawat',
                  elmId: that.idrawat,
                  doc: _.merge(that, !that.billRegis
                    ? {
                      billRegis: true
                    }
                    : !that.status_bayar
                      ? {
                        status_bayar: true
                      }
                      : that.givenDrug ? {
                        paidDrug: true
                      } : void 8)
                }, function(err, res){
                  if (res) {
                    if (!state.modal.anamesa_perawat) {
                      makePdf.payRegCard.apply(makePdf, slice$.call(params).concat([_.compact(uraian)]));
                    } else {
                      makePdf.payRawat.apply(makePdf, slice$.call(params).concat([_.compact(uraian)]));
                    }
                    state.modal = null;
                    return m.redraw();
                  }
                });
              }
            })) : void 8, userRole('admin') ? elem.report({
              title: 'Laporan Pemasukan',
              action: function(arg$){
                var start, end, type;
                start = arg$.start, end = arg$.end, type = arg$.type;
                if (start && end) {
                  return Meteor.call('incomes', {
                    start: start,
                    end: end
                  }, function(err, res){
                    var that, title, header, obj;
                    if (that = res) {
                      title = "Pemasukan " + hari(start) + " - " + hari(end);
                      header = ['No. MR', 'Nama Pasien', 'Tanggal', 'Poliklinik', 'No. Karcis', 'Kartu', 'Karcis', 'Tindakan', 'Obat', 'Total'];
                      obj = {
                        Excel: csv,
                        Pdf: makePdf.csv
                      };
                      return obj[type](title, that, [header]);
                    }
                  });
                }
              }
            }) : void 8);
          }
        }
      };
    },
    obat: function(){
      return {
        view: function(){
          var that;
          if (attr.pageAccess(['obat', 'depook'])) {
            return m('.content', {
              oncreate: function(){
                return Meteor.subscribe('users');
              }
            }, m('h4', 'Apotik'), m('button.button.is-success', {
              onclick: function(){
                return state.showForm = !state.showForm;
              }
            }, m('span', 'Billing Obat')), state.showForm ? m(autoForm({
              schema: new SimpleSchema(schema.bypassObat),
              type: 'method',
              meteormethod: 'serahObat',
              id: 'formSerahObat',
              columns: 4,
              hooks: {
                before: function(doc, cb){
                  return cb(_.merge(doc, {
                    source: userGroup()
                  }));
                },
                after: function(doc){
                  coll.rekap.insert(doc[0]);
                  makePdf.ebiling(doc[0]);
                  afState.form = {};
                  afState.arrLen = {};
                  return m.redraw();
                }
              }
            })) : void 8, m('table.table', {
              oncreate: function(){
                Meteor.subscribe('coll', 'gudang');
                Meteor.subscribe('coll', 'rekap', {
                  printed: {
                    $exists: false
                  }
                });
                return Meteor.subscribe('coll', 'pasien', {
                  rawat: {
                    $elemMatch: {
                      obat: {
                        $elemMatch: {
                          hasil: {
                            $exists: false
                          }
                        }
                      }
                    }
                  }
                }, {
                  onReady: function(){
                    return m.redraw();
                  }
                });
              }
            }, m('thead', attr.apotik.header.map(function(i){
              return m('th', _.startCase(i));
            })), m('tbody', coll.pasien.find().fetch().map(function(i){
              return i.rawat.map(function(j){
                var okay, arr;
                okay = function(){
                  var arr;
                  return ands(arr = [
                    j.obat, j.cara_bayar === 1
                      ? j.status_bayar && !j.givenDrug
                      : !j.givenDrug
                  ]);
                };
                return okay() && m('tr', tds(arr = [
                  i.no_mr, i.regis.nama_lengkap, hari(j.tanggal), look('cara_bayar', j.cara_bayar).label, look('klinik', j.klinik).label, m('.button.is-success', {
                    onclick: function(){
                      return state.modal = _.merge(j, i);
                    }
                  }, m('span', 'Serah'))
                ]));
              });
            }))), (that = state.modal) ? elem.modal({
              title: 'Serahkan Obat?',
              content: m('table.table', m('tr', attr.farmasi.fieldSerah.map(function(i){
                return m('th', _.startCase(i));
              })), that.obat.map(function(i){
                var arr, that, ref$, ref1$;
                return m('tr', tds(arr = [look2('gudang', i.nama).nama, i.jumlah + " unit", (that = (ref$ = i.aturan) != null ? ref$.kali : void 8) ? that + " kali" : void 8, (that = (ref1$ = i.aturan) != null ? ref1$.dosis : void 8) ? that + " unit" : void 8]));
              })),
              confirm: 'Serahkan',
              action: function(){
                var doc;
                doc = _.assign(state.modal, {
                  source: userGroup()
                });
                return Meteor.call('serahObat', doc, function(err, res){
                  if (res) {
                    coll.pasien.update(state.modal._id, {
                      $set: {
                        rawat: state.modal.rawat.map(function(i){
                          if (i.idrawat !== state.modal.idrawat) {
                            return i;
                          } else {
                            return _.assign({
                              givenDrug: true
                            }, _.omit(i, ['_id', 'no_mr', 'regis']));
                          }
                        })
                      }
                    });
                    res.map(function(it){
                      coll.rekap.insert(_.merge(it, {
                        idrawat: state.modal.idrawat,
                        tanggal: new Date()
                      }));
                      return makePdf.ebiling(it);
                    });
                    state.modal = null;
                    return m.redraw();
                  }
                });
              }
            }) : void 8, [0, 1].map(function(){
              return m('br');
            }), m('.button.is-warning', {
              onclick: function(){
                return Meteor.subscribe('coll', 'pasien', {
                  _id: {
                    $in: coll.rekap.find().fetch().map(function(it){
                      return it.idpasien;
                    })
                  }
                }, {
                  onReady: function(){
                    return makePdf.rekap();
                  }
                });
              }
            }, m('span', "Cetak " + coll.rekap.find().fetch().length + " Rekap")), [0, 1, 2].map(function(){
              return m('br');
            }), userRole('admin') ? elem.report({
              title: 'Laporan Pengeluaran Obat',
              action: function(arg$){
                var start, end, type;
                start = arg$.start, end = arg$.end, type = arg$.type;
                if (start && end) {
                  return Meteor.call('dispenses', {
                    start: start,
                    end: end,
                    source: userGroup()
                  }, function(err, res){
                    var opts, title;
                    if (res) {
                      opts = {
                        obat: 'Apotik',
                        farmasi: 'Gudang Farmasi',
                        depook: 'Depo OK'
                      };
                      title = "Pengeluaran Obat " + opts[userGroup()] + " " + hari(start) + "-" + hari(end);
                      return makePdf.csv(title, res);
                    }
                  });
                }
              }
            }) : void 8);
          }
        }
      };
    },
    depook: function(){
      return this.obat;
    },
    farmasi: function(){
      return {
        view: function(){
          var ref$, jumlah, arr, that, ref1$, ref2$, ref3$, ref4$, ref5$, ref6$, ref7$, ref8$, this$ = this;
          if (attr.pageAccess(['jalan', 'inap', 'obat', 'farmasi', 'depook'])) {
            return m('.content', {
              oncreate: function(){
                return state.showForm = {
                  batch: false
                };
              }
            }, userGroup('farmasi') && userRole('admin') ? elem.report({
              title: 'Laporan Stok Barang',
              action: function(arg$){
                var start, end, type;
                start = arg$.start, end = arg$.end, type = arg$.type;
                if (start && end) {
                  return Meteor.call('stocks', {
                    start: start,
                    end: end
                  }, function(err, res){
                    var that, title, obj;
                    if (that = res) {
                      title = "Stok Barang Farmasi " + hari(start) + " - " + hari(end);
                      obj = {
                        Excel: csv,
                        Pdf: makePdf.csv
                      };
                      return obj[type](title, that);
                    }
                  });
                }
              }
            }) : void 8, !m.route.param('idbarang')
              ? m('div', (ref$ = userGroup()) === 'obat' || ref$ === 'farmasi' || ref$ === 'depook' ? (jumlah = function(it){
                return it.fetch().length;
              }(coll.gudang.find({
                $or: arr = [
                  {
                    'treshold.apotik': {
                      $exists: false
                    }
                  }, {
                    'treshold.gudang': {
                      $exists: false
                    }
                  }
                ]
              })), jumlah > 0 ? m('.notification.is-warning', m('button.delete'), m('b', "Terdapat " + jumlah + " barang yang belum diberi ambang batas")) : void 8) : void 8, function(){
                var sumA, this$ = this;
                sumA = function(it){
                  return it.length;
                }(coll.gudang.find().fetch().filter(function(i){
                  var arr;
                  if (i.treshold) {
                    return ors(arr = [i.treshold.depook > _.sumBy(i.batch, 'didepook'), i.treshold.apotik > _.sumBy(i.batch, 'diapotik'), i.treshold.gudang > _.sumBy(i.batch, 'digudang')]);
                  }
                }));
                if (sumA > 0) {
                  return m('.notification.is-danger', m('button.delete'), m('b', "Terdapat " + sumA + " barang yang stoknya dibawah batas"));
                }
              }(), m('form', {
                onsubmit: function(e){
                  e.preventDefault();
                  return state.search = _.lowerCase(e.target[0].value);
                }
              }, m('input.input', {
                type: 'text',
                placeholder: 'Pencarian'
              })), m('br'), (ref$ = roles()) != null && ref$.farmasi ? m('button.button.is-success', {
                onclick: function(){
                  return state.showFormFarmasi = !state.showFormFarmasi;
                }
              }, m('span', '+Tambah Jenis Barang')) : void 8, state.showFormFarmasi ? (m('h4', 'Form Barang Farmasi'), m(autoForm({
                collection: coll.gudang,
                schema: new SimpleSchema(schema.farmasi),
                type: 'insert',
                id: 'formFarmasi',
                buttonContent: 'Simpan',
                columns: 3,
                hooks: {
                  after: function(){
                    state.showFormFarmasi = null;
                    return m.redraw();
                  }
                }
              }))) : void 8, m('table.table', {
                oncreate: function(){
                  return Meteor.subscribe('coll', 'gudang', {
                    onReady: function(){
                      return m.redraw();
                    }
                  });
                }
              }, m('thead', m('tr', attr.farmasi.headers.farmasi.map(function(i){
                return m('th', _.startCase(i));
              }))), m('tbody', attr.farmasi.search(coll.gudang.find().fetch()).map(function(i){
                var that, ref$, ref1$, ref2$, ref3$, ref4$;
                return m('tr', {
                  'class': (that = i.treshold) ? that.apotik > _.sumBy(i.batch, 'diapotik') ? 'has-text-danger' : void 8 : void 8,
                  ondblclick: function(){
                    return m.route.set("/farmasi/" + i._id);
                  }
                }, m('td', (ref$ = look('barang', i.jenis)) != null ? ref$.label : void 8), m('td', i.nama), m('td', (ref1$ = look('satuan', i.satuan)) != null ? ref1$.label : void 8), m('td', (ref2$ = i.treshold) != null ? ref2$.depook : void 8), m('td', (ref3$ = i.treshold) != null ? ref3$.apotik : void 8), m('td', (ref4$ = i.treshold) != null ? ref4$.gudang : void 8), ['diapotik', 'didepook', 'digudang'].map(function(j){
                  return m('td', _.sumBy(i.batch, j));
                }));
              }))))
              : m('div', {
                oncreate: function(){
                  return Meteor.subscribe('coll', 'gudang', {
                    _id: m.route.param('idbarang')
                  }, {
                    onReady: function(){
                      return m.redraw();
                    }
                  });
                }
              }, m('h4', 'Rincian Obat'), m('table.table', (that = attr.farmasi.currentBarang()) ? _.chunk([
                {
                  name: 'Nama Barang',
                  cell: that.nama
                }, {
                  name: 'Jenis Barang',
                  cell: look('barang', that.jenis).label
                }, {
                  name: 'Kandungan',
                  cell: that.kandungan
                }, {
                  name: 'Satuan',
                  cell: look('satuan', that.satuan).label
                }
              ], 2).map(function(i){
                return m('tr', i.map(function(j){
                  return [m('th', j.name), m('td', j.cell)];
                }));
              }) : void 8, m('tr', {
                ondblclick: function(){
                  var ref$;
                  if ((ref$ = userGroup()) === 'obat' || ref$ === 'farmasi' || ref$ === 'depook') {
                    return state.modal = attr.farmasi.currentBarang();
                  }
                }
              }, m('th', 'Batas min. Apotik'), m('td', that != null ? (ref1$ = that.treshold) != null ? ref1$.apotik : void 8 : void 8), m('th', 'Batas min. Depo OK'), m('td', that != null ? (ref2$ = that.treshold) != null ? ref2$.depook : void 8 : void 8), m('th', 'Batas min. Gudang'), m('td', that != null ? (ref3$ = that.treshold) != null ? ref3$.gudang : void 8 : void 8))), ((ref4$ = state.modal) != null ? ref4$._id : void 8) && elem.modal({
                title: 'Tetapkan Batas min.',
                content: m('div', m('h4', 'Berapa batas minimum yang seharusnya tersedia?'), m('form', {
                  onsubmit: function(e){
                    var opts, ref$;
                    e.preventDefault();
                    opts = {
                      obat: 'apotik',
                      farmasi: 'gudang',
                      depook: 'depook'
                    };
                    coll.gudang.update(state.modal._id, {
                      $set: {
                        treshold: _.merge(attr.farmasi.currentBarang().treshold, (ref$ = {}, ref$[opts[userGroup()] + ""] = +e.target[0].value, ref$))
                      }
                    });
                    state.modal = null;
                    return m.redraw();
                  }
                }, m('.field', m('.control', m('input.input', {
                  type: 'number',
                  placeholder: 'Minimum'
                }))), m('.field', m('.control', m('input.button.is-success', {
                  type: 'submit',
                  value: 'Tetapkan'
                })))))
              }), (ref5$ = roles()) != null && ref5$.farmasi ? m('.button.is-warning', {
                onclick: function(){
                  return state.showForm.batch = !state.showForm.batch;
                }
              }, m('span', '+Tambahkan Batch')) : void 8, (ref6$ = state.showForm) != null && ref6$.batch ? m(autoForm({
                collection: coll.gudang,
                schema: new SimpleSchema(schema.farmasi),
                type: 'update-pushArray',
                scope: 'batch',
                doc: attr.farmasi.currentBarang(),
                id: 'formTambahObat',
                buttonContent: 'Tambahkan',
                columns: 3,
                hooks: {
                  after: function(){
                    Meteor.call('sortByDate', {
                      idbarang: m.route.param('idbarang')
                    });
                    state.showForm = null;
                    return m.redraw();
                  }
                }
              })) : void 8, m('table.table', m('thead', attr.farmasi.headers.rincian.map(function(i){
                return m('th', _.startCase(i));
              })), m('tbody', (ref7$ = attr.farmasi.currentBarang()) != null ? ref7$.batch.map(function(i){
                return m('tr', {
                  ondblclick: function(){
                    state.modal = i;
                    return m.redraw();
                  }
                }, tds([i.nobatch, i.digudang, i.diapotik, i.didepook, hari(i.masuk), hari(i.kadaluarsa)]));
              }) : void 8)), (ref8$ = state.modal) != null && ref8$.idbatch ? elem.modal({
                title: 'Rincian Batch',
                content: m('table', function(){
                  var contents, ref$, ref1$, ref2$, ref3$, ref4$, ref5$, ref6$;
                  contents = [['No. Batch', state.modal.nobatch], ['Merek', (ref$ = state.modal) != null ? ref$.merek : void 8], ['Tanggal Masuk', hari(state.modal.masuk)], ['Tanggal Kadaluarsa', hari(state.modal.kadaluarsa)], ['Stok di Gudang', state.modal.digudang + " unit"], ['Harga Beli', rupiah((ref1$ = state.modal) != null ? ref1$.beli : void 8)], ['Harga Jual', rupiah((ref2$ = state.modal) != null ? ref2$.jual : void 8)], ['Nama Supplier', (ref3$ = state.modal) != null ? ref3$.suplier : void 8], ['Bisa diretur', (ref4$ = state.modal) != null && ref4$.returnable ? 'Bisa' : 'Tidak'], ['Sumber Anggaran', look('anggaran', (ref5$ = state.modal) != null ? ref5$.anggaran : void 8).label], ['Tahun Pengadaan', (ref6$ = state.modal) != null ? ref6$.pengadaan : void 8]];
                  return contents.map(function(i){
                    return m('tr', m('td', m('b', i[0])), m('td', i != null ? i[1] : void 8));
                  });
                }())
              }) : void 8));
          }
        }
      };
    },
    manajemen: function(){
      return {
        view: function(){
          var ref$, ref1$;
          if (attr.pageAccess(['manajemen'])) {
            if ('users' === m.route.param('subroute')) {
              return m('.content', {
                oncreate: function(){
                  return Meteor.subscribe('users', {
                    onReady: function(){
                      return m.redraw();
                    }
                  });
                }
              }, m('h1', 'Manajemen Pengguna'), m('h4', 'Tambahkan pengguna baru'), m('form', {
                onsubmit: function(e){
                  var vals;
                  e.preventDefault();
                  vals = _.initial(_.map(e.target, function(it){
                    return it.value;
                  }));
                  if (vals[1] === vals[2]) {
                    return Meteor.call('newUser', {
                      username: vals[0],
                      password: vals[1]
                    }, function(err, res){
                      return res && m.redraw();
                    });
                  }
                }
              }, m('.columns', [
                {
                  type: 'text',
                  place: 'Username'
                }, {
                  type: 'password',
                  place: 'Password'
                }, {
                  type: 'password',
                  place: 'Ulangi password'
                }
              ].map(function(i){
                return m('.column', m('.field', m('.control', m('input.input', {
                  type: i.type,
                  placeholder: i.place
                }))));
              })), m('.field', m('.control', m('input.button.is-success', {
                type: 'submit',
                value: 'Daftarkan'
              })))), [0, 1].map(function(){
                return m('br');
              }), m('h4', 'Daftar Pengguna Sistem'), m('form', {
                onkeypress: function(e){
                  return state.search = e.target.value;
                }
              }, m('input.input', {
                type: 'text',
                placeholder: 'Pencarian'
              })), m('table.table', {
                oncreate: function(){
                  return Meteor.subscribe('users', {
                    onReady: function(){
                      return m.redraw();
                    }
                  });
                }
              }, m('thead', m('tr', ['Username', 'Peran', 'Profil', 'Aksi'].map(function(i){
                return m('th', i);
              }))), m('tbody', attr.manajemen.userList().map(function(i){
                return m('tr', m('td', i.username), m('td', {
                  onclick: function(){
                    return state.modal = _.merge(i, {
                      type: 'role'
                    });
                  }
                }, m('span', JSON.stringify(i.roles))), m('td', m('button.button.is-info', {
                  onclick: function(){
                    return state.modal = _.merge(i, {
                      type: 'profil'
                    });
                  }
                }, m('span', 'Profil'))), m('td', m('.button.is-danger', {
                  onclick: function(){
                    return Meteor.call('rmRole', {
                      id: i._id
                    });
                  }
                }, m('span', 'Reset'))));
              })), ((ref$ = state.modal) != null ? ref$.type : void 8) === 'role'
                ? elem.modal({
                  title: 'Berikan Peranan',
                  content: m(autoForm({
                    schema: new SimpleSchema(schema.addRole),
                    type: 'method',
                    meteormethod: 'addRole',
                    id: 'formAddRole',
                    buttonContent: 'Beri',
                    columns: 3,
                    hooks: {
                      before: function(doc, cb){
                        return cb(_.merge(doc, {
                          id: state.modal._id
                        }));
                      },
                      after: function(){
                        state.modal = null;
                        return m.redraw();
                      }
                    }
                  }))
                })
                : ((ref1$ = state.modal) != null ? ref1$.type : void 8) === 'profil' ? elem.modal({
                  title: 'Profil Akun',
                  content: m('div', m('table', ['nama_lengkap', 'nik'].map(function(i){
                    var ref$, ref1$;
                    return m('tr', m('th', _.startCase(i)), m('td', (ref$ = Meteor.users.findOne(state.modal._id)) != null ? (ref1$ = ref$.profile) != null ? ref1$[i] : void 8 : void 8));
                  })), m(autoForm({
                    schema: new SimpleSchema({
                      nama_lengkap: {
                        type: String
                      },
                      nik: {
                        type: Number
                      }
                    }),
                    type: 'method',
                    meteormethod: 'userProfile',
                    id: 'userProfile',
                    hooks: {
                      before: function(doc, cb){
                        return cb(_.merge(doc, {
                          id: state.modal._id
                        }));
                      },
                      after: function(){
                        state.modal = null;
                        return m.redraw();
                      }
                    }
                  })))
                }) : void 8), elem.pagins());
            } else if ('imports' === m.route.param('subroute')) {
              return m('.content', m('h1', 'Importer Data'), m('h4', 'Unggah data csv'), m('.file', m('label.file-label', m('input.file-input', {
                type: 'file',
                name: 'csv',
                onchange: function(e){
                  return Papa.parse(e.target.files[0], {
                    header: true,
                    step: function(result){
                      var data, sel, opt, that;
                      data = result.data[0];
                      if (data.no_mr) {
                        sel = {
                          no_mr: +data.no_mr
                        };
                        opt = {
                          regis: {
                            nama_lengkap: _.startCase(_.lowerCase(data.nama_lengkap)),
                            alamat: (that = data.alamat) ? _.startCase(_.lowerCase(that)) : void 8,
                            agama: (that = data.agama) ? +that : void 8,
                            ayah: (that = data.ayah) ? _.startCase(_.lowerCase(that)) : void 8,
                            nikah: (that = data.nikah) ? +that : void 8,
                            pekerjaan: (that = data.pekerjaan) ? +that : void 8,
                            pendidikan: (that = data.pendidikan) ? +that : void 8,
                            tgl_lahir: (that = data.tgl_lahir) ? (that = Date.parse(that)) ? new Date(that) : void 8 : void 8,
                            tmpt_lahir: (that = data.tmpt_lahir) ? _.startCase(_.lowerCase(that)) : void 8
                          }
                        };
                        Meteor.call('import', 'pasien', {
                          selector: sel,
                          modifier: opt
                        });
                      }
                      if (data.digudang) {
                        sel = {
                          nama: data.nama
                        };
                        opt = {
                          jenis: +data.jenis,
                          satuan: +data.satuan,
                          nobatch: (that = data.nobatch) ? that : void 8,
                          merek: (that = data.merek) ? that : void 8,
                          masuk: (that = data.masuk) ? new Date(that) : void 8,
                          kadaluarsa: (that = data.kadaluarsa) ? new Date(that) : void 8,
                          digudang: +data.digudang,
                          diapotik: (that = data.diapotik) ? +that : void 8,
                          diretur: (that = data.diretur) ? +that : void 8,
                          beli: (that = data.beli) ? +that : void 8,
                          jual: (that = data.jual) ? +that : void 8,
                          suplier: (that = data.suplier) ? that : void 8,
                          returnable: (that = data.returnable) ? !!that : void 8,
                          anggaran: (that = data.anggaran) ? +that : void 8,
                          pengadaan: (that = data.pengadaan) ? that : void 8,
                          no_spk: (that = data.no_spk) ? that : void 8,
                          tanggal_spk: (that = data.tanggal_spk) ? new Date(that) : void 8
                        };
                        Meteor.call('import', 'gudang', {
                          selector: sel,
                          modifier: opt
                        });
                      }
                      if (data.harga) {
                        sel = {
                          nama: _.snakeCase(data.nama)
                        };
                        opt = {
                          harga: +data.harga,
                          first: data.first,
                          second: data.second,
                          third: (that = data.third) ? that : void 8,
                          active: true
                        };
                        Meteor.call('import', 'tarif', {
                          selector: sel,
                          modifier: opt
                        });
                      }
                      if (data.password) {
                        ['newUser', 'importRoles'].map(function(i){
                          return Meteor.call(i, data);
                        });
                      }
                      if (data.daerah) {
                        return coll.daerah.insert({
                          daerah: _.lowerCase(data.daerah),
                          provinsi: (that = data.provinsi) ? +that : void 8,
                          kabupaten: (that = data.kabupaten) ? +that : void 8,
                          kecamatan: (that = data.kecamatan) ? +that : void 8,
                          kelurahan: (that = data.kelurahan) ? +that : void 8
                        });
                      }
                    }
                  });
                }
              }), m('span.file-cta', m('span.file-icon', m('i.fa.fa-upload')), m('span.file-label', 'Pilih file .csv')))), [0, 1].map(function(){
                return m('br');
              }), m('h4', 'Daftar Tarif Tindakan'), m('table.table', {
                oncreate: function(){
                  return Meteor.subscribe('coll', 'tarif', {
                    onReady: function(){
                      return m.redraw();
                    }
                  });
                }
              }, m('thead', m('tr', attr.manajemen.headers.tarif.map(function(i){
                return m('th', _.startCase(i));
              }))), m('tbody', pagins(coll.tarif.find().fetch()).map(function(i){
                var arr;
                return m('tr', tds(arr = [_.startCase(i.nama), rupiah(i.harga), _.startCase(i.first), _.startCase(i.second), _.startCase(i.third), i.active ? 'Aktif' : 'Non-aktif']));
              }))), elem.pagins());
            }
          }
        }
      };
    },
    amprah: function(){
      return {
        view: function(){
          var arr;
          if (attr.pageAccess(['jalan', 'inap', 'obat', 'farmasi', 'depook'])) {
            return m('.content', {
              oncreate: function(){
                Meteor.subscribe('users', {
                  onReady: function(){
                    return m.redraw();
                  }
                });
                Meteor.subscribe('coll', 'gudang', {
                  onReady: function(){
                    return m.redraw();
                  }
                });
                return state.showForm = {
                  obat: false,
                  bhp: false
                };
              }
            }, _.compact(attr.amprah.reqForm()).map(function(type){
              var ref$;
              return m('div', [0].map(function(i){
                return m('br');
              }), m('.button.is-primary', {
                onclick: function(){
                  return typeof state != 'undefined' && state !== null ? state.showForm[type] = !((typeof state != 'undefined' && state !== null) && state.showForm[type]) : void 8;
                }
              }, m('span', m('i.fa.fa-shopping-basket')), m('span', "Request " + _.upperCase(type))), ((ref$ = state.showForm) != null && ref$[type]) && !userGroup('farmasi') ? (m('h4', 'Form Amprah'), m(autoForm({
                collection: coll.amprah,
                schema: new SimpleSchema(schema.amprah(type)),
                type: 'insert',
                id: "formAmprah" + type,
                columns: 2,
                hooks: {
                  after: function(){
                    state.showForm = {
                      obat: false,
                      bhp: false
                    };
                    return m.redraw();
                  }
                }
              }))) : void 8);
            }), m('br'), m('h4', 'Daftar Amprah'), m('table.table', {
              oncreate: function(){
                Meteor.subscribe('users', {
                  onReady: function(){
                    return m.redraw();
                  }
                });
                return Meteor.subscribe('coll', 'amprah', {
                  onReady: function(){
                    return m.redraw();
                  }
                });
              }
            }, m('thead', m('tr', attr.amprah.headers.requests.map(function(i){
              return m('th', _.startCase(i));
            }))), m('tbody', pagins(attr.amprah.amprahList()).map(function(i){
              var arr, ref$, that;
              return m('tr', tds(arr = [
                hari(i.tanggal_minta), function(it){
                  return (it != null ? it.full : void 8) || _.startCase(i.ruangan);
                }(modules.find(function(it){
                  return it.name === i.ruangan;
                })), _.startCase(function(it){
                  return it != null ? it.username : void 8;
                }(Meteor.users.findOne(i.peminta))), i.jumlah + " unit", (ref$ = look2('gudang', i.nama)) != null ? ref$.nama : void 8, (that = i.penyerah) ? _.startCase(function(it){
                  return it != null ? it.username : void 8;
                }(Meteor.users.findOne(that))) : void 8, (that = i.diserah) ? that + " unit" : void 8, (that = i.tanggal_serah) ? hari(that) : void 8, attr.amprah.buttonConds(i) ? m('.button.is-primary', {
                  onclick: function(){
                    return state.modal = i;
                  }
                }, m('span', 'Serah')) : void 8
              ]));
            })), m('br'), elem.pagins()), state.modal ? elem.modal({
              title: 'Respon Amprah',
              content: state.modal.nama
                ? m('div', m('table.table', m('thead', m('tr', ['nama_barang', 'diminta', 'sedia'].map(function(i){
                  return m('th', _.startCase(i));
                }))), m('tbody', m('tr', tds(arr = [look2('gudang', state.modal.nama).nama, state.modal.jumlah, attr.amprah.available()])))), m(autoForm({
                  schema: new SimpleSchema(schema.responAmprah),
                  id: 'formResponAmprah',
                  type: 'method',
                  meteormethod: 'serahAmprah',
                  hooks: {
                    before: function(doc, cb){
                      if (doc.diserah <= attr.amprah.available()) {
                        return cb(_.merge(doc, state.modal));
                      }
                    },
                    after: function(doc){
                      state.modal = doc;
                      return m.redraw();
                    }
                  }
                })))
                : m('table.table', m('thead', m('tr', ['nama_obat', 'no_batch', 'serahkan'].map(function(i){
                  return m('th', _.startCase(i));
                }))), m('tbody', state.modal.map(function(i){
                  return m('tr', tds([i.nama_obat, i.no_batch, i.serah]));
                })))
            }) : void 8);
          }
        }
      };
    }
  };
  m.route.prefix('');
  m.route(document.body, '/dashboard', _.merge.apply(_, [{
    '/dashboard': comp.layout(comp.welcome())
  }].concat(
    slice$.call(modules.map(function(arg$){
      var name, ref$;
      name = arg$.name;
      return ref$ = {}, ref$["/" + name] = comp.layout(typeof comp[name] == 'function' ? comp[name]() : void 8), ref$;
    })), [{
      '/regis/:jenis': comp.layout(comp.pasien()),
      '/regis/:jenis/:idpasien': comp.layout(comp.pasien()),
      '/jalan/:idpasien': comp.layout(comp.pasien()),
      '/manajemen/:subroute': comp.layout(comp.manajemen()),
      '/login': comp.layout(comp.login()),
      '/farmasi/:idbarang': comp.layout(comp.farmasi())
    }]
  )));
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"server.ls.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// server.ls.js                                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Generated by LiveScript 1.5.0
var backup, secureMethods, slice$ = [].slice;
if (Meteor.isServer) {
  backup = function(db_port, location){
    return ['pasien', 'gudang', 'users', 'rekap', 'amprah'].map(function(i){
      return shell.exec("mongoexport -h localhost:" + db_port + " -d meteor -c " + i + " -o " + location + "/" + _.kebabCase(hari(new Date)) + "-" + i + ".json");
    });
  };
  Meteor.startup(function(){});
  Meteor.publish('coll', function(name, sel, opt){
    var ref$;
    sel == null && (sel = {});
    opt == null && (opt = {});
    return ((ref$ = Meteor.users.findOne(this.userId)) != null ? ref$.roles : void 8) && coll[name].find(sel, opt);
  });
  Meteor.publish('users', function(sel, opt){
    var ref$;
    sel == null && (sel = {});
    opt == null && (opt = {});
    return ((ref$ = Meteor.users.findOne(this.userId)) != null ? ref$.roles : void 8) && Meteor.users.find(sel, opt);
  });
  secureMethods = function(arg$){
    var name, userId, args, access, check, methods;
    name = arg$.name, userId = arg$.userId, args = arg$.args;
    access = function(group, role){
      var that;
      if (that = Meteor.users.findOne(userId).roles[group]) {
        return in$(role, that) || that;
      }
    };
    check = function(obj, criteria){
      return new SimpleSchema(criteria).newContext().validate(obj);
    };
    methods = {
      newUser: function(){
        var arr;
        return ands(arr = [
          access('manajemen', 'admin'), check(args, {
            username: {
              type: String
            },
            password: {
              type: String
            }
          })
        ]);
      },
      addRole: function(){
        var arr;
        return ands(arr = [
          access('manajemen', 'admin'), check(args, {
            id: {
              type: String
            },
            roles: {
              type: String
            },
            group: {
              type: String,
              optional: true
            },
            poli: {
              type: String,
              optional: true
            }
          })
        ]);
      },
      rmRole: function(){
        var arr;
        return ands(arr = [
          access('manajemen', 'admin'), check(args, {
            id: {
              type: String
            }
          })
        ]);
      },
      rmRawat: function(){
        var arr;
        return ands(arr = [
          ors(['regis', 'jalan'].map(function(it){
            return access(it);
          })), check(args, {
            idpasien: {
              type: String
            },
            idrawat: {
              type: String
            }
          })
        ]);
      },
      updateArrayElm: function(){
        var arr;
        return ands(arr = [
          access('bayar'), check(_.omit(args, 'doc'), _.merge.apply(_, [{}].concat(slice$.call(['name', 'scope', 'recId', 'elmId'].map(function(it){
            var ref$;
            return ref$ = {}, ref$[it + ""] = {
              type: String
            }, ref$;
          })))))
        ]);
      }
    };
    return methods[name]();
  };
  Meteor.methods({
    newUser: function(doc){
      var username, password, that, i$, ref$, len$, i, results$ = [];
      username = doc.username, password = doc.password;
      if (secureMethods({
        name: 'newUser',
        userId: this.userId,
        args: doc
      })) {
        if (that = Accounts.findUserByUsername(username)) {
          for (i$ = 0, len$ = (ref$ = ['username', 'password']).length; i$ < len$; ++i$) {
            i = ref$[i$];
            results$.push(Accounts["set" + _.startCase(i)](that._id, doc[i]));
          }
          return results$;
        } else {
          return Accounts.createUser(doc);
        }
      }
    },
    addRole: function(doc){
      var id, roles, group, poli;
      id = doc.id, roles = doc.roles, group = doc.group, poli = doc.poli;
      if (secureMethods({
        name: 'addRole',
        userId: this.userId,
        args: doc
      })) {
        return Roles.addUsersToRoles(id, poli || roles, group);
      }
    },
    rmRole: function(doc){
      if (secureMethods({
        name: 'rmRole',
        userId: this.userId,
        args: doc
      })) {
        return Meteor.users.update({
          _id: doc.id
        }, {
          $set: {
            roles: {}
          }
        });
      }
    },
    'import': function(arg$){
      var name, selector, modifier, arrName, find, that, ref$;
      name = arg$.name, selector = arg$.selector, modifier = arg$.modifier, arrName = arg$.arrName;
      find = coll[name].find(selector);
      if (arrName) {
        if (that = find) {
          return coll[name].update({
            _id: find._id
          }, {
            $push: (ref$ = {}, ref$[that + ""] = modifier[that][0], ref$)
          });
        } else {
          return coll[name].insert(_.merge(selector, modifier));
        }
      } else {
        return coll[name].insert(_.merge(selector, modifier));
      }
    },
    rmRawat: function(doc){
      var idpasien, idrawat;
      idpasien = doc.idpasien, idrawat = doc.idrawat;
      if (secureMethods({
        name: 'rmRawat',
        userId: this.userId,
        args: doc
      })) {
        return coll.pasien.update(idpasien, {
          $set: {
            rawat: coll.pasien.findOne(idpasien).rawat.filter(function(it){
              return it.idrawat !== idrawat;
            })
          }
        });
      }
    },
    updateArrayElm: function(obj){
      var name, scope, recId, elmId, doc, ref$;
      name = obj.name, scope = obj.scope, recId = obj.recId, elmId = obj.elmId, doc = obj.doc;
      if (secureMethods({
        name: 'updateArrayElm',
        userId: this.userId,
        args: obj
      })) {
        return coll[name].update(recId, {
          $set: (ref$ = {}, ref$[scope + ""] = coll[name].findOne(recId)[scope].map(function(i){
            if (i["id" + scope] === elmId) {
              return doc;
            } else {
              return i;
            }
          }), ref$)
        });
      }
    },
    serahObat: function(doc){
      var _id, source, obat, bhp, batches, opts, pasien, stock, i$, ref$, len$, i, either;
      _id = doc._id, source = doc.source, obat = doc.obat, bhp = doc.bhp;
      batches = [];
      opts = {
        obat: 'diapotik',
        depook: 'didepook'
      };
      pasien = coll.pasien.findOne(_id);
      stock = opts[source];
      for (i$ = 0, len$ = (ref$ = slice$.call(obat).concat(slice$.call(bhp || []))).length; i$ < len$; ++i$) {
        i = ref$[i$];
        coll.gudang.update(i.nama, {
          $set: {
            batch: reduce([], coll.gudang.findOne(i.nama).batch, fn$)
          }
        });
      }
      either = _id ? {
        idpasien: _id
      } : doc;
      return reduce([], batches, function(res, inc){
        var obj;
        obj = {
          nama_obat: inc.nama_obat,
          idbatch: inc.idbatch,
          nobatch: inc.nobatch,
          jumlah: inc.jumlah
        };
        if (res.find(function(i){
          return i.no_mr === inc.no_mr;
        })) {
          return res.map(function(i){
            if (i.no_mr === inc.no_mr) {
              return {
                obat: slice$.call(i.obat).concat([obj])
              };
            }
          });
        } else {
          return slice$.call(res).concat([{
            obat: [obj]
          }]);
        }
      }).map(function(i){
        return _.assign(either, {
          obat: reduce([], i.obat, function(res, inc){
            var obj;
            obj = {
              idbatch: inc.idbatch,
              nobatch: inc.nobatch,
              jumlah: inc.jumlah
            };
            if (res.find(function(i){
              return i.nama_obat === inc.nama_obat;
            })) {
              return res.map(function(i){
                return _.assign(i, {
                  batches: slice$.call(i.batches).concat([obj])
                });
              });
            } else {
              return slice$.call(res).concat([{
                nama_obat: inc.nama_obat,
                batches: [obj]
              }]);
            }
          })
        });
      });
      function fn$(res, inc){
        var arr, minim, that, obj, ref$;
        return arr = slice$.call(res).concat([i.jumlah < 1
          ? inc
          : (minim = function(){
            return min([i.jumlah, inc[stock]]);
          }, batches.push({
            idpasien: (that = pasien) ? that._id : void 8,
            nama_obat: i.nama,
            idbatch: inc.idbatch,
            nobatch: inc.nobatch,
            jumlah: minim()
          }), obj = _.assign({}, inc, (ref$ = {}, ref$[stock + ""] = inc[stock] - minim(), ref$)), i.jumlah -= minim(), obj)]);
      }
    },
    serahAmprah: function(doc){
      var _id, nama, diserah, ruangan, batches, cloned;
      _id = doc._id, nama = doc.nama, diserah = doc.diserah, ruangan = doc.ruangan;
      batches = [];
      cloned = _.merge({}, doc);
      coll.gudang.update(nama, {
        $set: {
          batch: reduce([], coll.gudang.findOne(nama).batch, function(res, inc){
            var arr, minim, obj;
            return arr = slice$.call(res).concat([diserah < 1 || inc.digudang < 1
              ? inc
              : (minim = function(){
                return min([diserah, inc.digudang]);
              }, batches.push({
                nama_obat: coll.gudang.findOne(nama).nama,
                no_batch: inc.nobatch,
                idbatch: inc.idbatch,
                serah: minim()
              }), obj = _.assign({}, inc, {
                digudang: inc.digudang - minim()
              }, ruangan === 'obat'
                ? {
                  diapotik: inc['diapotik'] + minim()
                }
                : ruangan === 'depook' ? {
                  didepook: inc['didepook'] + minim()
                } : void 8), diserah -= minim(), obj)]);
          })
        }
      });
      coll.amprah.update(_id, _.assign(doc, {
        batch: batches,
        diserah: cloned.diserah
      }));
      return batches;
    },
    doneRekap: function(){
      var sel, opt;
      sel = {
        printed: {
          $exists: false
        }
      };
      opt = {
        $set: {
          printed: new Date()
        }
      };
      return coll.rekap.update(sel, opt, {
        multi: true
      });
    },
    sortByDate: function(arg$){
      var idbarang;
      idbarang = arg$.idbarang;
      return coll.gudang.update(idbarang, {
        $set: {
          batch: function(){
            var source, sortedIn, sortedEd;
            source = coll.gudang.findOne(idbarang).batch;
            sortedIn = _.sortBy(source, function(i){
              return new Date(i.masuk).getTime();
            });
            return sortedEd = _.sortBy(sortedIn, function(i){
              return new Date(i.kadaluarsa).getTime();
            });
          }()
        }
      });
    },
    icdX: function(arg$){
      var rawat, idpasien, icdx;
      rawat = arg$.rawat, idpasien = arg$.idpasien, icdx = arg$.icdx;
      return coll.pasien.update(idpasien, {
        $set: {
          rawat: coll.pasien.findOne(idpasien).rawat.map(function(i){
            if (i.idrawat !== rawat.idrawat) {
              return i;
            } else {
              return _.merge(rawat, {
                icdx: icdx
              });
            }
          })
        }
      });
    },
    onePasien: function(arg$){
      var no_mr;
      no_mr = arg$.no_mr;
      return coll.pasien.findOne({
        no_mr: +no_mr
      });
    },
    mergePatients: function(){
      var grouped, filtered, merged;
      grouped = _.groupBy(coll.pasien.find().fetch(), 'no_mr');
      filtered = _.filter(grouped, function(it){
        return it.length > 1;
      });
      merged = filtered.map(function(it){
        return _.merge.apply(_, it);
      });
      return merged.map(function(it){
        coll.pasien.remove({
          no_mr: it.no_mr
        });
        return coll.pasien.insert(it);
      });
    },
    incomes: function(arg$){
      var start, end, a, pipe, b, jumlah, c, currencied;
      start = arg$.start, end = arg$.end;
      if (start < end) {
        a = coll.pasien.aggregate(pipe = [
          a = {
            $match: {
              rawat: {
                $elemMatch: {
                  $and: [
                    {
                      tanggal: {
                        $gt: start
                      }
                    }, {
                      tanggal: {
                        $lt: end
                      }
                    }
                  ]
                }
              }
            }
          }, b = {
            $unwind: '$rawat'
          }, b = {
            $match: {
              $and: [
                {
                  'rawat.tanggal': {
                    $gt: start
                  }
                }, {
                  'rawat.tanggal': {
                    $lt: end
                  }
                }, {
                  'rawat.cara_bayar': {
                    $eq: 1
                  }
                }
              ]
            }
          }
        ]);
        b = a.map(function(i){
          var that, ref$;
          return {
            no_mr: zeros(i.no_mr),
            nama_pasien: i.regis.nama_lengkap,
            tanggal: hari(i.rawat.tanggal),
            klinik: look('klinik', i.rawat.klinik).label,
            no_karcis: i.rawat.nobill.toString(),
            tp_kartu: i.rawat.first ? 10000 : '-',
            tp_karcis: look('karcis', i.rawat.klinik).label * 1000,
            tp_tindakan: (that = i.rawat.tindakan) ? _.sum(that.map(function(it){
              return it.harga;
            })) : '-',
            tp_obat: !i.rawat.obat
              ? '-'
              : _.sum((ref$ = coll.rekap.findOne({
                idrawat: i.rawat.idrawat
              })) != null ? ref$.obat.map(function(j){
                var obat;
                obat = coll.gudang.findOne(j.nama_obat);
                return _.sum(j.batches.map(function(k){
                  var this$ = this;
                  return function(it){
                    return it.jual * k.jumlah;
                  }(obat.batch.find(function(l){
                    return l.idbatch === k.idbatch;
                  }));
                }));
              }) : void 8)
          };
        }).map(function(i){
          return _.assign(i, {
            total: i.tp_karcis + i.tp_tindakan + i.tp_obat
          });
        });
        jumlah = function(type){
          return rupiah(_.sum(b.map(function(it){
            return it[type];
          })));
        };
        c = ['', '', '', '', 'Total', jumlah('tp_kartu'), jumlah('tp_karcis'), jumlah('tp_tindakan'), jumlah('tp_obat'), ''];
        currencied = b.map(function(i){
          return _.assign(i, {
            tp_kartu: rupiah(i.tp_kartu),
            tp_karcis: rupiah(i.tp_karcis),
            tp_tindakan: rupiah(i.tp_tindakan),
            tp_obat: rupiah(i.tp_obat),
            total: rupiah(i.total)
          });
        });
        return slice$.call(currencied).concat([c]);
      }
    },
    dispenses: function(arg$){
      var start, end, source, a, b, c, stokAwal, d;
      start = arg$.start, end = arg$.end, source = arg$.source;
      if (start < end) {
        a = coll.rekap.find().fetch().filter(function(it){
          var ref$;
          return start < (ref$ = it.printed) && ref$ < end;
        });
        b = _.flattenDeep(a.map(function(i){
          return i.obat.map(function(j){
            return j.batches.map(function(k){
              return {
                nama_obat: j.nama_obat,
                idbatch: k.idbatch,
                jumlah: k.jumlah
              };
            });
          });
        }));
        c = reduce([], b, function(res, inc){
          var matched;
          matched = function(it){
            var arr;
            return _.every(arr = [it.nama_obat === inc.nama_obat, it.idbatch === inc.idbatch]);
          };
          if (!res.find(function(it){
            return matched(it);
          })) {
            return slice$.call(res).concat([inc]);
          } else {
            return res.map(function(it){
              if (!matched(it)) {
                return it;
              } else {
                return _.assign(it, {
                  jumlah: it.jumlah + inc.jumlah
                });
              }
            });
          }
        });
        stokAwal = function(i, source){
          var pipe, a, b, this$ = this;
          return _.sum(function(it){
            return it.map(function(it){
              return it.batch.serah;
            });
          }(coll.amprah.aggregate(pipe = [
            a = {
              $unwind: '$batch'
            }, b = {
              $match: {
                $and: [
                  {
                    nama: i.nama_obat
                  }, {
                    ruangan: source
                  }, {
                    'batch.idbatch': i.idbatch
                  }
                ]
              }
            }
          ])));
        };
        d = c.map(function(i){
          return _.merge(i, {
            awal: stokAwal(i, source)
          });
        });
        return d.map(function(i){
          var obj, batch, ref$;
          obj = coll.gudang.findOne(i.nama_obat);
          batch = obj.batch.find(function(it){
            return it.idbatch === i.idbatch;
          });
          return {
            'Nama Obat': obj.nama,
            'Satuan': look('satuan', obj.satuan).label,
            'Jenis': look('barang', obj.jenis).label,
            'No. Batch': batch.nobatch,
            'ED': hari(batch.kadaluarsa),
            'Harga': rupiah(batch.jual),
            'Barang Masuk': start < (ref$ = batch.masuk) && ref$ < end ? i.awal : '-',
            'Qty Awal': batch.masuk < start ? i.awal : '-',
            'Keluar': i.jumlah,
            'Sisa Stok': i.awal - i.jumlah,
            'Total Keluar': rupiah(batch.jual * i.jumlah),
            'Total Persediaan': rupiah(batch.jual * (i.awal - i.jumlah))
          };
        });
      }
    },
    visits: function(arg$){
      var start, end, docs, pipe, a, list, b, c, x;
      start = arg$.start, end = arg$.end;
      docs = coll.pasien.aggregate(pipe = [
        a = {
          $match: {
            rawat: {
              $elemMatch: {
                $and: list = [
                  {
                    tanggal: {
                      $gt: start
                    }
                  }, {
                    tanggal: {
                      $lt: end
                    }
                  }
                ]
              }
            }
          }
        }, b = {
          $unwind: '$rawat'
        }, c = {
          $match: {
            $and: x = [
              {
                'rawat.tanggal': {
                  $gt: start
                }
              }, {
                'rawat.tanggal': {
                  $lt: end
                }
              }
            ]
          }
        }
      ]);
      return docs.map(function(i){
        var ref$, ref1$, ref2$;
        return {
          hari: moment(i.rawat.tanggal).format('D MMM YYYY'),
          klinik: look('klinik', i.rawat.klinik).label,
          cara_bayar: look('cara_bayar', i.rawat.cara_bayar).label,
          baru_lama: 'Lama',
          pendaftar: _.startCase((ref$ = Meteor.users.findOne(i.rawat.petugas.regis)) != null ? ref$.username : void 8),
          perawat: _.startCase((ref1$ = Meteor.users.findOne(i.rawat.petugas.perawat)) != null ? ref1$.username : void 8),
          dokter: _.startCase((ref2$ = Meteor.users.findOne(i.rawat.petugas.dokter)) != null ? ref2$.username : void 8)
        };
      });
    },
    stocks: function(arg$){
      var start, end;
      start = arg$.start, end = arg$.end;
      return _.flatten(coll.gudang.find().fetch().map(function(i){
        return i.batch.map(function(j){
          return _.merge({}, i, j, {
            amprah: function(){
              return _.flatten(coll.amprah.find().fetch().filter(function(k){
                return k.nama === i._id;
              }).map(function(it){
                return it.batch.filter(function(it){
                  return it.idbatch === j.idbatch;
                });
              }));
            }()
          });
        }).map(function(i){
          var ref$, this$ = this;
          return {
            'Nama Obat': i.nama,
            'Satuan': look('satuan', i.satuan).label,
            'Jenis': look('barang', i.jenis).label,
            'No. Batch': i.nobatch,
            'ED': hari(i.kadaluarsa),
            'Harga': rupiah(i.jual),
            'Barang Masuk': start < (ref$ = i.masuk) && ref$ < end ? i.awal : '-',
            'Stok Awal': i.masuk < start ? i.awal : '-',
            'Keluar': _.sum(i.amprah.map(function(it){
              return it.serah;
            })),
            'Sisa Stok': i.awal - _.sum(i.amprah.map(function(it){
              return it.serah;
            })),
            'Total Keluar': rupiah(i.jual * _.sum(i.amprah.map(function(it){
              return it.serah;
            }))),
            'Total Persediaan': rupiah((function(it){
              return it * i.jual;
            })(i.awal - _.sum(i.amprah.map(function(it){
              return it.serah;
            }))))
          };
        });
      }));
    },
    notify: function(arg$){
      var name, params, obj;
      name = arg$.name, params = arg$.params;
      obj = {
        amprah: function(){
          return coll.amprah.find({
            diserah: {
              $exists: false
            }
          }).fetch().length;
        },
        obat: function(){
          var this$ = this;
          return function(it){
            return it.length;
          }(coll.pasien.aggregate([{
            $match: {
              rawat: {
                $elemMatch: {
                  givenDrug: {
                    $exists: false
                  }
                }
              }
            }
          }]));
        },
        depook: function(){
          var this$ = this;
          return function(it){
            return it.length;
          }(coll.pasien.aggregate([{
            $match: {
              rawat: {
                $elemMatch: {
                  givenDrug: {
                    $exists: false
                  }
                }
              }
            }
          }]));
        },
        jalan: function(){
          var pipe, a, arr, this$ = this;
          return function(it){
            return it.length;
          }(coll.pasien.aggregate(pipe = a = {
            $match: {
              rawat: {
                $elemMatch: {
                  $and: arr = [
                    {
                      klinik: {
                        $eq: function(it){
                          return it.value;
                        }(selects.klinik.find(function(it){
                          return params[0] === _.snakeCase(it.label);
                        }))
                      }
                    }, params[1]
                      ? {
                        anamesa_dokter: {
                          $exists: false
                        }
                      }
                      : {
                        anamesa_perawat: {
                          $exists: false
                        }
                      }
                  ]
                }
              }
            }
          }));
        }
      };
      return typeof obj[name] == 'function' ? obj[name].apply(obj, params) : void 8;
    },
    nextMR: function(){
      var list, pipe, nums, index;
      list = coll.pasien.aggregate(pipe = [
        {
          $project: {
            no_mr: 1
          }
        }, {
          $sort: {
            no_mr: 1
          }
        }
      ]);
      nums = list.map(function(it){
        return it.no_mr;
      });
      index = nums.findIndex(function(i, j, k){
        return i - k[j - 1] > 1;
      });
      return nums[index - 1] + 1;
    },
    backupNow: backup,
    regions: function(arg$){
      var provinsi, kabupaten, kecamatan, kelurahan, this$ = this;
      provinsi = arg$.provinsi, kabupaten = arg$.kabupaten, kecamatan = arg$.kecamatan, kelurahan = arg$.kelurahan;
      if (ands([provinsi, kabupaten, kecamatan, kelurahan])) {
        return {
          provinsi: function(it){
            return it.daerah;
          }(coll.daerah.findOne({
            provinsi: provinsi
          })),
          kabupaten: function(it){
            return it.daerah;
          }(coll.daerah.findOne({
            provinsi: provinsi,
            kabupaten: kabupaten
          })),
          kecamatan: function(it){
            return it.daerah;
          }(coll.daerah.findOne({
            kabupaten: kabupaten,
            kecamatan: kecamatan
          })),
          kelurahan: function(it){
            return it.daerah;
          }(coll.daerah.findOne({
            kecamatan: kecamatan,
            kelurahan: kelurahan
          }))
        };
      } else {
        return {};
      }
    },
    userProfile: function(doc){
      return Meteor.users.update(doc.id, {
        $set: {
          profile: _.omit(doc, 'id')
        }
      });
    }
  });
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},{
  "extensions": [
    ".js",
    ".json"
  ]
});

require("/folder/funcs.ls.js");
require("/folder/guides.ls.js");
require("/folder/modules.ls.js");
require("/folder/parent.ls.js");
require("/folder/pdf.ls.js");
require("/folder/rights.ls.js");
require("/folder/selects.ls.js");
require("/both.ls.js");
require("/client.ls.js");
require("/server.ls.js");